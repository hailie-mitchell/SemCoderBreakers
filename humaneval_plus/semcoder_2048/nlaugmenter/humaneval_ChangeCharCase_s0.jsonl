{"task_id": "HumanEval/0", "completion": "\n    # Sort the list to find pairs in a single pass\n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        # Check if the difference between the current number and the next one is within the threshold\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n            \n    return False\n", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n    GiVeN threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    # Sort the list to find pairs in a single pass\n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        # Check if the difference between the current number and the next one is within the threshold\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n            \n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    groups = []\n    current_group = []\n    open_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group.append(char)\n        elif char == ')':\n            if open_count > 0:\n                current_group.append(char)\n                open_count -= 1\n                if open_count == 0:  # Closed group\n                    groups.append(''.join(current_group))\n                    current_group = []\n\n    return groups\n", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n    seParate those group iNto sePaRAtE sTRiNgs anD return the list of tHOsE.\n    sEpaRaTE GroUpS ArE balaNceD (eaCH opEn braCe iS pRoPERLy cLosed) and nOT NEsted withiN eACh other\n    ignorE anY spacES in tHe iNPut StRinG.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    groups = []\n    current_group = []\n    open_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group.append(char)\n        elif char == ')':\n            if open_count > 0:\n                current_group.append(char)\n                open_count -= 1\n                if open_count == 0:  # Closed group\n                    groups.append(''.join(current_group))\n                    current_group = []\n\n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "\n    if number <= 0:\n        raise ValueError(\"Input must be a positive floating-point number.\")\n    \n    # Extract the integer part\n    integer_part = int(number)\n    \n    # Calculate the decimal part\n    decimal_part = number - integer_part\n    \n    return decimal_part\n", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n    And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n    (lEFtOvER pArt alWays smaLLeR THan 1).\n\n    reTURn tHe DEcImal pArt Of tHE number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    if number <= 0:\n        raise ValueError(\"Input must be a positive floating-point number.\")\n    \n    # Extract the integer part\n    integer_part = int(number)\n    \n    # Calculate the decimal part\n    decimal_part = number - integer_part\n    \n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank account ThaT StArTs wiTH\n    zeRo balance. Your TASk is To detect if At any point thE balaNcE Of account FaLLlS beloW zero, anD\n    At THAt pOiNT FunCtIOn ShoulD return True. OtHerWIse It shoUld return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    if not numbers:\n        return 0.0  # or raise an exception, depending on requirements\n    \n    mean_value = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean_value) for num in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    \n    return mad\n", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n    ArOund THe mean oF this dataset.\n    MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n    elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n    MAD = aVerAgE | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    if not numbers:\n        return 0.0  # or raise an exception, depending on requirements\n    \n    mean_value = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean_value) for num in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    \n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])  # Append the last element without delimeter\n    \n    return result\n", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])  # Append the last element without delimeter\n    \n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    results = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        results.append(max_depth)\n    \n    return results\n", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n    For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n    E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    results = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        results.append(max_depth)\n    \n    return results\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    total_sum = 0\n    product = 1\n    \n    for number in numbers:\n        total_sum += number\n        product *= number\n    \n    return (total_sum, product)\n", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n    Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    total_sum = 0\n    product = 1\n    \n    for number in numbers:\n        total_sum += number\n        product *= number\n    \n    return (total_sum, product)\n"}
{"task_id": "HumanEval/9", "completion": "\n    if not numbers:\n        return []\n    \n    rolling_max_list = []\n    current_max = numbers[0]\n    \n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list\n", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n    in thE sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    if not numbers:\n        return []\n    \n    rolling_max_list = []\n    current_max = numbers[0]\n    \n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list\n"}
{"task_id": "HumanEval/10", "completion": "\n    if not string:\n        return ''\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            break\n    \n    # Create the palindrome by appending the reverse of the prefix\n    prefix = string[:i]\n    return string + prefix[::-1]\n", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" FinD the ShortEst PalinDrome That begIns With a SupPLiEd string.\n    algoRIthM idea is simple:\n    - fINd thE longest poStfix of supplIed string thAt IS a PaLInDrome.\n    - append tO ThE ENd oF tHE string RevErSE oF a string preFix ThaT ComEs befOre ThE pALINdrOmic suffiX.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return ''\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            break\n    \n    # Create the palindrome by appending the reverse of the prefix\n    prefix = string[:i]\n    return string + prefix[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "\n    # Check if the lengths of the strings are the same\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length.\")\n    \n    # Initialize the result string\n    result = []\n    \n    # Perform XOR operation on each character\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result.append('0')\n        else:\n            result.append('1')\n    \n    return ''.join(result)\n", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n    PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Check if the lengths of the strings are the same\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length.\")\n    \n    # Initialize the result string\n    result = []\n    \n    # Perform XOR operation on each character\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result.append('0')\n        else:\n            result.append('1')\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    \n    longest_string = \"\"\n    max_length = 0\n    \n    for string in strings:\n        if len(string) > max_length:\n            longest_string = string\n            max_length = len(string)\n    \n    return longest_string\n", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n    strings Of ThE samE LenGth. Return None in CASe thE input list is emPty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n    \n    longest_string = \"\"\n    max_length = 0\n    \n    for string in strings:\n        if len(string) > max_length:\n            longest_string = string\n            max_length = len(string)\n    \n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    \n    while b != 0:\n        a, b = b, a % b\n    return a\n", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    \n    while b != 0:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\n    if n < 0:\n        return \"\"  # Handle negative input\n    return ' '.join(str(i) for i in range(n + 1))\n", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n    if n < 0:\n        return \"\"  # Handle negative input\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_characters = set()\n    for char in string:\n        distinct_characters.add(char)\n    return len(distinct_characters)\n", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    distinct_characters = set()\n    for char in string:\n        distinct_characters.add(char)\n    return len(distinct_characters)\n"}
{"task_id": "HumanEval/17", "completion": "\n    # Mapping of music symbols to their corresponding beat counts\n    beat_mapping = {\n        'o': 4,\n        'O|': 2,\n        '.|': 1\n    }\n    \n    # Split the input string into a list of symbols\n    symbols = music_string.split()\n    \n    # Initialize a list to hold the beat counts\n    beat_counts = []\n    \n    # Iterate through each symbol and append the corresponding beat count\n    for symbol in symbols:\n        if symbol in beat_mapping:\n            beat_counts.append(beat_mapping[symbol])\n    \n    return beat_counts\n", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n    your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n    not LasT.\n\n    HeRE is A legeNd:\n    'o' - WhOlE note, LASts Four beats\n    'O|' - HALf note, lasts two BeATs\n    '.|' - quateR note, lastS onE beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Mapping of music symbols to their corresponding beat counts\n    beat_mapping = {\n        'o': 4,\n        'O|': 2,\n        '.|': 1\n    }\n    \n    # Split the input string into a list of symbols\n    symbols = music_string.split()\n    \n    # Initialize a list to hold the beat counts\n    beat_counts = []\n    \n    # Iterate through each symbol and append the corresponding beat count\n    for symbol in symbols:\n        if symbol in beat_mapping:\n            beat_counts.append(beat_mapping[symbol])\n    \n    return beat_counts\n"}
{"task_id": "HumanEval/18", "completion": "\n    if not substring:  # Handle empty substring case\n        return 0\n    \n    count = 0\n    substring_length = len(substring)\n    string_length = len(string)\n    \n    # Iterate through the string\n    for i in range(string_length - substring_length + 1):\n        if string[i:i + substring_length] == substring:\n            count += 1\n            \n    return count\n", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" FinD how Many tImeS a givEn substring can Be found in The OrigiNal string. cOuNt OverLApiNg cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    if not substring:  # Handle empty substring case\n        return 0\n    \n    count = 0\n    substring_length = len(substring)\n    string_length = len(string)\n    \n    # Iterate through the string\n    for i in range(string_length - substring_length + 1):\n        if string[i:i + substring_length] == substring:\n            count += 1\n            \n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    # Mapping of string representations to integers\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to lowercase and map to integers\n    mapped_numbers = [number_map[word.lower()] for word in words if word.lower() in number_map]\n    \n    # Sort the numbers\n    sorted_numbers = sorted(mapped_numbers)\n    \n    # Convert sorted integers back to words\n    sorted_words = [list(number_map.keys())[list(number_map.values()).index(num)] for num in sorted_numbers]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" InpUt is A spacE-deLimitEd strIng of nuMbeRals fRom 'ZErO' tO 'ninE'.\n    valId choices are 'zERO', 'one', 'Two', 'three', 'foUr', 'five', 'six', 'sevEn', 'eigHt' ANd 'NiNE'.\n    REturn The striNG wITH numbers sorted frOm SMAllEsT To LargeSt\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Mapping of string representations to integers\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to lowercase and map to integers\n    mapped_numbers = [number_map[word.lower()] for word in words if word.lower() in number_map]\n    \n    # Sort the numbers\n    sorted_numbers = sorted(mapped_numbers)\n    \n    # Convert sorted integers back to words\n    sorted_words = [list(number_map.keys())[list(number_map.values()).index(num)] for num in sorted_numbers]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/20", "completion": "\n    # Sort the list\n    numbers.sort()\n    \n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    # Iterate through the sorted list to find the closest elements\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" FroM a suPplieD list of numbers (Of lenGth at Least twO) seLect aNd return tWO tHaT are THe cLosest to each\n    oTHEr anD return them in order (Smaller numbeR, largEr NUmBeR).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the list\n    numbers.sort()\n    \n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    # Iterate through the sorted list to find the closest elements\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    if max_value == min_value:\n        return [0.0] * len(numbers)  # All values are the same, return a list of zeros\n    \n    rescaled = [(x - min_value) / (max_value - min_value) for x in numbers]\n    return rescaled\n", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n    suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    if max_value == min_value:\n        return [0.0] * len(numbers)  # All values are the same, return a list of zeros\n    \n    rescaled = [(x - min_value) / (max_value - min_value) for x in numbers]\n    return rescaled\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" FilTer gIven list oF anY pythOn values onlY for intEgeRs\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" RetUrn lEngth Of gIven string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    if n <= 1:\n        return -1  # or raise an exception, depending on the requirement\n    \n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1  # This line should never be reached, but it's here for completeness\n", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    if n <= 1:\n        return -1  # or raise an exception, depending on the requirement\n    \n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1  # This line should never be reached, but it's here for completeness\n"}
{"task_id": "HumanEval/25", "completion": "\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    factors = []\n    # Start with 2, since 1 is not a prime number\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        if n == 1:  # No need to continue if n is reduced to 1\n            break\n    return factors\n", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n    Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n    inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    factors = []\n    # Start with 2, since 1 is not a prime number\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        if n == 1:  # No need to continue if n is reduced to 1\n            break\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = set()\n    result = []\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result\n", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n    keeP order of elemeNTS lefT the same as in The input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    seen = set()\n    result = []\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)  # Non-alphabetic characters remain unchanged\n    return ''.join(result)\n", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)  # Non-alphabetic characters remain unchanged\n    return ''.join(result)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" ConCateNate list oF strings inTo a siNgle sTring\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [num for num in l if num > 0]\n", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"RetuRn onLy posItiVe numBers in tHe list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "solution": "\n\ndef is_prime(n):\n    \"\"\"RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    # Check if the list has an even number of coefficients\n    if len(xs) % 2 == 0:\n        raise ValueError(\"The number of coefficients must be odd.\")\n\n    # Find the largest coefficient\n    largest_coeff = max(xs)\n    # Start with a reasonable initial guess\n    x_guess = 0.0\n    epsilon = 1e-6  # Tolerance for convergence\n    while True:\n        # Evaluate the polynomial at the current guess\n        value = poly(xs, x_guess)\n        # Check if we are close enough to zero\n        if abs(value) < epsilon:\n            return x_guess\n        # Update the guess using Newton's method\n        # Calculate the derivative of the polynomial\n        derivative = sum([i * coeff * math.pow(x_guess, i - 1) for i, coeff in enumerate(xs)])\n        # Update the guess\n        x_guess -= value / derivative\n", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are CoefFicieNts Of a poLynomIal.\n    find_ZerO find x SucH ThAt poly(x) = 0.\n    Find_ZEro Returns only onLY Zero Point, even iF there are manY.\n    MoreOvER, fInD_ZeRo onlY takes list xs hAViNG EveN nUMBer Of COeFficiEntS\n    anD LarGest nOn zErO cOEFFicIent as it gUARAntees\n    a solUtIOn.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    # Check if the list has an even number of coefficients\n    if len(xs) % 2 == 0:\n        raise ValueError(\"The number of coefficients must be odd.\")\n\n    # Find the largest coefficient\n    largest_coeff = max(xs)\n    # Start with a reasonable initial guess\n    x_guess = 0.0\n    epsilon = 1e-6  # Tolerance for convergence\n    while True:\n        # Evaluate the polynomial at the current guess\n        value = poly(xs, x_guess)\n        # Check if we are close enough to zero\n        if abs(value) < epsilon:\n            return x_guess\n        # Update the guess using Newton's method\n        # Calculate the derivative of the polynomial\n        derivative = sum([i * coeff * math.pow(x_guess, i - 1) for i, coeff in enumerate(xs)])\n        # Update the guess\n        x_guess -= value / derivative\n"}
{"task_id": "HumanEval/33", "completion": "\n    # Create a new list l' with the same length as l\n    l_prime = [0] * len(l)\n    \n    # Iterate through the indices of l\n    for i in range(len(l)):\n        if i % 3 != 0:  # If index is not divisible by 3\n            l_prime[i] = l[i]  # Copy the value from l to l'\n        else:  # If index is divisible by 3\n            l_prime[i] = l[i]  # Copy the value from l to l'\n    \n    # Sort the values in l' that are not divisible by 3\n    l_prime_sorted = sorted(l_prime[i] for i in range(len(l)) if i % 3 != 0)\n    \n    # Fill in the sorted values back into l'\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime[i] = l_prime_sorted.pop(0)  # Pop the next sorted value\n    \n    return l_prime\n", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This FuncTion tAkeS a list l and ReturNs a list l' such ThaT\n    l' is idEntICaL tO l in the INdiCies that are noT DIvisIble by threE, while its valUes at ThE InDiCIeS that Are diviSIbLE By tHrEE Are EqUAl\n    To the ValUes OF thE corrEspOnDiNG INdiCies of l, but SORTed.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    # Create a new list l' with the same length as l\n    l_prime = [0] * len(l)\n    \n    # Iterate through the indices of l\n    for i in range(len(l)):\n        if i % 3 != 0:  # If index is not divisible by 3\n            l_prime[i] = l[i]  # Copy the value from l to l'\n        else:  # If index is divisible by 3\n            l_prime[i] = l[i]  # Copy the value from l to l'\n    \n    # Sort the values in l' that are not divisible by 3\n    l_prime_sorted = sorted(l_prime[i] for i in range(len(l)) if i % 3 != 0)\n    \n    # Fill in the sorted values back into l'\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime[i] = l_prime_sorted.pop(0)  # Pop the next sorted value\n    \n    return l_prime\n"}
{"task_id": "HumanEval/34", "completion": "\n    # Use a set to remove duplicates\n    unique_set = set(l)\n    # Convert the set back to a list and sort it\n    unique_list = sorted(unique_set)\n    return unique_list\n", "solution": "\n\ndef unique(l: list):\n    \"\"\"RetuRn sorted unique elEmentS in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n    # Use a set to remove duplicates\n    unique_set = set(l)\n    # Convert the set back to a list and sort it\n    unique_list = sorted(unique_set)\n    return unique_list\n"}
{"task_id": "HumanEval/35", "completion": "\n    if not l:  # Check if the list is empty\n        return None  # or raise an exception\n    max_value = l[0]  # Start with the first element\n    for element in l:\n        if element > max_value:\n            max_value = element  # Update max_value if a larger element is found\n    return max_value\n", "solution": "\n\ndef max_element(l: list):\n    \"\"\"RetuRn maXimum EleMent in tHe list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n    if not l:  # Check if the list is empty\n        return None  # or raise an exception\n    max_value = l[0]  # Start with the first element\n    for element in l:\n        if element > max_value:\n            max_value = element  # Update max_value if a larger element is found\n    return max_value\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i):\n            if i % 11 == 0 or i % 13 == 0:\n                count += 1\n    return count\n", "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i):\n            if i % 11 == 0 or i % 13 == 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    # Create a new list l' with the same length as l\n    l_prime = [0] * len(l)\n    \n    # Copy odd indices from l to l'\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_prime[i] = l[i]\n    \n    # Sort the even indices of l\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    \n    # Fill in the sorted even indices in l'\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime[i] = even_indices.pop(0)\n    \n    return l_prime\n", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This FuncTion tAkeS a list l and ReturNs a list l' such ThaT\n    l' is idEntICaL tO l in the ODd iNdicies, while iTS ValuEs at the even indIcies are equaL\n    to thE vALuEs OF tHe even indIcies of l, BUt SORteD.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # Create a new list l' with the same length as l\n    l_prime = [0] * len(l)\n    \n    # Copy odd indices from l to l'\n    for i in range(len(l)):\n        if i % 2 != 0:\n            l_prime[i] = l[i]\n    \n    # Sort the even indices of l\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    \n    # Fill in the sorted even indices in l'\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime[i] = even_indices.pop(0)\n    \n    return l_prime\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takEs as Input StrIng enCoded With encOde_CycliC fuNCtIoN. RetURns Decoded string.\n    \"\"\"\n\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(limit):\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n            if a > limit:\n                break\n\n    count = 0\n    for fib in fibonacci(1000000):  # A large limit to ensure we find enough primes\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n", "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    priMe_fiB retuRns n-th NumbeR that Is a FibonAccI numbEr aND iT's Also PRimE.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(limit):\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n            if a > limit:\n                break\n\n    count = 0\n    for fib in fibonacci(1000000):  # A large limit to ensure we find enough primes\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n"}
{"task_id": "HumanEval/40", "completion": "\n    if len(l) < 3:\n        return False\n    \n    l.sort()  # Sort the list to facilitate the search\n    \n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False\n", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triPles_Sum_to_ZerO takeS a list of iNtegers As aN inpuT.\n    it REtUrNs True if THerE are three distINCt elEments in the list tHat\n    sum to zero, And False otHeRWiSe.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    if len(l) < 3:\n        return False\n    \n    l.sort()  # Sort the list to facilitate the search\n    \n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    if n < 2:\n        return 0  # No collisions possible with fewer than 2 cars\n    \n    # Calculate the number of ways to choose 2 cars from n\n    return n * (n - 1) // 2\n", "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n    n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n    aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n    EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n    wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n    hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n    in TheiR TRajectORy AS IF tHEY did not collidE.\n\n    This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n    \"\"\"\n\n    if n < 2:\n        return 0  # No collisions possible with fewer than 2 cars\n    \n    # Calculate the number of ways to choose 2 cars from n\n    return n * (n - 1) // 2\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"RetuRn list wiTh eleMenTs incRemenTed by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    \n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    \n    return False\n", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    paiRs_suM_to_zeRo tAkes a list Of intEgers as An iNput.\n    iT reTUrNs True If thERe aRe two distinct ELEmenTs in the list that\n    sUm to zero, and False oTherwIsE.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    seen = set()\n    \n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    \n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    \n    if x == 0:\n        return \"0\"\n    \n    result = []\n    while x > 0:\n        remainder = x % base\n        result.append(str(remainder))\n        x //= base\n    \n    return ''.join(reversed(result))\n", "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ChanGe nuMericAl base oF inpuT numbEr x to base.\n    return strIng RepreSenTAtIoN aftER thE conversion.\n    base nuMBErs aRe less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    \n    if x == 0:\n        return \"0\"\n    \n    result = []\n    while x > 0:\n        remainder = x % base\n        result.append(str(remainder))\n        x //= base\n    \n    return ''.join(reversed(result))\n"}
{"task_id": "HumanEval/45", "completion": "\n    if a < 0 or h < 0:\n        raise ValueError(\"Both base and height must be non-negative.\")\n    return (a * h) / 2\n", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    if a < 0 or h < 0:\n        raise ValueError(\"Both base and height must be non-negative.\")\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the first four Fibonacci numbers\n    fib_numbers = [0, 0, 2, 0]\n    \n    # Compute the Fibonacci numbers iteratively\n    for i in range(4, n + 1):\n        next_fib = fib_numbers[i - 1] + fib_numbers[i - 2] + fib_numbers[i - 3] + fib_numbers[i - 4]\n        fib_numbers.append(next_fib)\n    \n    return fib_numbers[n]\n", "solution": "\n\ndef fib4(n: int):\n    \"\"\"The FIb4 nuMber sEquEnce iS a sequEnce simIlaR to thE FiBBoNaCci sEQunEce that's definED As foLlows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    PleasE write a functiOn to eFfICiEnTLy CompuTe the n-th elEMeNT Of tHe fib4 NUMbeR sEQuEnce.  DO noT usE RecUrsioN.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the first four Fibonacci numbers\n    fib_numbers = [0, 0, 2, 0]\n    \n    # Compute the Fibonacci numbers iteratively\n    for i in range(4, n + 1):\n        next_fib = fib_numbers[i - 1] + fib_numbers[i - 2] + fib_numbers[i - 3] + fib_numbers[i - 4]\n        fib_numbers.append(next_fib)\n    \n    return fib_numbers[n]\n"}
{"task_id": "HumanEval/47", "completion": "\n    if not l:\n        return None  # or raise ValueError(\"List is empty\")\n    \n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 1:\n        # Odd length, return the middle element\n        return sorted_list[n // 2]\n    else:\n        # Even length, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2\n", "solution": "\n\ndef median(l: list):\n    \"\"\"RetuRn median of ElemeNts in The list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    if not l:\n        return None  # or raise ValueError(\"List is empty\")\n    \n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 1:\n        # Odd length, return the middle element\n        return sorted_list[n // 2]\n    else:\n        # Even length, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2\n"}
{"task_id": "HumanEval/48", "completion": "\n    # Normalize the string: remove non-alphanumeric characters and convert to lowercase\n    normalized_text = ''.join(char.lower() for char in text if char.isalnum())\n    \n    # Check if the normalized string is equal to its reverse\n    return normalized_text == normalized_text[::-1]\n", "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    CheCks iF giveN stRing iS a palIndrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Normalize the string: remove non-alphanumeric characters and convert to lowercase\n    normalized_text = ''.join(char.lower() for char in text if char.isalnum())\n    \n    # Check if the normalized string is equal to its reverse\n    return normalized_text == normalized_text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    # Handle the case where p is 1\n    if p == 1:\n        return 0  # According to the problem statement, this is not specified.\n    \n    # Calculate 2^n mod p\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    \n    return result\n", "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    # Handle the case where p is 1\n    if p == 1:\n        return 0  # According to the problem statement, this is not specified.\n    \n    # Calculate 2^n mod p\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    \n    return result\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takEs as Input StrIng enCoded With encOde_Shift FunCTiOn. retuRNs dEcoded string.\n    \"\"\"\n\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = []\n    \n    for char in text:\n        if char not in vowels:\n            result.append(char)\n    \n    return ''.join(result)\n", "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remOve_vOwels Is a FunctIon thAt takes StrIng anD reTUrNs StriNG wiThout vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    vowels = 'aeiouAEIOU'\n    result = []\n    \n    for char in text:\n        if char not in vowels:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/52", "completion": "\n    for number in l:\n        if number >= t:\n            return False\n    return True\n", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"RetuRn True if all NumbeRs in tHe list l are Below ThreshoLd t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    for number in l:\n        if number >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n", "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add tWo nuMbers x And y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    # Convert both strings to lowercase for case insensitivity\n    s0 = s0.lower()\n    s1 = s1.lower()\n    \n    # Create a frequency dictionary for s0\n    freq_s0 = {}\n    for char in s0:\n        if char.isalpha():  # Only consider alphabetic characters\n            freq_s0[char] = freq_s0.get(char, 0) + 1\n    \n    # Check if all characters in s1 are present in s0\n    for char in s1:\n        if char.isalpha():  # Only consider alphabetic characters\n            if char not in freq_s0 or freq_s0[char] == 0:\n                return False\n            freq_s0[char] -= 1  # Decrease the count of the character\n    \n    # If we have checked all characters in s1, they are the same\n    return True\n", "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    CheCk if Two woRds Have tHe samE characTerS.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # Convert both strings to lowercase for case insensitivity\n    s0 = s0.lower()\n    s1 = s1.lower()\n    \n    # Create a frequency dictionary for s0\n    freq_s0 = {}\n    for char in s0:\n        if char.isalpha():  # Only consider alphabetic characters\n            freq_s0[char] = freq_s0.get(char, 0) + 1\n    \n    # Check if all characters in s1 are present in s0\n    for char in s1:\n        if char.isalpha():  # Only consider alphabetic characters\n            if char not in freq_s0 or freq_s0[char] == 0:\n                return False\n            freq_s0[char] -= 1  # Decrease the count of the character\n    \n    # If we have checked all characters in s1, they are the same\n    return True\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n", "solution": "\n\ndef fib(n: int):\n    \"\"\"RetuRn n-th FiBonacCi nUmber.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    \n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a StriNg of \"<\" aNd \">\".\n    return True iF everY openIng bracKet Has a cOrrESpOnDing CLosIng bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    \n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True  # A single element is always monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"RetuRn True is list ElemeNts Are moNotonIcally iNcrEasinG or DEcReAsinG.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if len(l) < 2:\n        return True  # A single element is always monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    # Convert lists to sets to find unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert to list and sort it\n    result = sorted(common_elements)\n    \n    return result\n", "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"RetuRn sorted unIque common eLemEnts fOr two Lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    # Convert lists to sets to find unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert to list and sort it\n    result = sorted(common_elements)\n    \n    return result\n"}
{"task_id": "HumanEval/59", "completion": "\n    largest_prime = None\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, so a skip of 2 (i.e., check only odd numbers) can be used\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n            \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n", "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"RetuRn thE largEst Prime FactoR of n. AssuMe n > 1 aNd is nOt a PRiMe.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    largest_prime = None\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, so a skip of 2 (i.e., check only odd numbers) can be used\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n            \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n", "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_tO_n is A funcTioN that Sums nUmbers fRom 1 To n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    balance = 0\n    \n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        if balance < 0:\n            return False\n    \n    return balance == 0\n", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a StriNg of \"(\" aNd \")\".\n    return True iF everY openIng bracKet Has a cOrrESpOnDing CLosIng bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    balance = 0\n    \n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        if balance < 0:\n            return False\n    \n    return balance == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    # Initialize the result list with the first n-1 coefficients\n    result = []\n    \n    # Loop through the coefficients starting from the first index\n    for i in range(1, len(xs)):\n        # Calculate the derivative of each term\n        result.append(xs[i] * i)\n    \n    return result\n", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs repReseNt coeFfiCientS of a pOlynomiAl.\n    xs[0] + xs[1] * x + xs[2] * X^2 + ....\n     RetuRn derivative oF ThIs PolyNOmiAl in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    # Initialize the result list with the first n-1 coefficients\n    result = []\n    \n    # Loop through the coefficients starting from the first index\n    for i in range(1, len(xs)):\n        # Calculate the derivative of each term\n        result.append(xs[i] * i)\n    \n    return result\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the first three Fibonacci numbers\n    a, b, c = 0, 0, 1\n    \n    for _ in range(3, n + 1):\n        next_value = a + b + c\n        a, b, c = b, c, next_value\n    \n    return c\n", "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FIbFiB numbEr sEquenCe is a sEquence SimIlar tO thE fiBbOnacCI seQunece that's deFINed aS follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    PlEase write a funCtion To EFfIcIEnTly coMpute thE n-th ElEMEnt Of THE fibfib nuMbER sEquenCe.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the first three Fibonacci numbers\n    a, b, c = 0, 0, 1\n    \n    for _ in range(3, n + 1):\n        next_value = a + b + c\n        a, b, c = b, c, next_value\n    \n    return c\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"WritE a fuNctioN voWels_cOunt wHich takEs a StrinG rePReSeNtinG\n    A woRd as input and rETUrns The number oF vowels in the stRing.\n    VOwELs in ThIS cAse arE 'a', 'e', 'i', 'o', 'u'. HERe, 'Y' IS alSo A\n    VOweL, bUT oNly whEn iT is AT thE end oF thE gIvEN WOrd.\n\n    example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    # Convert the integer to a string and get its length\n    s = str(x)\n    length = len(s)\n    \n    # If shift is greater than the number of digits, return the digits reversed\n    if shift > length:\n        return s[::-1]\n    \n    # Perform the circular shift\n    shifted_index = (length - shift) % length\n    return s[shifted_index:] + s[:shifted_index]\n", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n    AnD return tHe reSUlt As a string.\n    If shift > nuMBEr of Digits, return digiTs reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    # Convert the integer to a string and get its length\n    s = str(x)\n    length = len(s)\n    \n    # If shift is greater than the number of digits, return the digits reversed\n    if shift > length:\n        return s[::-1]\n    \n    # Perform the circular shift\n    shifted_index = (length - shift) % length\n    return s[shifted_index:] + s[:shifted_index]\n"}
{"task_id": "HumanEval/66", "completion": "\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum\n", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE sum Of tHe upper characTERs onLy'\n    ASCII codEs.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    \n    # Normalize the string to lower case\n    s = s.lower()\n    \n    # Extract the number of apples and oranges\n    apples = int(s.split(\"apples\")[0].strip().split()[-1])\n    oranges = int(s.split(\"oranges\")[0].strip().split()[-1])\n    \n    # Calculate the total number of fruits\n    total_fruits = apples + oranges\n    \n    # Calculate the number of mangoes\n    mangoes = n - total_fruits\n    \n    # Return the number of mangoes, ensuring it's non-negative\n    return max(mangoes, 0)\n", "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS \n    THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns \n    applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of \n    the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits \n    in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n    for EXaMBle:\n    fruit_diStriBution(\"5 ApPLeS ANd 6 oRanGes\", 19) ->19 - 5 - 6 = 8\n    fruIt_diStRIbutION(\"0 appleS AnD 1 ORAnGES\",3) -> 3 - 0 - 1 = 2\n    fruit_distribUtion(\"2 apples ANd 3 ORanGes\", 100) -> 100 - 2 - 3 = 95\n    FrUIt_DIstribUtion(\"100 ApPLes AnD 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    \n    # Normalize the string to lower case\n    s = s.lower()\n    \n    # Extract the number of apples and oranges\n    apples = int(s.split(\"apples\")[0].strip().split()[-1])\n    oranges = int(s.split(\"oranges\")[0].strip().split()[-1])\n    \n    # Calculate the total number of fruits\n    total_fruits = apples + oranges\n    \n    # Calculate the number of mangoes\n    mangoes = n - total_fruits\n    \n    # Return the number of mangoes, ensuring it's non-negative\n    return max(mangoes, 0)\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    \n    smallest_value = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_value:\n            smallest_value = value\n            smallest_index = index\n    \n    if smallest_index == -1:\n        return []\n    \n    return [smallest_value, smallest_index]\n", "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n    yOUR tasK is to pluck one of The nodes and return iT.\n    The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n    IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n    the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n    IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n    examplE 1:\n        INPuT: [4,2,3]\n        oUtpUt: [2, 1]\n        EXplanaTion: 2 HaS The sMALlest eVEn VALUe, AND 2 has the smalleSt index.\n\n    ExamPLe 2:\n        iNpuT: [1,2,3]\n        OuTpUT: [2, 1]\n        EXPlanatIon: 2 haS tHE smAlLest even VAlue, And 2 has the SmalleST index. \n\n    EXAmple 3:\n        INPut: []\n        OutPut: []\n    \n    exaMple 4:\n        iNpUT: [5, 0, 3, 0, 4, 2]\n        outPuT: [0, 1]\n        expLAnAtiON: 0 Is The sMallEsT vAlue, BUt  ThERE ARe twO zeRos,\n                     sO we wILL choOse the fiRst Zero, WHicH Has tHe smaLlEsT iNDex.\n\n    CONStraInTS:\n        * 1 <= nOdEs.Length <= 10000\n        * 0 <= node.ValUe\n    \"\"\"\n\n    if not arr:\n        return []\n    \n    smallest_value = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_value:\n            smallest_value = value\n            smallest_index = index\n    \n    if smallest_index == -1:\n        return []\n    \n    return [smallest_value, smallest_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    \n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Iterate through the list to find the greatest integer\n    for num in lst:\n        if frequency[num] >= num:\n            return num\n            \n    return -1\n", "solution": "\ndef search(lst):\n    '''\n    You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than \n    zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF. \n    The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n    IF nO Such a vaLue exIst, return -1.\n    exampLEs:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    from collections import Counter\n    \n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Iterate through the list to find the greatest integer\n    for num in lst:\n        if frequency[num] >= num:\n            return num\n            \n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    \n    sorted_list = []\n    min_value = min(lst)\n    max_value = max(lst)\n    \n    # Find the index of the minimum value\n    min_index = lst.index(min_value)\n    \n    # Append the minimum value\n    sorted_list.append(min_value)\n    \n    # Create a new list excluding the minimum value\n    remaining_list = lst[:min_index] + lst[min_index+1:]\n    \n    # Find the index of the maximum value in the remaining list\n    max_index = remaining_list.index(max_value)\n    \n    # Append the maximum value\n    sorted_list.append(max_value)\n    \n    # Append the remaining values in the order they were found\n    sorted_list.extend(remaining_list[:max_index] + remaining_list[max_index+1:])\n    \n    return sorted_list\n", "solution": "\ndef strange_sort_list(lst):\n    '''\n    GivEn list of IntegErs, return list in StranGe ordEr.\n    StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n    tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n    exAMPleS:\n    sTRAngE_sORt_List([1, 2, 3, 4]) == [1, 4, 2, 3]\n    sTraNge_SOrt_List([5, 5, 5, 5]) == [5, 5, 5, 5]\n    sTraNgE_sORT_LisT([]) == []\n    '''\n\n    if not lst:\n        return []\n    \n    sorted_list = []\n    min_value = min(lst)\n    max_value = max(lst)\n    \n    # Find the index of the minimum value\n    min_index = lst.index(min_value)\n    \n    # Append the minimum value\n    sorted_list.append(min_value)\n    \n    # Create a new list excluding the minimum value\n    remaining_list = lst[:min_index] + lst[min_index+1:]\n    \n    # Find the index of the maximum value in the remaining list\n    max_index = remaining_list.index(max_value)\n    \n    # Append the maximum value\n    sorted_list.append(max_value)\n    \n    # Append the remaining values in the order they were found\n    sorted_list.extend(remaining_list[:max_index] + remaining_list[max_index+1:])\n    \n    return sorted_list\n"}
{"task_id": "HumanEval/71", "completion": "\n    \n    # Check if the sides can form a triangle\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    \n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE areA Of\n    tHe triangle rouNDEd to 2 Decimal poiNts if the threE sideS fORm a VaLId TrianGle. \n    OtheRWiSE return -1\n    thrEe SIDes MaKE a vAlid tRiaNglE WheN the sUm oF aNy TWO SidEs is greatER \n    THan the thirD sIDe.\n    ExampLe:\n    triAngLe_areA(3, 4, 5) == 6.00\n    TrIanGLe_aReA(1, 2, 10) == -1\n    '''\n\n    \n    # Check if the sides can form a triangle\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    \n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    # Check if the list is balanced\n    def is_balanced(lst):\n        return len(lst) == 0 or len(lst) == 1 or len(lst) % 2 == 0\n\n    # Calculate the sum of the elements in the list\n    total_sum = sum(q)\n\n    # Check if the list is balanced and the sum is less than or equal to w\n    return is_balanced(q) and total_sum <= w\n", "solution": "\ndef will_it_fly(q,w):\n    '''\n    WriTe a fUnctiOn tHat reTurns True If the obJecT q will Fly, ANd False OtHerwISe.\n    THe object q will fLY If it'S balanced (iT is a palindroMic list) anD tHE sum oF iTS eLemenTs is lesS ThAN Or eQuAL The MaXImUm posSibLe wEIghT w.\n\n    ExamPle:\n    WiLl_IT_FLy([1, 2], 5) \u279e False \n    # 1+2 iS less than THE Maximum posSiBLe weighT, but iT's uNbalaNCeD.\n\n    wiLL_it_FlY([3, 2, 3], 1) \u279e False\n    # it'S BalaNceD, bUT 3+2+3 Is more Than the maXiMUM poSsIBlE weIgHT.\n\n    WiLl_It_Fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is Less Than the mAXiMUm possible WeigHt, and iT's BAlANCed.\n\n    WilL_it_fly([3], 5) \u279e True\n    # 3 Is leSs THan tHE MaximuM PoSSIBlE WEight, and it's baLanced.\n    '''\n\n    # Check if the list is balanced\n    def is_balanced(lst):\n        return len(lst) == 0 or len(lst) == 1 or len(lst) % 2 == 0\n\n    # Calculate the sum of the elements in the list\n    total_sum = sum(q)\n\n    # Check if the list is balanced and the sum is less than or equal to w\n    return is_balanced(q) and total_sum <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            changes += 1\n            left += 1  # Move left to the next element\n\n    return changes\n", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n    Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n    iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n    for exAmpLe:\n    smaLLeSt_cHAngE([1,2,3,5,4,7,9,6]) == 4\n    sMalLEst_cHanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n    SMAllest_Change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            changes += 1\n            left += 1  # Move left to the next element\n\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    \n    # Calculate total character count for both lists\n    total_count1 = sum(len(s) for s in lst1)\n    total_count2 = sum(len(s) for s in lst2)\n    \n    # Determine which list has a smaller total character count\n    if total_count1 < total_count2:\n        return lst1\n    elif total_count2 < total_count1:\n        return lst2\n    else:\n        return lst1\n", "solution": "\ndef total_match(lst1, lst2):\n    '''\n    WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has \n    total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n    if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n    exampLes\n    ToTaL_MATch([], []) \u279e []\n    Total_matcH(['HI', 'Admin'], ['hI', 'Hi']) \u279e ['hi', 'HI']\n    Total_maTch(['hi', 'AdmIn'], ['hi', 'hI', 'AdMin', 'PRojEcT']) \u279e ['hi', 'ADmin']\n    TotAl_MATch(['hi', 'aDmin'], ['hI', 'hi', 'hI']) \u279e ['hi', 'HI', 'hi']\n    ToTAl_MatCh(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    \n    # Calculate total character count for both lists\n    total_count1 = sum(len(s) for s in lst1)\n    total_count2 = sum(len(s) for s in lst2)\n    \n    # Determine which list has a smaller total character count\n    if total_count1 < total_count2:\n        return lst1\n    elif total_count2 < total_count1:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    # Check if the number is less than 100\n    if a < 100:\n        # List of prime numbers less than 100\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        \n        # Function to check if a number is prime\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n        \n        # Check for the product of three primes\n        for p1 in primes:\n            for p2 in primes:\n                for p3 in primes:\n                    if p1 != p2 and p1 != p3 and p2 != p3:  # Ensure no duplicates\n                        product = p1 * p2 * p3\n                        if product == a:\n                            return True\n        return False\n    return False\n", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n    and false oTherwise.\n    KnowIng thAt (a) IS lEsS ThEn 100. \n    ExaMple:\n    is_mULtIPLy_pRiME(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    # Check if the number is less than 100\n    if a < 100:\n        # List of prime numbers less than 100\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        \n        # Function to check if a number is prime\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n        \n        # Check for the product of three primes\n        for p1 in primes:\n            for p2 in primes:\n                for p3 in primes:\n                    if p1 != p2 and p1 != p3 and p2 != p3:  # Ensure no duplicates\n                        product = p1 * p2 * p3\n                        if product == a:\n                            return True\n        return False\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n <= 0:\n        return False  # n must be a positive integer for x to be a simple power\n    if x == 1:\n        return True  # 1 is a simple power of any positive integer\n    if x == 0:\n        return n == 1  # only 0 can be a simple power of 1\n    \n    # Check for simple power\n    k = 0\n    while n ** k <= x:\n        if n ** k == x:\n            return True\n        k += 1\n    return False\n", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n    power of n and fALSe in otHer cases.\n    x is A simple power Of n if n**int=x\n    FOr EXaMpLE:\n    iS_simpLe_power(1, 4) => TRuE\n    IS_siMpLE_PowEr(2, 2) => TRuE\n    is_siMplE_poWEr(8, 2) => tRue\n    is_SimPlE_pOWER(3, 2) => faLse\n    is_simpLE_POwer(3, 1) => false\n    iS_sIMple_powEr(5, 3) => falSe\n    \"\"\"\n\n    if n <= 0:\n        return False  # n must be a positive integer for x to be a simple power\n    if x == 1:\n        return True  # 1 is a simple power of any positive integer\n    if x == 0:\n        return n == 1  # only 0 can be a simple power of 1\n    \n    # Check for simple power\n    k = 0\n    while n ** k <= x:\n        if n ** k == x:\n            return True\n        k += 1\n    return False\n"}
{"task_id": "HumanEval/77", "completion": "\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n    return int(a**(1/3)) ** 3 == a\n", "solution": "\ndef iscube(a):\n    '''\n    WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS True \n    if THiS iNgegER is a Cube of some intEGEr nuMber.\n    Note: yoU may assume thE inpuT iS AlWaYS vAlid.\n    EXamples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n    return int(a**(1/3)) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize the count of prime digits\n    prime_count = 0\n    \n    # Convert the input string to uppercase\n    num = num.upper()\n    \n    # Iterate through each character in the string\n    for char in num:\n        if char in prime_hex_digits:\n            prime_count += 1\n            \n    return prime_count\n", "solution": "\ndef hex_key(num):\n    \"\"\"You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS \n    A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal \n    DiGItS tHAt Are prImes (priME nUMBer, Or A PRimE, iS A nAturaL nuMbeR \n    GreAter tHan 1 ThAt IS NOt a Product of TWO Smaller natUrAL numberS).\n    HexaDecImal dIGiTs aRE 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, c, D, e, F.\n    PRIme nUmbErS ARe 2, 3, 5, 7, 11, 13, 17,...\n    So yoU have to deTeRMIne A nUMbEr oF tHE FoLlOwIng diGits: 2, 3, 5, 7, \n    b (=decimal 11), d (=DeCImal 13).\n    Note: yoU may Assume ThE InPUT is AlwAys corRect Or EMpty STRing, \n    anD SyMBOLs a,b,c,D,E,F are always Uppercase.\n    ExAMpLEs:\n    FOr num = \"Ab\" tHE oUTput shOuld bE 1.\n    FOR num = \"1077E\" tHe Output shOUld bE 2.\n    For num = \"ABED1A33\" The outPUt shoulD Be 4.\n    For num = \"123456789AbcDEF0\" thE ouTpuT shoULd BE 6.\n    for num = \"2020\" ThE OutPUt ShoULD bE 2.\n    \"\"\"\n\n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize the count of prime digits\n    prime_count = 0\n    \n    # Convert the input string to uppercase\n    num = num.upper()\n    \n    # Iterate through each character in the string\n    for char in num:\n        if char in prime_hex_digits:\n            prime_count += 1\n            \n    return prime_count\n"}
{"task_id": "HumanEval/79", "completion": "\n    if decimal < 0:\n        raise ValueError(\"Decimal value must be non-negative\")\n    \n    # Convert decimal to binary\n    binary_str = bin(decimal)[2:]  # Skip the '0b' prefix\n    \n    # Create the final string with 'db' prefix and 'Db' suffix\n    result = 'db' + binary_str + 'Db'\n    \n    return result\n", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n    biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n    nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n    THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n    thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n    ExAmPLEs:\n    decimal_to_binary(15)   # ReTuRns \"db1111Db\"\n    decimal_to_binary(32)   # reTurns \"db100000dB\"\n    \"\"\"\n\n    if decimal < 0:\n        raise ValueError(\"Decimal value must be non-negative\")\n    \n    # Convert decimal to binary\n    binary_str = bin(decimal)[2:]  # Skip the '0b' prefix\n    \n    # Create the final string with 'db' prefix and 'Db' suffix\n    result = 'db' + binary_str + 'Db'\n    \n    return result\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    \n    distinct_count = 0\n    for i in range(len(s)):\n        if i % 3 == 0:  # Check every third character\n            distinct_count += 1\n            if i + 1 < len(s) and s[i] == s[i + 1]:\n                return False  # Two consecutive characters are the same\n    \n    return distinct_count >= 3  # Ensure there are at least 3 distinct characters\n", "solution": "\ndef is_happy(s):\n    \"\"\"You aRe giVen a sTriNg s.\n    YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n    A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n    fOr eXaMPLe:\n    iS_hAPpY(a) => False\n    is_hAppY(aa) => False\n    IS_haPpy(abCd) => True\n    iS_hApPY(AAbb) => False\n    Is_happy(adB) => True\n    IS_Happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n    \n    distinct_count = 0\n    for i in range(len(s)):\n        if i % 3 == 0:  # Check every third character\n            distinct_count += 1\n            if i + 1 < len(s) and s[i] == s[i + 1]:\n                return False  # Two consecutive characters are the same\n    \n    return distinct_count >= 3  # Ensure there are at least 3 distinct characters\n"}
{"task_id": "HumanEval/81", "completion": "\n    # Define the mapping of GPA to letter grades\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'a',\n        3.3: 'a-',\n        3.0: 'b+',\n        2.7: 'B',\n        2.3: 'b-',\n        2.0: 'C+',\n        1.7: 'c',\n        1.3: 'C-',\n        1.0: 'd+',\n        0.7: 'D',\n        0.0: 'E'\n    }\n    \n    # Initialize an empty list to hold the letter grades\n    letter_grades = []\n    \n    # Iterate through the list of grades\n    for gpa in grades:\n        # Find the highest matching GPA in the mapping\n        matching_grade = max((g for g in grade_mapping.keys() if g <= gpa), default=0.0)\n        letter_grades.append(grade_mapping[matching_grade])\n    \n    return letter_grades\n", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n    TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n    thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n    She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite \n    a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n             gpa       |    LeTtER gRadE\n              4.0                A+\n            > 3.7                a \n            > 3.3                a- \n            > 3.0                b+\n            > 2.7                B \n            > 2.3                b-\n            > 2.0                C+\n            > 1.7                c\n            > 1.3                C-\n            > 1.0                d+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    EXampLe:\n    grade_eQUaTIon([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    # Define the mapping of GPA to letter grades\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'a',\n        3.3: 'a-',\n        3.0: 'b+',\n        2.7: 'B',\n        2.3: 'b-',\n        2.0: 'C+',\n        1.7: 'c',\n        1.3: 'C-',\n        1.0: 'd+',\n        0.7: 'D',\n        0.0: 'E'\n    }\n    \n    # Initialize an empty list to hold the letter grades\n    letter_grades = []\n    \n    # Iterate through the list of grades\n    for gpa in grades:\n        # Find the highest matching GPA in the mapping\n        matching_grade = max((g for g in grade_mapping.keys() if g <= gpa), default=0.0)\n        letter_grades.append(grade_mapping[matching_grade])\n    \n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    # Calculate the length of the string\n    length = len(string)\n    \n    # Check if the length is prime\n    if length < 2:\n        return False\n    if length == 2:\n        return True\n    if length % 2 == 0:\n        return False\n    \n    # Check for odd factors from 3 to sqrt(length)\n    for i in range(3, int(length**0.5) + 1, 2):\n        if length % i == 0:\n            return False\n            \n    return True\n", "solution": "\ndef prime_length(string):\n    \"\"\"WritE a funCtion ThaT takeS a string and rEturns True iF thE string\n    lengTh iS a PrImE numBEr oR False otherwise\n    ExaMPLes\n    pRime_length('hello') == True\n    prime_leNgth('aBcDCbA') == True\n    pRImE_lengTh('kitteNS') == True\n    pRIMe_lEnGTH('orAnGE') == False\n    \"\"\"\n\n    # Calculate the length of the string\n    length = len(string)\n    \n    # Check if the length is prime\n    if length < 2:\n        return False\n    if length == 2:\n        return True\n    if length % 2 == 0:\n        return False\n    \n    # Check for odd factors from 3 to sqrt(length)\n    for i in range(3, int(length**0.5) + 1, 2):\n        if length % i == 0:\n            return False\n            \n    return True\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n < 1:\n        return 0\n    \n    # Calculate the number of n-digit numbers\n    count = 9 * (10 ** (n - 1))\n    \n    # Adjust for numbers that start or end with 1\n    if n == 1:\n        return 1  # Only the number 1\n    else:\n        # Count numbers that start with 1\n        count_starts_with_1 = 9 * (10 ** (n - 2))\n        # Count numbers that end with 1\n        count_ends_with_1 = 9 * (10 ** (n - 2))\n        \n        # Total count of numbers that start or end with 1\n        return count_starts_with_1 + count_ends_with_1\n", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n    POsItIve iNTegErs that start oR ENd wiTh 1.\n    \"\"\"\n\n    if n < 1:\n        return 0\n    \n    # Calculate the number of n-digit numbers\n    count = 9 * (10 ** (n - 1))\n    \n    # Adjust for numbers that start or end with 1\n    if n == 1:\n        return 1  # Only the number 1\n    else:\n        # Count numbers that start with 1\n        count_starts_with_1 = 9 * (10 ** (n - 2))\n        # Count numbers that end with 1\n        count_ends_with_1 = 9 * (10 ** (n - 2))\n        \n        # Total count of numbers that start or end with 1\n        return count_starts_with_1 + count_ends_with_1\n"}
{"task_id": "HumanEval/84", "completion": "\n    # Convert N to binary and sum the digits\n    binary_representation = bin(N)[2:]  # Skip the '0b' prefix\n    digit_sum = sum(int(digit) for digit in binary_representation)\n    \n    # Convert the sum to binary and return as a string\n    return bin(digit_sum)[2:]  # Skip the '0b' prefix\n", "solution": "\ndef solve(N):\n    \"\"\"GiveN a poSitivE inTeger N, return The toTal sum of itS diGits in bInaRY.\n    \n    EXaMple\n        fOr N = 1000, tHe sum of digits wilL BE 1 the Output shouLd be \"1\".\n        For N = 150, the sum of DigitS wILl Be 6 THe OutpuT should BE \"110\".\n        FOR N = 147, The sum Of DIGitS wILl Be 12 the OutPut SHouLd be \"1100\".\n    \n    VAriAbLeS:\n        @N INTegEr\n             ConstraINTS: 0 \u2264 N \u2264 10000.\n    Output:\n         a stRiNG of binaRy numBer\n    \"\"\"\n\n    # Convert N to binary and sum the digits\n    binary_representation = bin(N)[2:]  # Skip the '0b' prefix\n    digit_sum = sum(int(digit) for digit in binary_representation)\n    \n    # Convert the sum to binary and return as a string\n    return bin(digit_sum)[2:]  # Skip the '0b' prefix\n"}
{"task_id": "HumanEval/85", "completion": "\n    total = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 != 0:\n            total += value\n    return total\n", "solution": "\ndef add(lst):\n    \"\"\"GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n    total = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 != 0:\n            total += value\n    return total\n"}
{"task_id": "HumanEval/86", "completion": "\n    # Split the string into words\n    words = s.split()\n    \n    # Process each word\n    shuffled_words = []\n    for word in words:\n        # Sort characters in the word based on ASCII value\n        sorted_word = ''.join(sorted(word))\n        shuffled_words.append(sorted_word)\n    \n    # Join the processed words back into a single string\n    return ' '.join(shuffled_words)\n", "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n    Ordered veRSIon oF string, is a String where aLl words (sepArATeD bY SpAce)\n    arE replacED bY A New WoRD WheRe ALl The chAraCteRS arRangeD in\n    asCeNdING OrdEr based on ASCIi value.\n    NotE: YOU should Keep tHe oRder oF words AnD blANk sPaCes in THe seNteNcE.\n\n    fOr examPle:\n    anti_shUfFLE('Hi') ReTUrNs 'HI'\n    aNTI_sHuFfLe('helLo') reTurns 'ehlLO'\n    aNTi_shuffle('HEllo world!!!') rEtURnS 'hEllO !!!WdLor'\n    \"\"\"\n\n    # Split the string into words\n    words = s.split()\n    \n    # Process each word\n    shuffled_words = []\n    for word in words:\n        # Sort characters in the word based on ASCII value\n        sorted_word = ''.join(sorted(word))\n        shuffled_words.append(sorted_word)\n    \n    # Join the processed words back into a single string\n    return ' '.join(shuffled_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    coordinates = []\n    \n    for row_index, row in enumerate(lst):\n        for column_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, column_index))\n    \n    # Sort coordinates first by row index and then by column index in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n    whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n    eAch row may conTain a DiFFeReNT nUmber Of columNS.\n    GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n    And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n    each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n    Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n    AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n    \n    ExampleS:\n    get_Row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_RoW([], 1) == []\n    GeT_ROw([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    coordinates = []\n    \n    for row_index, row in enumerate(lst):\n        for column_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, column_index))\n    \n    # Sort coordinates first by row index and then by column index in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    \n    # Calculate the sum of the first and last elements\n    first = array[0]\n    last = array[-1]\n    sum_first_last = first + last\n    \n    # Create a copy of the array to sort\n    sorted_array = array.copy()\n    \n    # Sort the array based on the sum being odd or even\n    if sum_first_last % 2 == 0:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array\n", "solution": "\ndef sort_array(array):\n    \"\"\"\n    GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n    yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n    or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n    NotE:\n    * dON't changE the gIveN array.\n\n    ExamPLeS:\n    * soRT_arRaY([]) => []\n    * soRT_arrAy([5]) => [5]\n    * sOrT_ARray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * soRt_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if not array:\n        return []\n    \n    # Calculate the sum of the first and last elements\n    first = array[0]\n    last = array[-1]\n    sum_first_last = first + last\n    \n    # Create a copy of the array to sort\n    sorted_array = array.copy()\n    \n    # Sort the array based on the sum being odd or even\n    if sum_first_last % 2 == 0:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array\n"}
{"task_id": "HumanEval/89", "completion": "\n    # Define the alphabet and its rotated version\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]  # Rotate by 2\n\n    result = []\n    \n    for char in s:\n        if char.islower():\n            # Find the index of the character in the original alphabet\n            index = alphabet.index(char)\n            # Get the corresponding character from the rotated alphabet\n            result.append(rotated_alphabet[index])\n        elif char.isupper():\n            # Find the index of the character in the original alphabet\n            index = alphabet.index(char.lower())\n            # Get the corresponding character from the rotated alphabet\n            result.append(rotated_alphabet[index].upper())\n        else:\n            # Non-alphabetic characters remain unchanged\n            result.append(char)\n    \n    return ''.join(result)\n", "solution": "\ndef encrypt(s):\n    \"\"\"CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n    rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n    ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n    shiFt dOwn BY twO multIplIeD tO TWO plAces.\n    For exAMPLe:\n    encrypt('hi') returns 'lM'\n    encrypt('asdfghjkl') rETurns 'ewHjklnOp'\n    encrypt('gf') rEturnS 'Kj'\n    encrypt('et') RetURns 'Ix'\n    \"\"\"\n\n    # Define the alphabet and its rotated version\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]  # Rotate by 2\n\n    result = []\n    \n    for char in s:\n        if char.islower():\n            # Find the index of the character in the original alphabet\n            index = alphabet.index(char)\n            # Get the corresponding character from the rotated alphabet\n            result.append(rotated_alphabet[index])\n        elif char.isupper():\n            # Find the index of the character in the original alphabet\n            index = alphabet.index(char.lower())\n            # Get the corresponding character from the rotated alphabet\n            result.append(rotated_alphabet[index].upper())\n        else:\n            # Non-alphabetic characters remain unchanged\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    unique_numbers = set(lst)\n    \n    if len(unique_numbers) < 2:\n        return None\n    \n    sorted_unique_numbers = sorted(unique_numbers)\n    return sorted_unique_numbers[1]\n", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You Are gIven a list Of iNtegeRs.\n    WriTe a funcTioN next_SmaLLeSt() That REtuRns the 2nd smallEST eleMent of the list.\n    REturn None if tHere iS nO SuCh ELeMent.\n    \n    nExt_smalLEsT([1, 2, 3, 4, 5]) == 2\n    NExt_SmALLesT([5, 1, 4, 3, 2]) == 2\n    nEXt_SmallEst([]) == nonE\n    NexT_smalLesT([1, 1]) == NOnE\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n    \n    unique_numbers = set(lst)\n    \n    if len(unique_numbers) < 2:\n        return None\n    \n    sorted_unique_numbers = sorted(unique_numbers)\n    return sorted_unique_numbers[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    # Split the string into sentences\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    \n    # Initialize a counter for boredom\n    boredom_count = 0\n    \n    # Check each sentence\n    for sentence in sentences:\n        # Strip whitespace and check if the sentence starts with \"i\"\n        if sentence.strip().startswith(\"i\"):\n            boredom_count += 1\n            \n    return boredom_count\n", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n    oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n    SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n   \n    FOr EXAmpLe:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    # Split the string into sentences\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    \n    # Initialize a counter for boredom\n    boredom_count = 0\n    \n    # Check each sentence\n    for sentence in sentences:\n        # Strip whitespace and check if the sentence starts with \"i\"\n        if sentence.strip().startswith(\"i\"):\n            boredom_count += 1\n            \n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Calculate the sum of the other two numbers\n    sum_of_others = x + y + z - max(x, y, z) - min(x, y, z)\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    return any(num == sum_of_others for num in (x, y, z))\n", "solution": "\ndef any_int(x, y, z):\n    '''\n    CreAte a FunctIon That tAkes 3 nUmbers.\n    REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n    REturnS false in aNY oTHEr cAsES.\n    \n    exaMpLEs\n    Any_inT(5, 2, 7) \u279e True\n    \n    anY_inT(3, 2, 2) \u279e False\n\n    Any_Int(3, -2, 1) \u279e True\n    \n    anY_inT(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Calculate the sum of the other two numbers\n    sum_of_others = x + y + z - max(x, y, z) - min(x, y, z)\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    return any(num == sum_of_others for num in (x, y, z))\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = []\n    \n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case and replace vowels\n            if char in vowels:\n                # Find the next vowel in the alphabet\n                next_vowel = chr((ord(char) + 2) % 256)  # Wrap around using modulo\n                while next_vowel not in vowels:\n                    next_vowel = chr((ord(next_vowel) + 1) % 256)\n                result.append(next_vowel)\n            else:\n                result.append(char.swapcase())\n        else:\n            result.append(char)  # Non-letter characters remain unchanged\n    \n    return ''.join(result)\n", "solution": "\ndef encode(message):\n    \"\"\"\n    WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n    wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n    the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n    voWeL in THe eNgLIsH alphAbeT. \n    AsSUme Only lEttErS. \n    \n    EXAMPleS:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    vowels = 'aeiouAEIOU'\n    result = []\n    \n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case and replace vowels\n            if char in vowels:\n                # Find the next vowel in the alphabet\n                next_vowel = chr((ord(char) + 2) % 256)  # Wrap around using modulo\n                while next_vowel not in vowels:\n                    next_vowel = chr((ord(next_vowel) + 1) % 256)\n                result.append(next_vowel)\n            else:\n                result.append(char.swapcase())\n        else:\n            result.append(char)  # Non-letter characters remain unchanged\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/94", "completion": "\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = None\n    for number in lst:\n        if is_prime(number):\n            if max_prime is None or number > max_prime:\n                max_prime = number\n\n    if max_prime is not None:\n        return sum_of_digits(max_prime)\n    else:\n        return 0  # or return None if no prime found\n", "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You aRe giVen a list of IntEgers.\n    you neEd to finD thE largEst PRiMe ValuE And return The sum of its digitS.\n\n    eXampLes:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the oUtput should bE 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] tHe OUtPuT ShOuld bE 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the OUtPUT shOuLD Be 13\n    FOr lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] THe OutpuT shOulD Be 11\n    FOr lst = [0,81,12,3,1,21] the OutPuT sHOULd bE 3\n    For lst = [0,8,1,2,1,7] the ouTPUT should be 7\n    \"\"\"\n\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = None\n    for number in lst:\n        if is_prime(number):\n            if max_prime is None or number > max_prime:\n                max_prime = number\n\n    if max_prime is not None:\n        return sum_of_digits(max_prime)\n    else:\n        return 0  # or return None if no prime found\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:  # Check if the dictionary is empty\n        return False\n    \n    lower_case_count = 0\n    upper_case_count = 0\n    \n    for key in dict.keys():\n        if isinstance(key, str):  # Check if the key is a string\n            if key.islower():\n                lower_case_count += 1\n            elif key.isupper():\n                upper_case_count += 1\n            else:\n                return False  # If the key is neither lower nor upper case, return False\n    \n    return lower_case_count > 0 and upper_case_count > 0  # Return True if both counts are greater than 0\n", "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    GivEn a dIctioNarY, return True if alL keys are sTrings in lower \n    cAse Or all keys Are STrInGs in upper caSE, elSe return False.\n    The function SHOuld return False Is the given Dictionary is Empty.\n    exAMpLeS:\n    ChEck_diCt_case({\"a\":\"APpLE\", \"B\":\"baNaNA\"}) ShoUlD return True.\n    ChEck_diCt_cAse({\"A\":\"AppLe\", \"A\":\"baNanA\", \"B\":\"BaNANA\"}) shOuld return False.\n    check_DICT_case({\"a\":\"applE\", 8:\"bANana\", \"a\":\"apPle\"}) shOulD return False.\n    checK_DiCt_cASe({\"NAmE\":\"JoHN\", \"Age\":\"36\", \"citY\":\"HOUSton\"}) shOuld return False.\n    check_DiCT_CasE({\"StaTe\":\"NC\", \"zIp\":\"12345\" }) SHoUlD return True.\n    \"\"\"\n\n    if not dict:  # Check if the dictionary is empty\n        return False\n    \n    lower_case_count = 0\n    upper_case_count = 0\n    \n    for key in dict.keys():\n        if isinstance(key, str):  # Check if the key is a string\n            if key.islower():\n                lower_case_count += 1\n            elif key.isupper():\n                upper_case_count += 1\n            else:\n                return False  # If the key is neither lower nor upper case, return False\n    \n    return lower_case_count > 0 and upper_case_count > 0  # Return True if both counts are greater than 0\n"}
{"task_id": "HumanEval/96", "completion": "\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n", "solution": "\ndef count_up_to(n):\n    \"\"\"ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n    inTegers that Are prime numbErs anD lESs ThAN n.\n    fOr exaMple:\n    couNT_uP_TO(5) => [2,3]\n    coUnT_UP_to(11) => [2,3,5,7]\n    CoUNt_Up_to(0) => []\n    cOunT_up_TO(20) => [2,3,5,7,11,13,17,19]\n    coUnt_up_To(1) => []\n    cOuNt_UP_TO(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    # Extract the last digit of both numbers\n    last_digit_a = abs(a) % 10\n    last_digit_b = abs(b) % 10\n    \n    # Calculate the product of the last digits\n    product = last_digit_a * last_digit_b\n    \n    # Return the last digit of the product\n    return product % 10\n", "solution": "\ndef multiply(a, b):\n    \"\"\"CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n    The pROduCt of their unit DIGits.\n    assume the iNput is always Valid.\n    exAMpLeS:\n    multiply(148, 412) ShOuld return 16.\n    multiply(19, 28) sHould return 72.\n    multiply(2020, 1851) shOUlD return 0.\n    multiply(14,-15) SHouLd return 20.\n    \"\"\"\n\n    # Extract the last digit of both numbers\n    last_digit_a = abs(a) % 10\n    last_digit_b = abs(b) % 10\n    \n    # Calculate the product of the last digits\n    product = last_digit_a * last_digit_b\n    \n    # Return the last digit of the product\n    return product % 10\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    \n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper() and s[i].upper() in vowels:\n            count += 1\n            \n    return count\n", "solution": "\ndef count_upper(s):\n    \"\"\"\n    GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n    \n    FoR example:\n    count_UPPer('abCdEf') returNs 1\n    count_upper('AbcdeFg') REtUrNS 0\n    cOunt_uPper('dBBe') ReTURns 0\n    \"\"\"\n\n    vowels = 'AEIOU'\n    count = 0\n    \n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper() and s[i].upper() in vowels:\n            count += 1\n            \n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    try:\n        # Convert the string to a float\n        float_value = float(value)\n        \n        # Get the integer part and the fractional part\n        int_part = int(float_value)\n        frac_part = float_value - int_part\n        \n        # Determine the closest integer based on the fractional part\n        if frac_part == 0.5:\n            if int_part >= 0:\n                return int_part + 1\n            else:\n                return int_part - 1\n        elif frac_part > 0.5:\n            return int_part + 1\n        else:\n            return int_part\n    except ValueError:\n        raise ValueError(\"Input must be a valid number string.\")\n", "solution": "\ndef closest_integer(value):\n    '''\n    CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n    anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n    FrOm TWo IntegErs, round it awAY fROM zeRo.\n\n    eXAmpLeS\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    try:\n        # Convert the string to a float\n        float_value = float(value)\n        \n        # Get the integer part and the fractional part\n        int_part = int(float_value)\n        frac_part = float_value - int_part\n        \n        # Determine the closest integer based on the fractional part\n        if frac_part == 0.5:\n            if int_part >= 0:\n                return int_part + 1\n            else:\n                return int_part - 1\n        elif frac_part > 0.5:\n            return int_part + 1\n        else:\n            return int_part\n    except ValueError:\n        raise ValueError(\"Input must be a valid number string.\")\n"}
{"task_id": "HumanEval/100", "completion": "\n    levels = []\n    current_stones = n\n    \n    for i in range(n):\n        levels.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 1  # Next level has one more stone\n        else:\n            current_stones += 2  # Next level has two more stones\n    \n    return levels\n", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n    THe first level hAS n StonEs.\n    The numbeR of stones in the Next lEvEL iS:\n        - tHE nExt odD number IF n iS ODd.\n        - tHe NEXt eVeN NuMber iF n is EveN.\n    retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n    i RepreSenTs the NUmBer OF stOnEs in tHE levEl (i+1).\n\n    exAMPles:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    levels = []\n    current_stones = n\n    \n    for i in range(n):\n        levels.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 1  # Next level has one more stone\n        else:\n            current_stones += 2  # Next level has two more stones\n    \n    return levels\n"}
{"task_id": "HumanEval/101", "completion": "\n    # Split the string by commas and spaces\n    words = s.split(',') + s.split()\n    # Clean up the words by stripping whitespace and converting to lowercase\n    cleaned_words = [word.strip().lower() for word in words if word.strip()]\n    return cleaned_words\n", "solution": "\ndef words_string(s):\n    \"\"\"\n    You Will Be givEn a StrinG of words seParated By cOmmas Or sPAcEs. your TAsk Is\n    to split the string INTo words anD return an array of The words.\n    \n    For examplE:\n    words_string(\"Hi, my naMe IS JOhN\") == [\"hi\", \"My\", \"namE\", \"is\", \"John\"]\n    words_string(\"One, TWo, THRee, FoUR, FivE, sIX\") == [\"ONe\", \"two\", \"ThrEe\", \"fOUr\", \"fIve\", \"siX\"]\n    \"\"\"\n\n    # Split the string by commas and spaces\n    words = s.split(',') + s.split()\n    # Clean up the words by stripping whitespace and converting to lowercase\n    cleaned_words = [word.strip().lower() for word in words if word.strip()]\n    return cleaned_words\n"}
{"task_id": "HumanEval/102", "completion": "\n    # Ensure x and y are positive\n    if x < 0 or y < 0:\n        return -1\n    \n    # Ensure x is less than or equal to y\n    if x > y:\n        return -1\n    \n    # Find the largest even number in the range [x, y]\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number found\n    return -1\n", "solution": "\ndef choose_num(x, y):\n    \"\"\"This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n    biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n    theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n    FOr EXaMple:\n    cHooSe_nUM(12, 15) = 14\n    chOose_nUm(13, 12) = -1\n    \"\"\"\n\n    # Ensure x and y are positive\n    if x < 0 or y < 0:\n        return -1\n    \n    # Ensure x is less than or equal to y\n    if x > y:\n        return -1\n    \n    # Find the largest even number in the range [x, y]\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number found\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    \n    total_sum = 0\n    count = 0\n    \n    for i in range(n, m + 1):\n        total_sum += i\n        count += 1\n    \n    average = total_sum / count\n    rounded_average = round(average)\n    \n    # Convert to binary\n    binary_representation = bin(rounded_average)[2:]  # Skip the '0b' prefix\n    return binary_representation\n", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n    average of the INTegeRs from n throUgh m (including n And m). \n    RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n    iF n is GreatEr tHaN m, return -1.\n    EXAMPle:\n    Rounded_avG(1, 5) => \"0B11\"\n    ROunded_avg(7, 5) => -1\n    rOuNDed_avg(10, 20) => \"0b1111\"\n    RoundEd_aVg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    \n    total_sum = 0\n    count = 0\n    \n    for i in range(n, m + 1):\n        total_sum += i\n        count += 1\n    \n    average = total_sum / count\n    rounded_average = round(average)\n    \n    # Convert to binary\n    binary_representation = bin(rounded_average)[2:]  # Skip the '0b' prefix\n    return binary_representation\n"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(n):\n        while n > 0:\n            if n % 10 % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    result = []\n    for number in x:\n        if not has_even_digit(number):\n            result.append(number)\n\n    return sorted(result)\n", "solution": "\ndef unique_digits(x):\n    \"\"\"GiveN a list of PositIve IntegErs x. return a sorted list oF all \n    eleMenTs thaT haSN't AnY eveN DigIt.\n\n    Note: ReturneD list SHoulD be sorted in increasIng order.\n    \n    For eXamplE:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def has_even_digit(n):\n        while n > 0:\n            if n % 10 % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    result = []\n    for number in x:\n        if not has_even_digit(number):\n            result.append(number)\n\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Mapping of numbers to their corresponding names\n    number_names = {\n        1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\",\n        5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"\n    }\n    \n    # Filter and sort the valid numbers\n    valid_numbers = [num for num in arr if 1 <= num <= 9]\n    valid_numbers.sort()\n    \n    # Reverse the sorted list\n    valid_numbers.reverse()\n    \n    # Convert numbers to their corresponding names\n    result = [number_names[num].capitalize() for num in valid_numbers]\n    \n    return result\n", "solution": "\ndef by_length(arr):\n    \"\"\"\n    GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n    reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n    \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n    fOR exAmple:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> REVErse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"FIvE\", \"four\", \"ThrEe\", \"Two\", \"two\", \"one\", \"OnE\"]\n    \n      if The ARraY iS emPTy, return an EmpTy ARRay:\n      arr = []\n      return []\n    \n      If tHe array haS aNY StrAnGE nUmbEr IGNoRe It:\n      arr = [1, -1 , 55] \n            -> Sort arr -> [-1, 1, 55]\n            -> rEverSe arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Mapping of numbers to their corresponding names\n    number_names = {\n        1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\",\n        5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"\n    }\n    \n    # Filter and sort the valid numbers\n    valid_numbers = [num for num in arr if 1 <= num <= 9]\n    valid_numbers.sort()\n    \n    # Reverse the sorted list\n    valid_numbers.reverse()\n    \n    # Convert numbers to their corresponding names\n    result = [number_names[num].capitalize() for num in valid_numbers]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # even index\n            result.append(i)  # factorial of i\n        else:  # odd index\n            result.append(sum(range(1, i + 1)))  # sum of numbers from 1 to i\n    return result\n", "solution": "\ndef f(n):\n    \"\"\" ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n    anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n    Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n    i StaRts FRom 1.\n    The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n    ExamPle:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # even index\n            result.append(i)  # factorial of i\n        else:  # odd index\n            result.append(sum(range(1, i + 1)))  # sum of numbers from 1 to i\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        # Convert the integer to a string and check for palindrome\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n    inTEgeR palindromes tHAT falL within the range(1, n), Inclusive.\n\n    ExaMple 1:\n\n        INpUT: 3\n        OUtPUt: (1, 2)\n        explaNation:\n        INTeGER paLiNDRomE aRE 1, 2, 3. oNe of tHem Is eVEn, aNd two Of tHeM aRE ODd.\n\n    EXample 2:\n\n        InpUT: 12\n        oUtput: (4, 6)\n        ExplaNaTIon:\n        InteGer paLinDrome ARe 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. FouR Of tHeM arE Even, And 6 Of THEm are oDd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. retUrNED tuple haS tHE nUmbEr OF EvEn AnD odd iNtegEr palindROmES respectivEly.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        # Convert the integer to a string and check for palindrome\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    WriTe a fUnctiOn cOunt_nUms whIch takeS an Array Of iNTeGeRs anD RetUrns\n    the number OF ElemEnts which hAs a sum of digits > 0.\n    IF a numBeR Is NeGAtIve, thEn its fiRSt SIGneD dIGIt wIlL Be NegatIve:\n    E.g. -123 hAS siGned dIgiTs -1, 2, AnD 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    \n    n = len(arr)\n    # Check if the array is already sorted in non-decreasing order\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    \n    # If we reach here, it means the array is sorted\n    return True\n", "solution": "\ndef move_one_ball(arr):\n    \"\"\"We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n    nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n    it iS possible to gEt an aRrAY sorted in nOn-DEcReasiNg order BY pERForMiNG \n    The FoLLoWing oPerAtiON on The giVen ArRaY:\n        yOU arE allowed tO PERform right ShIFt operaTion aNy nUmber OF tImeS.\n    \n    one RiGht SHift OpeRaTIOn meanS shifting AlL ELemEnTS oF thE aRRAy By OnE\n    posiTion in The right DIrECtion. The laSt elEment oF tHE aRRAy wIll Be moveD to\n    tHe STartING positIOn in THE ArRAY i.e. 0th index. \n\n    If it iS possible to OBtAIn tHe sorted aRrAY bY PerforMing tHe ABovE oPeration\n    THen return True eLse return False.\n    If the gIven arRAy is empTY then return True.\n\n    NOTe: The gIveN list is GuarANtEED to HaVE unIQuE elEMEnTs.\n\n    FoR ExaMpLe:\n    \n    Move_ONe_BaLL([3, 4, 5, 1, 2])==>tRUe\n    ExPlaNatiOn: By PERforMin 2 right ShiFt opERatIOns, nOn-decReAsInG OrdeR CAn\n                 be AcHIeVeD fOr the given ArrAy.\n    moVe_one_baLl([3, 5, 4, 1, 2])==>fAlSe\n    expLaNatioN:it is noT pOSsIBle to geT non-decREasInG ORDeR for tHe given\n                array bY PERFoRming anY NumBeR OF rIgHT shIfT OpErAtiOns.\n                \n    \"\"\"\n\n    if not arr:\n        return True\n    \n    n = len(arr)\n    # Check if the array is already sorted in non-decreasing order\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    \n    # If we reach here, it means the array is sorted\n    return True\n"}
{"task_id": "HumanEval/110", "completion": "\n    \n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of odd numbers in lst2\n    odd_count_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # If the total odd counts are equal, we can exchange\n    if odd_count_lst1 == odd_count_lst2:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n    and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n    bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n    THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n    If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n    ALl the eLements of lst1 To BE EveN, return \"Yes\".\n    OTheRwISE, return \"No\".\n    FOr ExampLe:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YEs\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is aSSuMEd that the iNput Lists wIlL Be NON-emPty.\n    \"\"\"\n\n    \n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of odd numbers in lst2\n    odd_count_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # If the total odd counts are equal, we can exchange\n    if odd_count_lst1 == odd_count_lst2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n    \n    letter_count = {}\n    \n    # Convert to lowercase and count occurrences\n    for char in test.lower():\n        if char.isalpha():  # Only consider alphabetic characters\n            if char in letter_count:\n                letter_count[char] += 1\n            else:\n                letter_count[char] = 1\n    \n    # Find the maximum occurrence\n    max_occurrence = max(letter_count.values(), default=0)\n    \n    # Collect all letters with the maximum occurrence\n    result = {char: count for char, count in letter_count.items() if count == max_occurrence}\n    \n    return result\n", "solution": "\ndef histogram(test):\n    \"\"\"GiveN a stRing rEprEsentIng a sPace sepAraTed loWerCAsE lEtteRS, return a dIctionary\n    of thE LEtteR with the moSt repetition And coNtAInInG ThE corrEspondiNG count.\n    IF SEveRaL LEttErS HaVe the SamE ocCUrrEnce, return aLl oF tHeM.\n    \n    eXAmpLe:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'B': 2}\n    histogram('a B c A B') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    if not test:\n        return {}\n    \n    letter_count = {}\n    \n    # Convert to lowercase and count occurrences\n    for char in test.lower():\n        if char.isalpha():  # Only consider alphabetic characters\n            if char in letter_count:\n                letter_count[char] += 1\n            else:\n                letter_count[char] = 1\n    \n    # Find the maximum occurrence\n    max_occurrence = max(letter_count.values(), default=0)\n    \n    # Collect all letters with the maximum occurrence\n    result = {char: count for char, count in letter_count.items() if count == max_occurrence}\n    \n    return result\n"}
{"task_id": "HumanEval/112", "completion": "\n    \n    # Convert both strings to sets for efficient character lookup\n    set_c = set(c)\n    \n    # Create the result string by filtering out characters in s that are in c\n    result_string = ''.join(char for char in s if char not in set_c)\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    return result_string, is_palindrome\n", "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n    tHen check if thE resuLt STrInG Is PalinDrome.\n    A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n    You shoULD return A tuple containinG tHE result StrinG anD True/False for tHE cHecK.\n    exaMpLe\n    FOR s = \"abcDe\", c = \"aE\", tHE Result Should be ('bCd',fALse)\n    foR s = \"AbCdeF\", c = \"b\"  THE rEsUlT shouLd be ('Acdef',FalSE)\n    FOR s = \"abcdedcba\", c = \"Ab\", thE resulT sHOuLD Be ('cDedC',True)\n    \"\"\"\n\n    \n    # Convert both strings to sets for efficient character lookup\n    set_c = set(c)\n    \n    # Create the result string by filtering out characters in s that are in c\n    result_string = ''.join(char for char in s if char not in set_c)\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    return result_string, is_palindrome\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, s in enumerate(lst):\n        count_odds = sum(1 for char in s if char in '13579')\n        result.append(f\"the number of odd elements {count_odds}n the str{count_odds}ng {i + 1} of the {i + 1}nput.\")\n    return result\n", "solution": "\ndef odd_count(lst):\n    \"\"\"GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n    EaCH elEment i of the ouTPUt shOuld be \"the nUmber of odd elEmentS in tHE\n    sTrINg I of thE input.\" wHErE ALl tHe I'S ShoUlD Be ReplaCed By tHE nuMber\n    oF odD dIgITS in The I'th string OF THe input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n    for i, s in enumerate(lst):\n        count_odds = sum(1 for char in s if char in '13579')\n        result.append(f\"the number of odd elements {count_odds}n the str{count_odds}ng {i + 1} of the {i + 1}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0  # Handle empty list case\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum\n", "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if not nums:\n        return 0  # Handle empty list case\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    \n    if total_water == 0:\n        return 0\n    \n    # Calculate the number of times we can fill the bucket\n    times = math.ceil(total_water / capacity)\n    \n    return times\n", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n    and each 1 in a row REPresEnts a singlE unit of water.\n    each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n    and All BuCkETS HavE the same capacity.\n    YOUR Task is to usE tHE bucketS to emPty The weLLs.\n    outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n    exAMpLe 1:\n        INpUT: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            BuCkEt_CapacIty : 1\n        OUtput: 6\n\n    ExaMPlE 2:\n        input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            buckeT_capAcity : 2\n        OUtPUt: 5\n    \n    eXAmpLe 3:\n        INput: \n            grid : [[0,0,0], [0,0,0]]\n            buCket_CaPAcitY : 5\n        oUtput: 0\n\n    CONsTRAInTS:\n        * All wells have tHe same lengtH\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    \n    if total_water == 0:\n        return 0\n    \n    # Calculate the number of times we can fill the bucket\n    times = math.ceil(total_water / capacity)\n    \n    return times\n"}
{"task_id": "HumanEval/116", "completion": "\n    # Convert each number to a tuple of (number of ones, decimal value)\n    counted_ones = [(bin(abs(num)).count('1'), num) for num in arr]\n    \n    # Sort the list first by the number of ones in binary, then by the decimal value\n    counted_ones.sort(key=lambda x: (x[0], x[1]))\n    \n    # Extract the sorted numbers\n    sorted_arr = [num for _, num in counted_ones]\n    \n    return sorted_arr\n", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n    number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n    For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n    IT must Be iMpLeMENTed Like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Convert each number to a tuple of (number of ones, decimal value)\n    counted_ones = [(bin(abs(num)).count('1'), num) for num in arr]\n    \n    # Sort the list first by the number of ones in binary, then by the decimal value\n    counted_ones.sort(key=lambda x: (x[0], x[1]))\n    \n    # Extract the sorted numbers\n    sorted_arr = [num for _, num in counted_ones]\n    \n    return sorted_arr\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        # Count consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n", "solution": "\ndef select_words(s, n):\n    \"\"\"GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n    A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n    n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n    iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n    nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n    ExampLeS:\n    SEleCt_WOrDs(\"MArY HAd A lItTle laMb\", 4) ==> [\"liTtle\"]\n    seleCT_wORds(\"Mary had A litTle lamB\", 3) ==> [\"MARy\", \"LAMb\"]\n    sEleCt_wordS(\"simPlE WhitE SPace\", 2) ==> []\n    seLEcT_WORdS(\"hEllo world\", 4) ==> [\"worlD\"]\n    select_wordS(\"unCLe sAm\", 3) ==> [\"UNcLE\"]\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        # Count consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = 'aeiouAEIOU'\n    closest_vowel = ''\n    \n    for char in reversed(word):\n        if char in vowels:\n            closest_vowel = char\n            break\n            \n    return closest_vowel\n", "solution": "\ndef get_closest_vowel(word):\n    \"\"\"You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n    two consonaNTS froM the right sIde of the word (case SensiTiVE).\n    \n    VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n    FIND anY vowel met THE Above condiTiON. \n\n    You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n    ExamplE:\n    gET_CloSeST_vOweL(\"yOGUrT\") ==> \"u\"\n    GeT_closEst_vOwel(\"FULL\") ==> \"u\"\n    GeT_Closest_vowEl(\"quIck\") ==> \"\"\n    get_ClOSeST_VowEl(\"aB\") ==> \"\"\n    \"\"\"\n\n    vowels = 'aeiouAEIOU'\n    closest_vowel = ''\n    \n    for char in reversed(word):\n        if char in vowels:\n            closest_vowel = char\n            break\n            \n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "\n    # Initialize counters for '(' and ')'\n    count_open = 0\n    count_close = 0\n    \n    # Iterate through the first string\n    for char in lst[0]:\n        if char == '(':\n            count_open += 1\n        elif char == ')':\n            count_close += 1\n    \n    # Iterate through the second string\n    for char in lst[1]:\n        if char == '(':\n            count_open += 1\n        elif char == ')':\n            count_close += 1\n    \n    # Check if the balance is maintained\n    if count_open == count_close:\n        return 'YeS'\n    else:\n        return 'No'\n", "solution": "\ndef match_parens(lst):\n    '''\n    You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n    PareNTheSes '(' or close parENThesEs ')' only.\n    Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n    soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n    A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n    ArE baLAnceD. FoR eXAMple: thE string '(())()' is GoOD, WhiLe THe StrInG\n    '())' IS nOt.\n    reTurn 'YEs' if There's a wAY tO Make a good sTrinG, and return 'No' OtHErWISe.\n\n    EXamPles:\n    maTch_pArENs(['()(', ')']) == 'YeS'\n    MAtch_paREnS([')', ')']) == 'nO'\n    '''\n\n    # Initialize counters for '(' and ')'\n    count_open = 0\n    count_close = 0\n    \n    # Iterate through the first string\n    for char in lst[0]:\n        if char == '(':\n            count_open += 1\n        elif char == ')':\n            count_close += 1\n    \n    # Iterate through the second string\n    for char in lst[1]:\n        if char == '(':\n            count_open += 1\n        elif char == ')':\n            count_close += 1\n    \n    # Check if the balance is maintained\n    if count_open == count_close:\n        return 'YeS'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Step 1: Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Step 2: Return the first k elements from the sorted array\n    return sorted_arr[:k]\n", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sorted list \n    oF LeNgTh k wiTH thE maximum k numbers in arr.\n\n    ExampLE 1:\n\n        inpuT: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    ExaMple 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        OutPut: [4, 4]\n\n    ExAmPLe 3:\n\n        inPUt: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        outpuT: [2]\n\n    Note:\n        1. ThE LeNGTh oF tHE ArrAy WIlL be in thE raNge OF [1, 1000].\n        2. ThE elemEntS in tHe ARRAy wIll be in the rANGE of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Step 1: Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Step 2: Return the first k elements from the sorted array\n    return sorted_arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 != 0:\n            total_sum += value\n    return total_sum\n", "solution": "\ndef solution(lst):\n    \"\"\"GiveN a noN-emptY list of IntegErs, return thE sum of all oF thE odd eLemENtS tHat aRE in evEn positions.\n    \n\n    ExAMPles\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 != 0:\n            total_sum += value\n    return total_sum\n"}
{"task_id": "HumanEval/122", "completion": "\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through the first k elements\n    for i in range(k):\n        # Check if the current element has two digits\n        if 10 <= abs(arr[i]) <= 99:\n            total_sum += arr[i]\n            \n    return total_sum\n", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n    thE sum Of ThE eleMEntS with at most twO digits FRom tHe first k eleMents of arr.\n\n    ExampLe:\n\n        InpUt: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        oUtPuT: 24 # sum Of 21 + 3\n\n    constRaints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through the first k elements\n    for i in range(k):\n        # Check if the current element has two digits\n        if 10 <= abs(arr[i]) <= 99:\n            total_sum += arr[i]\n            \n    return total_sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 0:  # Even\n            n //= 2\n        else:  # Odd\n            odd_numbers.append(n)\n            n = 3 * n + 1\n    \n    odd_numbers.append(1)  # Adding 1 to the sequence\n    return sorted(set(odd_numbers))  # Use set to remove duplicates and sort the result\n", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    GivEn a pOsitiVe iNtegeR n, return a sorted list thaT has the Odd NumbeRs in cOLlAtZ seqUEncE.\n\n    The Collatz coNJEctuRe is a conjeCture in mathemaTics tHaT CoNcERnS a seqUence deFInED\n    As fOlLOWs: sTaRT wIth anY poSitIVe iNtegeR n. ThEn EaCH TErm Is obtaineD FROm the \n    previOuS Term as fOllowS: if The prEViOus TErm Is EveN, The nExt TeRM Is one hAlf of \n    the pReVIOus TeRM. IF thE pREViOuS tErm is Odd, tHe next teRM iS 3 Times the prEvioUs\n    term PlUS 1. THE ConJecTure is That No MAtteR WHat valUE oF n, THE sEQUence will alwaYs reach 1.\n\n    Note: \n        1. cOlLAtz(1) Is [1].\n        2. rEtURnED list sorted in increAsing OrDEr.\n\n    FOr Example:\n    gET_odd_Collatz(5) reTurns [1, 5] # THE collatZ SequenCE for 5 is [5, 16, 8, 4, 2, 1], So tHe oDd nuMBeRS Are OnLY 1, anD 5.\n    \"\"\"\n\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 0:  # Even\n            n //= 2\n        else:  # Odd\n            odd_numbers.append(n)\n            n = 3 * n + 1\n    \n    odd_numbers.append(1)  # Adding 1 to the sequence\n    return sorted(set(odd_numbers))  # Use set to remove duplicates and sort the result\n"}
{"task_id": "HumanEval/124", "completion": "\n    # Check if the date is not empty\n    if not date:\n        return False\n    \n    # Split the date into month, day, and year\n    parts = date.split('-')\n    \n    # Check if we have exactly three parts\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are valid integers\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n    \n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if day is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:  # Assuming a leap year check is not needed for this problem\n            return False\n    \n    # Check if year is valid\n    if year < 1 or year > 9999:  # Assuming a reasonable year range\n        return False\n    \n    return True\n", "solution": "\ndef valid_date(date):\n    \"\"\"You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n    rETurNs True if the date is valiD OTherWise False.\n    The date is vAlid if all of tHe folLoWInG rULeS are sAtisfieD:\n    1. thE date STriNg IS Not EmPTy.\n    2. the nuMbeR of days IS noT less ThaN 1 oR hIGHEr tHan 31 days for monTHS 1,3,5,7,8,10,12. and the numbEr OF days is not lEss thAn 1 oR highER tHan 30 days FOr mOnThs 4,6,9,11. aNd, thE nuMbER Of days is noT less than 1 Or HIGheR tHAn 29 For ThE MOnTh 2.\n    3. thE montHs shOuld not bE LeSS than 1 or higHer tHan 12.\n    4. The date ShOUlD BE in thE foRmat: mm-Dd-yyYy\n\n    FOr exAMPle: \n    valID_dATE('03-11-2000') => True\n\n    VaLID_date('15-01-2012') => False\n\n    valid_datE('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    vALiD_DatE('06/04/2020') => False\n    \"\"\"\n\n    # Check if the date is not empty\n    if not date:\n        return False\n    \n    # Split the date into month, day, and year\n    parts = date.split('-')\n    \n    # Check if we have exactly three parts\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are valid integers\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n    \n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if day is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:  # Assuming a leap year check is not needed for this problem\n            return False\n    \n    # Check if year is valid\n    if year < 1 or year > 9999:  # Assuming a reasonable year range\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ',' in txt:\n        # Split by comma\n        words = txt.split(',')\n        return [word.capitalize() for word in words]\n    else:\n        # Count lowercase letters\n        count = sum(1 for char in txt if char.islower())\n        return count\n", "solution": "\ndef split_words(txt):\n    '''\n    GivEn a sTring Of wOrds, return a list Of worDs split on whitespace, if nO whItespAceS ExIsTs in thE TexT you\n    should split on cOMMas ',' iF no commas eXists you shouLd return the NuMBeR oF LoWer-caSe letteRS wITH odD oRDEr in tHe\n    ALpHabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    exaMplES\n    split_words(\"Hello woRld!\") \u279e [\"HeLlo\", \"WoRlD!\"]\n    split_words(\"Hello,world!\") \u279e [\"hELlo\", \"World!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    if ',' in txt:\n        # Split by comma\n        words = txt.split(',')\n        return [word.capitalize() for word in words]\n    else:\n        # Count lowercase letters\n        count = sum(1 for char in txt if char.islower())\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) < 2:\n        return True\n    \n    # Check for duplicates\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    \n    # Check for sorted order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n            \n    return True\n", "solution": "\ndef is_sorted(lst):\n    '''\n    GivEn a list oF numbErs, return WhethEr or nOt they aRe sorted\n    in aScendIng ORdEr. if list haS MorE than 1 duplicatE OF the Same\n    number, return False. assume no negaTive nUmBErS aND oNly inTegers.\n\n    EXAmPLEs\n    iS_sORTed([5]) \u279e True\n    Is_SOrTed([1, 2, 3, 4, 5]) \u279e True\n    is_SorTed([1, 3, 2, 4, 5]) \u279e False\n    IS_soRted([1, 2, 3, 4, 5, 6]) \u279e True\n    iS_soRtEd([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    IS_SOrtEd([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorteD([1, 2, 2, 3, 3, 4]) \u279e True\n    IS_Sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    if len(lst) < 2:\n        return True\n    \n    # Check for duplicates\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    \n    # Check for sorted order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n            \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    \n    # Unpack the intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check for no intersection\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    # Calculate the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intersection is a prime number\n    if intersection_start == intersection_end:\n        return \"NO\"  # If the intersection is a single point, it's not a prime number\n    \n    # Check if the intersection length is prime\n    intersection_length = intersection_end - intersection_start\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You aRe giVen twO inTervaLs,\n    wheRe each iNteRval iS a paIR oF iNtegERs. FOr example, inteRVAl = (stArt, end) = (1, 2).\n    The gIven intervalS are cLoSEd WhICh Means That the INtERVal (StART, enD)\n    iNClUdes bOth StaRT anD end.\n    FOr eAcH gIVEN inTerval, it iS ASSumed that iTs STart is lEss or EquAl its ENd.\n    youR TasK iS to DEterMinE wHETher thE length of intersection Of THEse TwO \n    InTerVaLS Is a PrImE numbEr.\n    ExAmple, the intersection OF tHE intervals (1, 3), (2, 4) Is (2, 3)\n    whIch its LeNGtH IS 1, whIch Not a priMe nuMbER.\n    If tHE Length OF tHE intersection IS a pRIMe number, return \"YES\",\n    otHerwise, return \"NO\".\n    If THe TWo iNteRvALs DOn't intErsecT, return \"No\".\n\n\n    [InpUt/Output] saMPles:\n    intersection((1, 2), (2, 3)) ==> \"nO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    \n    # Unpack the intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check for no intersection\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    # Calculate the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intersection is a prime number\n    if intersection_start == intersection_end:\n        return \"NO\"  # If the intersection is a single point, it's not a prime number\n    \n    # Check if the intersection length is prime\n    intersection_length = intersection_end - intersection_start\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    \n    total_sum = 0\n    product_of_signs = 1\n    \n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n        \n        total_sum += num\n    \n    return total_sum * product_of_signs\n", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n    Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n    of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n    notE: return NONE foR eMPtY arr.\n\n    ExamPle:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n    \n    total_sum = 0\n    product_of_signs = 1\n    \n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n        \n        total_sum += num\n    \n    return total_sum * product_of_signs\n"}
{"task_id": "HumanEval/129", "completion": "\n    from collections import defaultdict\n    from itertools import product\n\n    n = len(grid)\n    # Create a mapping from cell value to its coordinates\n    value_to_coords = {grid[i][j]: (i, j) for i, j in product(range(n), range(n))}\n\n    # Create a list of all values in the grid\n    values = sorted(value_to_coords.keys())\n\n    # Initialize the minimum path\n    min_path = []\n    min_path_value = float('inf')\n\n    # Helper function to check if a path is valid\n    def is_valid_path(path):\n        return sorted(path) == values\n\n    # Helper function to find the next possible moves\n    def get_next_moves(current_value):\n        i, j = value_to_coords[current_value]\n        moves = []\n        # Check the four possible moves\n        if i > 0:  # Up\n            moves.append(grid[i - 1][j])\n        if i < n - 1:  # Down\n            moves.append(grid[i + 1][j])\n        if j > 0:  # Left\n            moves.append(grid[i][j - 1])\n        if j < n - 1:  # Right\n            moves.append(grid[i][j + 1])\n        return moves\n\n    # DFS function to explore paths\n    def dfs(current_value, path):\n        nonlocal min_path, min_path_value\n\n        # If the current path is valid and shorter than the current minimum\n        if len(path) == k and is_valid_path(path):\n            if sorted(path) < sorted(min_path):\n                min_path = path\n                min_path_value = sum(path)\n            return\n\n        # If the path is too long, return\n        if len(path) > k:\n            return\n\n        # Explore all possible moves from the current cell\n        for next_value in get_next_moves(current_value):\n            if next_value not in path:  # Avoid revisiting cells\n                dfs(next_value, path + [next_value])\n\n    # Start DFS from each cell\n    for value in values:\n        dfs(value, [value])\n\n    return min_path\n", "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    GivEn a grid wIth N roWs aNd N colUmns (N >= 2) aNd a posiTivE inteGer k, \n    EAcH cEll oF The grid Contains a valuE. eVery Integer in the range [1, N * N]\n    Inclusive appEars eXaCTlY oNCe On the Cells of THe grid.\n\n    yOU haVe TO FinD tHE mInimuM paTh oF LenGth k in thE grid. YoU cAn STARt\n    fRom any celL, AND in each step yOu CAn move tO any oF thE neigHBoR ceLLs,\n    in oThEr wORds, yOu cAn GO To cellS which shaRe AN EdgE wITh You CuRREnT\n    cElL.\n    PleaSe noTe that a pATh OF length k meaNs viSiting ExACtLY k CelLs (nOt\n    neceSsarIlY DistINCt).\n    You CanNot GO oFF The grid.\n    A path A (of leNgth k) is consiDErED leSs tHaN A pATh B (of lEngth k) If\n    AFteR mAking the ORderEd lists of The valUEs on the CElls thAT A and B Go\n    tHroUgh (lET's CALl tHeM Lst_a AnD lsT_b), LsT_A is LexiCoGrAphiCAlLy LESS\n    Than Lst_b, in othEr woRDS, theRe exist aN inTegeR IndEX i (1 <= i <= k)\n    sucH that LsT_A[I] < lST_B[i] aND For aNy j (1 <= j < i) WE hAvE\n    lSt_A[j] = lst_B[j].\n    IT is GuarAnteed tHaT ThE aNswEr Is uniQUe.\n    RetuRn AN oRDered list of The valuES on ThE CELlS that The minimum patH GO THrOugh.\n\n    ExaMPleS:\n\n        INPUt: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        ouTPut: [1, 2, 1]\n\n        inPUt: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        ouTpuT: [1]\n    \"\"\"\n\n    from collections import defaultdict\n    from itertools import product\n\n    n = len(grid)\n    # Create a mapping from cell value to its coordinates\n    value_to_coords = {grid[i][j]: (i, j) for i, j in product(range(n), range(n))}\n\n    # Create a list of all values in the grid\n    values = sorted(value_to_coords.keys())\n\n    # Initialize the minimum path\n    min_path = []\n    min_path_value = float('inf')\n\n    # Helper function to check if a path is valid\n    def is_valid_path(path):\n        return sorted(path) == values\n\n    # Helper function to find the next possible moves\n    def get_next_moves(current_value):\n        i, j = value_to_coords[current_value]\n        moves = []\n        # Check the four possible moves\n        if i > 0:  # Up\n            moves.append(grid[i - 1][j])\n        if i < n - 1:  # Down\n            moves.append(grid[i + 1][j])\n        if j > 0:  # Left\n            moves.append(grid[i][j - 1])\n        if j < n - 1:  # Right\n            moves.append(grid[i][j + 1])\n        return moves\n\n    # DFS function to explore paths\n    def dfs(current_value, path):\n        nonlocal min_path, min_path_value\n\n        # If the current path is valid and shorter than the current minimum\n        if len(path) == k and is_valid_path(path):\n            if sorted(path) < sorted(min_path):\n                min_path = path\n                min_path_value = sum(path)\n            return\n\n        # If the path is too long, return\n        if len(path) > k:\n            return\n\n        # Explore all possible moves from the current cell\n        for next_value in get_next_moves(current_value):\n            if next_value not in path:  # Avoid revisiting cells\n                dfs(next_value, path + [next_value])\n\n    # Start DFS from each cell\n    for value in values:\n        dfs(value, [value])\n\n    return min_path\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n < 1:\n        return []\n    \n    tribonacci_sequence = [1, 3, 2]\n    \n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    \n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_number = 1 + (i / 2)\n        else:\n            next_number = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1]\n        \n        tribonacci_sequence.append(next_number)\n    \n    return tribonacci_sequence\n", "solution": "\ndef tri(n):\n    \"\"\"EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n    the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n    TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, IF n Is eVen.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n    fOR example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    YoU aRE given a Non-neGatIve inTEgEr nUMbeR n, yOu hAVe to A return a list oF tHE \n    First n + 1 nUmbers of tHe tRIboNaCCi SeqUeNCE.\n    EXaMpLes:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    if n < 1:\n        return []\n    \n    tribonacci_sequence = [1, 3, 2]\n    \n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    \n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_number = 1 + (i / 2)\n        else:\n            next_number = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1]\n        \n        tribonacci_sequence.append(next_number)\n    \n    return tribonacci_sequence\n"}
{"task_id": "HumanEval/131", "completion": "\n    if n < 0:\n        n = -n  # Handle negative numbers\n    \n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Remove the last digit\n    \n    return product if has_odd else 0\n", "solution": "\ndef digits(n):\n    \"\"\"GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n    ReTurN 0 If AlL digits are EVen.\n    for example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    if n < 0:\n        n = -n  # Handle negative numbers\n    \n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Remove the last digit\n    \n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance > 0\n", "solution": "\ndef is_nested(string):\n    '''\n    CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n    The funCTIon sHould return True if and Only if there iS a valId SUbSeQUeNce of BracketS \n    WhERE at LeAST onE bRAcKet in thE suBseQUenCe is nEstEd.\n\n    Is_NESTed('[[]]') \u279e True\n    Is_nested('[]]]]]]][[[[[]') \u279e False\n    iS_NESted('[][]') \u279e False\n    is_nestEd('[]') \u279e False\n    IS_nested('[[][]]') \u279e True\n    Is_nesTed('[[]][[') \u279e True\n    '''\n\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance > 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    # Initialize the sum of squares\n    total_sum = 0\n    \n    # Iterate through each number in the list\n    for number in lst:\n        # Round the number to the nearest integer\n        rounded_number = int(number + 0.5)  # This will round to the nearest integer\n        # Add the square of the rounded number to the total sum\n        total_sum += rounded_number ** 2\n    \n    return total_sum\n", "solution": "\n\ndef sum_squares(lst):\n    \"\"\"You aRe giVen a list oF nuMbers.\n    you neEd to return the sum Of sQuareD nuMBeRs in The gIVen list,\n    Round each elemENT in the list To the upper int(Ceiling) First.\n    ExampleS:\n    For lst = [1,2,3] tHe OUtPuT ShOuld bE 14\n    For lst = [1,4,9] the OUtPUT shOuLD Be 98\n    FOr lst = [1,3,5,7] THe OutpuT shOulD Be 84\n    FOr lst = [1.4,4.2,0] the OutPuT sHOULd bE 29\n    For lst = [-2.4,1,1] the ouTPUT should be 6\n    \n\n    \"\"\"\n\n    # Initialize the sum of squares\n    total_sum = 0\n    \n    # Iterate through each number in the list\n    for number in lst:\n        # Round the number to the nearest integer\n        rounded_number = int(number + 0.5)  # This will round to the nearest integer\n        # Add the square of the rounded number to the total sum\n        total_sum += rounded_number ** 2\n    \n    return total_sum\n"}
{"task_id": "HumanEval/134", "completion": "\n    # Strip whitespace from the end of the string\n    stripped_txt = txt.strip()\n    \n    # Check if the stripped string is empty\n    if not stripped_txt:\n        return False\n    \n    # Get the last character of the stripped string\n    last_char = stripped_txt[-1]\n    \n    # Check if the last character is a letter\n    return last_char.isalpha()\n", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    CreAte a FunctIon That rEturnS True if the lAst CharaCteR\n    Of A gIven STriNg is an alphabeTICal cHaracter anD is not\n    a part oF a worD, aND False oThERwIse.\n    NoTe: \"word\" iS A gROUp oF cHARacTeRS sEparaTed By sPAce.\n\n    exampLes:\n    ChEcK_IF_LasT_char_is_a_lETTEr(\"apple pie\") \u279e False\n    ChECk_if_lasT_char_Is_a_LetteR(\"ApPle PI e\") \u279e True\n    cHeCk_iF_Last_ChaR_iS_A_Letter(\"Apple pi e \") \u279e False\n    cHeCK_If_lAsT_ChAr_iS_a_LETtEr(\"\") \u279e False \n    '''\n\n    # Strip whitespace from the end of the string\n    stripped_txt = txt.strip()\n    \n    # Check if the stripped string is empty\n    if not stripped_txt:\n        return False\n    \n    # Get the last character of the stripped string\n    last_char = stripped_txt[-1]\n    \n    # Check if the last character is a letter\n    return last_char.isalpha()\n"}
{"task_id": "HumanEval/135", "completion": "\n    if not arr:\n        return -1\n    \n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            max_index = i - 1\n    \n    return max_index\n", "solution": "\ndef can_arrange(arr):\n    \"\"\"CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n    is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n    nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n    dUpLiCATE vaLues.\n\n    ExampLES:\n    Can_arrange([1,2,4,3,5]) = 3\n    CaN_Arrange([1,2,3]) = -1\n    \"\"\"\n\n    if not arr:\n        return -1\n    \n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            max_index = i - 1\n    \n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    CreAte a FunctIon That rEturnS a tuple (a, b), wheRe 'a' Is\n    the LarGEsT oF negATivE integers, and 'b' IS The sMallest\n    of pOsitive integErs in a list.\n    IF tHErE iS No NegatIve or poSItIVE inTeGERs, return tHeM As none.\n\n    EXamPleS:\n    LarGest_sMalLeSt_INTEgeRs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    larGEST_smallest_iNtEGers([]) == (NonE, None)\n    LarGest_sMAlLesT_IntEgErs([0]) == (nOne, NOne)\n    '''\n\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    \n    # Convert strings to floats if possible\n    try:\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n    except ValueError:\n        return None  # If conversion fails, return None\n\n    # Compare the values\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        return b\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        return a\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n\n    return None  # In case of unexpected types\n", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n    real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n    REturn NoNE iF THe vAlUES arE eQUaL.\n    Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n    coMpare_One(1, 2.5) \u279e 2.5\n    CompaRE_oNe(1, \"2,3\") \u279e \"2,3\"\n    cOMpaRe_One(\"5,1\", \"6\") \u279e \"6\"\n    COmpaRe_oNe(\"1\", 1) \u279e nONe\n    \"\"\"\n\n    \n    # Convert strings to floats if possible\n    try:\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n    except ValueError:\n        return None  # If conversion fails, return None\n\n    # Compare the values\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        return b\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        return a\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n\n    return None  # In case of unexpected types\n"}
{"task_id": "HumanEval/138", "completion": "\n    # Check if n is even\n    if n % 2 != 0:\n        return False\n    \n    # Initialize a set to store even numbers\n    even_numbers = set()\n    \n    # Generate all combinations of 4 positive even numbers\n    for i in range(2, n + 1, 2):  # Start from 2 and increment by 2\n        for j in range(i, n + 1, 2):  # Start from i and increment by 2\n            for k in range(j, n + 1, 2):  # Start from j and increment by 2\n                for l in range(k, n + 1, 2):  # Start from k and increment by 2\n                    if i + j + k + l == n:\n                        even_numbers.add((i, j, k, l))\n    \n    # Return True if we found any valid combination\n    return len(even_numbers) > 0\n", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n    Example\n    is_Equal_to_sum_evEn(4) == False\n    is_eQuAL_tO_sUM_eVen(6) == False\n    is_Equal_to_SUm_EVEn(8) == True\n    \"\"\"\n\n    # Check if n is even\n    if n % 2 != 0:\n        return False\n    \n    # Initialize a set to store even numbers\n    even_numbers = set()\n    \n    # Generate all combinations of 4 positive even numbers\n    for i in range(2, n + 1, 2):  # Start from 2 and increment by 2\n        for j in range(i, n + 1, 2):  # Start from i and increment by 2\n            for k in range(j, n + 1, 2):  # Start from j and increment by 2\n                for l in range(k, n + 1, 2):  # Start from k and increment by 2\n                    if i + j + k + l == n:\n                        even_numbers.add((i, j, k, l))\n    \n    # Return True if we found any valid combination\n    return len(even_numbers) > 0\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n", "solution": "\ndef special_factorial(n):\n    \"\"\"The BRaziLian fActOrial Is defIned as:\n    bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    whERe n > 0\n\n    FOr example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n    \n    # Replace spaces with underscores\n    modified_text = text.replace(' ', '_')\n    \n    # Replace multiple spaces with a single hyphen\n    modified_text = ' '.join(modified_text.split())\n    \n    return modified_text\n", "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    GivEn a sTring text, replace All SpaceS in it wiTh underScoRes, \n    anD if A StRiNg haS MorE than 2 consecutIVE spaCes, \n    then replace all Consecutive sPaces WiTH - \n    \n    fIx_SPaCes(\"ExAmple\") == \"ExAMpLE\"\n    Fix_SpACEs(\"EXaMPlE 1\") == \"ExamPle_1\"\n    Fix_SPacEs(\" ExaMplE 2\") == \"_EXaMPLE_2\"\n    fiX_spaces(\" ExAMPLe   3\") == \"_Example-3\"\n    \"\"\"\n\n    # Convert to lowercase\n    text = text.lower()\n    \n    # Replace spaces with underscores\n    modified_text = text.replace(' ', '_')\n    \n    # Replace multiple spaces with a single hyphen\n    modified_text = ' '.join(modified_text.split())\n    \n    return modified_text\n"}
{"task_id": "HumanEval/141", "completion": "\n    \n    # Check for the number of digits\n    digit_count = sum(1 for char in file_name if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n    \n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.rsplit('.', 1)\n    \n    # Check if the name is not empty\n    if not name:\n        return 'No'\n    \n    # Check if the name starts with a letter\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n", "solution": "\ndef file_name_check(file_name):\n    \"\"\"CreaTe a fUnctiOn wHich tAkes a String rEprEsentIng A FiLe'S namE, And Returns\n    'Yes' if tHE The fIle's name is Valid, and retuRns 'No' OtHErWiSE.\n    A File's Name is cONsIDEreD tO BE vaLiD If And onLy iF alL The FolloWinG cOnDITIonS \n    are met:\n    - ThERE Should not bE mORe than tHree dIgiTs ('0'-'9') in the FIlE's nAMe.\n    - THe FilE'S namE coNtAINs exacTly one dot '.'\n    - thE SUbsTrINg BefOrE THe DoT sHould Not bE empty, anD It STarts with a LettEr from \n    ThE LaTIN alPhaPet ('a'-'z' aNd 'A'-'Z').\n    - thE SubsTRIng aftER tHE DOt SHOuld be one of thEse: ['txt', 'exe', 'dlL']\n    exAMplEs:\n    fIlE_NaME_check(\"ExampLe.TXt\") # => 'YEs'\n    File_name_CHeck(\"1Example.dlL\") # => 'No' (the NAme shouLD start WIth a laTin AlpHapeT LeTTEr)\n    \"\"\"\n\n    \n    # Check for the number of digits\n    digit_count = sum(1 for char in file_name if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n    \n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.rsplit('.', 1)\n    \n    # Check if the name is not empty\n    if not name:\n        return 'No'\n    \n    # Check if the name starts with a letter\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 != 0:\n            total_sum += value ** 3  # Square the value if index is a multiple of 3\n        elif index % 4 == 0 and index % 3 != 0:\n            total_sum += value ** 2  # Cube the value if index is a multiple of 4\n        else:\n            total_sum += value  # Keep the value as is\n    return total_sum\n", "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n    MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n    change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n    \n    exAMPlEs:\n    foR lst = [1,2,3] the oUtpuT should bE 6\n    foR lst = []  The output sHoulD be 0\n    For lst = [-1,-5,2,-1,-5]  ThE OuTPUt sHouLd be -126\n    \"\"\"\n\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 != 0:\n            total_sum += value ** 3  # Square the value if index is a multiple of 3\n        elif index % 4 == 0 and index % 3 != 0:\n            total_sum += value ** 2  # Cube the value if index is a multiple of 4\n        else:\n            total_sum += value  # Keep the value as is\n    return total_sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words with lengths that are prime numbers\n    prime_lengths = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    filtered_words = [word for word in words if len(word) in prime_lengths]\n    \n    # Join the filtered words with a space\n    result = ' '.join(filtered_words)\n    \n    return result\n", "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You Are gIven a sTriNg repResenTing a sentence,\n    the sentence ConTains SomE WoRdS sepARatEd by a space,\n    and yOU Have To return a string thAt contains thE wordS fROm ThE OrIginaL sentence,\n    whose lENgTHS arE pRIMe nUmBErS,\n    the oRdeR of THe wOrds in tHe nEw StRING shOuld be the SAME as the origInAL one.\n\n    ExaMple 1:\n        INpuT: sentence = \"This IS a tEst\"\n        oUtpUt: \"Is\"\n\n    EXAmplE 2:\n        InPuT: sentence = \"LEts go fOr swimminG\"\n        OUTPut: \"Go FOr\"\n\n    conStRAInTs:\n        * 1 <= len(sentence) <= 100\n        * sentence CoNtainS onlY letters\n    \"\"\"\n\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words with lengths that are prime numbers\n    prime_lengths = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    filtered_words = [word for word in words if len(word) in prime_lengths]\n    \n    # Join the filtered words with a space\n    result = ' '.join(filtered_words)\n    \n    return result\n"}
{"task_id": "HumanEval/144", "completion": "\n    \n    # Extract numerators and denominators\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the product of the two fractions\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    # Find the greatest common divisor (GCD)\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    \n    # Simplify the product fraction\n    common_divisor = gcd(product_num, product_den)\n    simplified_num = product_num // common_divisor\n    simplified_den = product_den // common_divisor\n    \n    # Check if the simplified product is a whole number\n    return simplified_den == 1\n", "solution": "\ndef simplify(x, n):\n    \"\"\"Your Task Is to iMplEment A funcTion thaT wiLl simplify the ExpREsSiOn\n    x * n. ThE FunCtion returns True iF x * n EValuAtes to a whoLe number and False\n    oTherwIsE. boTh x ANd n, Are stRing repREsENTatIoN OF a fRaCTiOn, and HavE thE FolLowinG foRmAt,\n    <NUMEraTor>/<denomiNATOr> where botH nUMerator And deNomInatoR ArE poSItiVe WhoLE numBerS.\n\n    YOU Can assUme that x, anD n aRE ValId FRaCtiOnS, ANd Do NoT have Zero As denomiNAtOR.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    \n    # Extract numerators and denominators\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the product of the two fractions\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    # Find the greatest common divisor (GCD)\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    \n    # Simplify the product fraction\n    common_divisor = gcd(product_num, product_den)\n    simplified_num = product_num // common_divisor\n    simplified_den = product_den // common_divisor\n    \n    # Check if the simplified product is a whole number\n    return simplified_den == 1\n"}
{"task_id": "HumanEval/145", "completion": "\n    # Helper function to calculate the sum of the digits\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Create a list of tuples (sum_of_digits, original_index, number)\n    nums_with_digit_sum = [(sum_of_digits(num), i, num) for i, num in enumerate(nums)]\n\n    # Sort the list first by the digit sum, then by the original index\n    nums_with_digit_sum.sort(key=lambda x: (x[0], x[1]))\n\n    # Extract the sorted numbers\n    return [num for _, _, num in nums_with_digit_sum]\n", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n    in aSCeNdIng oRDer According to thE sum OF theIr digits.\n    NoTe: if there are SeverAl ITeMs WItH simiLar sum of thEIr DIGitS,\n    oRDEr tHeM BaSed on TheIr iNDex in OrigiNal list.\n\n    foR eXAMPle:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Helper function to calculate the sum of the digits\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Create a list of tuples (sum_of_digits, original_index, number)\n    nums_with_digit_sum = [(sum_of_digits(num), i, num) for i, num in enumerate(nums)]\n\n    # Sort the list first by the digit sum, then by the original index\n    nums_with_digit_sum.sort(key=lambda x: (x[0], x[1]))\n\n    # Extract the sorted numbers\n    return [num for _, _, num in nums_with_digit_sum]\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10:\n            # Extract the first and last digits\n            first_digit = abs(num) // 10\n            last_digit = abs(num) % 10\n            # Check if both digits are odd\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n", "solution": "\ndef specialFilter(nums):\n    \"\"\"WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n    tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n    FiRSt And laSt digitS Of A NUmbEr ARE odd (1, 3, 5, 7, 9).\n    FoR eXAmPle:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    count = 0\n    for num in nums:\n        if num > 10:\n            # Extract the first and last digits\n            first_digit = abs(num) // 10\n            last_digit = abs(num) % 10\n            # Check if both digits are odd\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    # Step 1: Calculate the values of a[i]\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Step 2: Initialize the count of valid triples\n    count = 0\n    \n    # Step 3: Iterate through all possible triplets (i, j, k)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n", "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n        For eACH i (1 \u2264 i \u2264 n), tHe value of a[I] = i * i - i + 1.\n        Return thE numbEr OF tRiPLeS (a[i], a[j], A[k]) of a whERe I < J < K, \n    anD a[I] + A[J] + a[k] Is A MuLtiplE of 3.\n\n    exaMPle :\n        input: n = 5\n        outPuT: 1\n        EXPLAnaTion: \n        a = [1, 3, 7, 13, 21]\n        The oNLY Valid triplE iS (1, 7, 13).\n    \"\"\"\n\n    # Step 1: Calculate the values of a[i]\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Step 2: Initialize the count of valid triples\n    count = 0\n    \n    # Step 3: Iterate through all possible triplets (i, j, k)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    \n    # Define the orbital distances of the planets relative to the sun\n    orbital_distances = {\n        \"mercury\": 57.9,\n        \"venus\": 108.2,\n        \"earth\": 149.6,\n        \"mars\": 227.9,\n        \"jupiter\": 778.6,\n        \"saturn\": 1429.4,\n        \"uranus\": 2872.5,\n        \"neptune\": 4495.1\n    }\n    \n    # Normalize planet names to lower case\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    \n    # Check if both planets are valid\n    if planet1 not in orbital_distances or planet2 not in orbital_distances:\n        return ()\n    \n    # Get the orbital distances\n    distance1 = orbital_distances[planet1]\n    distance2 = orbital_distances[planet2]\n    \n    # Find planets within the range of the two planets\n    result = []\n    for planet, distance in orbital_distances.items():\n        if distance1 - 10 <= distance <= distance2 + 10:  # 10 km tolerance\n            result.append(planet)\n    \n    # Sort the result by the distance to the sun\n    result.sort(key=lambda p: orbital_distances[p])\n    \n    return tuple(result)\n", "solution": "\ndef bf(planet1, planet2):\n    '''\n    TheRe arE eighT planets in ouR solaR systEm: the clOseRst to The sUn \n    Is mercURy, tHe next one is VeNUS, theN Earth, Mars, jupiter, SaturN, \n    UranUs, nEpTuNE.\n    WRite a FunctioN ThAT TakEs TWO plAnET nAmes aS stRinGS planet1 anD planet2. \n    The fUncTiOn SHOUld return A tuple containiNG ALl planets whose orbItS Are \n    locaTed beTweEn the ORbIt oF planet1 And ThE orBIt of planet2, SorTeD BY \n    the prOximity to ThE SUn. \n    THe FUnCtiOn SHOuLd return An Empty tuple If planet1 or planet2\n    Are not coRReCT planet namEs. \n    ExAmples\n    bf(\"Jupiter\", \"nePTuNE\") ==> (\"satUrn\", \"uranus\")\n    bf(\"Earth\", \"mercUrY\") ==> (\"venuS\")\n    bf(\"Mercury\", \"uRanus\") ==> (\"VENuS\", \"eARtH\", \"mArs\", \"Jupiter\", \"SatUrn\")\n    '''\n\n    \n    # Define the orbital distances of the planets relative to the sun\n    orbital_distances = {\n        \"mercury\": 57.9,\n        \"venus\": 108.2,\n        \"earth\": 149.6,\n        \"mars\": 227.9,\n        \"jupiter\": 778.6,\n        \"saturn\": 1429.4,\n        \"uranus\": 2872.5,\n        \"neptune\": 4495.1\n    }\n    \n    # Normalize planet names to lower case\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    \n    # Check if both planets are valid\n    if planet1 not in orbital_distances or planet2 not in orbital_distances:\n        return ()\n    \n    # Get the orbital distances\n    distance1 = orbital_distances[planet1]\n    distance2 = orbital_distances[planet2]\n    \n    # Find planets within the range of the two planets\n    result = []\n    for planet, distance in orbital_distances.items():\n        if distance1 - 10 <= distance <= distance2 + 10:  # 10 km tolerance\n            result.append(planet)\n    \n    # Sort the result by the distance to the sun\n    result.sort(key=lambda p: orbital_distances[p])\n    \n    return tuple(result)\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out strings with odd lengths\n    filtered_list = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length and alphabetically\n    sorted_list = sorted(filtered_list, key=lambda s: (len(s), s))\n    \n    return sorted_list\n", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n    DeLeteS The Strings that haVE Odd lEngths from It,\n    and returns The reSuLTeD list wITh A sorted ordeR,\n    The list is aLWaYS A list of StRINgs AnD NeVer an ArrAy oF NumBers,\n    aNd iT mAy CONTaiN duplicatES.\n    tHe order of tHe list SHould be AscenDinG by leNGtH of EAch WoRd, aND you\n    ShoUlD return THe list sorted by thAt rule.\n    If tWo WORds HaVE tHe sAmE LEnGtH, sOrt thE list alpHabeticaLLy.\n    tHe function ShouLd return a list of sTrINgS in sorted ORdeR.\n    YoU may asSume ThAT all WORds wilL HaVE THe SAMe length.\n    For exAmple:\n    assert list_sort([\"aa\", \"A\", \"AaA\"]) => [\"Aa\"]\n    aSseRt list_sort([\"ab\", \"A\", \"AaA\", \"Cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Filter out strings with odd lengths\n    filtered_list = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length and alphabetically\n    sorted_list = sorted(filtered_list, key=lambda s: (len(s), s))\n    \n    return sorted_list\n"}
{"task_id": "HumanEval/150", "completion": "\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simPle pRograM whIch shOuld return tHe value Of x iF n is \n    a prIme NUmBeR and SHouLd return the value of y oTHErwiSe.\n\n    Examples:\n    For x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    \n    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num < 0:\n            continue  # Ignore negative integers\n        if num % 2 != 0:  # Check if the number is odd\n            total_sum += num ** 2  # Add the square of the odd number\n    \n    return total_sum\n", "solution": "\ndef double_the_difference(lst):\n    '''\n    GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n    in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n    \n    dOuble_ThE_DiFfEReNce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    doUble_the_DIfFERenCe([-1, -2, 0]) == 0\n    DOUblE_tHE_dIfferEncE([9, -2]) == 81\n    doUBle_The_diFfeReNcE([0]) == 0  \n   \n    iF The Input list is emPTY, return 0.\n    '''\n\n    if not lst:\n        return 0\n    \n    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num < 0:\n            continue  # Ignore negative integers\n        if num % 2 != 0:  # Check if the number is odd\n            total_sum += num ** 2  # Add the square of the odd number\n    \n    return total_sum\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for score, guessed in zip(game, guess):\n        if score == guessed:\n            result.append(0)\n        else:\n            result.append(abs(score - guessed))\n    return result\n", "solution": "\ndef compare(game,guess):\n    \"\"\"I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n    event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n    deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n    your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n    YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n    rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n    the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n    \n    \n    exAmple:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n    result = []\n    for score, guessed in zip(game, guess):\n        if score == guessed:\n            result.append(0)\n        else:\n            result.append(abs(score - guessed))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    \n    strongest_extension = None\n    strongest_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        \n        strength = CAP - SM\n        \n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n    ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n    strength of the eXtensIoN Is As FOlLows: LEt CAP be the NUmBER of ThE UPpeRcASe\n    LetteRs in tHe eXTenSion's NamE, aNd LET SM Be tHe number oF LOWercase letTeRS \n    in the extEnsioN's nAme, thE strength Is GivEN by ThE frACtioN CAP - SM. \n    YoU sHOUld finD the stronGeST ExtEnSIoN anD return a STRiNg in ThIs \n    forMat: CLassName.sTrONgestExtenSionname.\n    If ThERe ARE twO or More extensions wiTh thE sAMe strength, yoU SHould\n    cHOoSE THe ONE that comes firSt in the list.\n    For exaMPlE, If yOu aRe GIvEN \"SliceS\" as thE cLAss AnD a list of the\n    extensions: ['SeRviNgSliCes', 'ChEese', 'StUffed'] theN You shoULd\n    return 'SlicEs.ServINGSLICES' SinCe 'servInGslicES' iS the StroNgEsT extENsIoN \n    (ITS strength Is -1).\n    ExAmpLe:\n    foR StrONGest_extensioN('my_ClasS', ['aA', 'BE', 'cC']) == 'my_Class.aA'\n    \"\"\"\n\n    \n    strongest_extension = None\n    strongest_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        \n        strength = CAP - SM\n        \n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    # Convert both strings to lowercase for case insensitivity\n    a = a.lower()\n    b = b.lower()\n    \n    # Check if b is a substring of a\n    if b in a:\n        return True\n    \n    # Check rotations of b\n    n = len(b)\n    for i in range(1, n):\n        # Rotate b by i positions\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    \n    return False\n", "solution": "\ndef cycpattern_check(a , b):\n    \"\"\"You aRe giVen 2 woRds. you neEd to return True iF the secOnd Word oR anY Of ItS rotATioNs is a substring in THE firSt word\n    cycpAttern_check(\"aBcd\",\"abD\") => False\n    cYCpAtTErN_checK(\"hello\",\"eLL\") => True\n    cYCPatTeRN_CheCk(\"WHaSsup\",\"pSus\") => False\n    CycPAttErn_chEck(\"AbAb\",\"BAA\") => True\n    CycPattern_chECK(\"Efef\",\"eeff\") => False\n    cyCpATtern_chEck(\"hiMenSs\",\"simEN\") => True\n\n    \"\"\"\n\n    # Convert both strings to lowercase for case insensitivity\n    a = a.lower()\n    b = b.lower()\n    \n    # Check if b is a substring of a\n    if b in a:\n        return True\n    \n    # Check rotations of b\n    n = len(b)\n    for i in range(1, n):\n        # Rotate b by i positions\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    \n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    # Convert the number to a string and iterate through each character\n    num_str = str(abs(num))  # Take the absolute value for counting\n    even_count = 0\n    odd_count = 0\n    \n    for char in num_str:\n        digit = int(char)  # Convert character to integer\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n", "solution": "\ndef even_odd_count(num):\n    \"\"\"GiveN an iNtegeR. return a tuple tHat haS the nUmber of even And odd DigitS reSPeCtIvelY.\n\n     exaMple:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # Convert the number to a string and iterate through each character\n    num_str = str(abs(num))  # Take the absolute value for counting\n    even_count = 0\n    odd_count = 0\n    \n    for char in num_str:\n        digit = int(char)  # Convert character to integer\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    # Mapping of integers to Roman numeral symbols\n    roman_mapping = {\n        1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v',\n        6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n        20: 'xx', 30: 'xxx', 40: 'xl', 50: 'l',\n        60: 'lx', 70: 'lxx', 80: 'lxxx', 90: 'xc', 100: 'c',\n        200: 'cc', 300: 'ccc', 400: 'cd', 500: 'd',\n        600: 'dc', 700: 'dcc', 800: 'dccc', 900: 'cm', 1000: 'm'\n    }\n    \n    # Convert the number to a string representation\n    num_str = str(number)\n    num_len = len(num_str)\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Process each digit from the right\n    for i in range(num_len):\n        digit = int(num_str[i])  # Get the current digit\n        place_value = 10 ** (num_len - 1 - i)  # Calculate the place value\n        \n        if digit == 0:\n            continue  # Skip if the digit is 0\n        \n        # Check for special cases for 4, 9, and 5-8\n        if digit == 4:\n            result += roman_mapping[place_value] + roman_mapping[place_value * 5]\n        elif digit == 9:\n            result += roman_mapping[place_value] + roman_mapping[place_value * 10]\n        else:\n            # Handle 5-8\n            if digit >= 5:\n                result += roman_mapping[place_value * 5]\n                digit -= 5\n            # Handle 1-3\n            result += roman_mapping[place_value] * digit\n    \n    return result.lower()  # Return in lowercase\n", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n    and return it in lowERCase.\n    restrictioNs: 1 <= num <= 1000\n\n    ExampleS:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Mapping of integers to Roman numeral symbols\n    roman_mapping = {\n        1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v',\n        6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n        20: 'xx', 30: 'xxx', 40: 'xl', 50: 'l',\n        60: 'lx', 70: 'lxx', 80: 'lxxx', 90: 'xc', 100: 'c',\n        200: 'cc', 300: 'ccc', 400: 'cd', 500: 'd',\n        600: 'dc', 700: 'dcc', 800: 'dccc', 900: 'cm', 1000: 'm'\n    }\n    \n    # Convert the number to a string representation\n    num_str = str(number)\n    num_len = len(num_str)\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Process each digit from the right\n    for i in range(num_len):\n        digit = int(num_str[i])  # Get the current digit\n        place_value = 10 ** (num_len - 1 - i)  # Calculate the place value\n        \n        if digit == 0:\n            continue  # Skip if the digit is 0\n        \n        # Check for special cases for 4, 9, and 5-8\n        if digit == 4:\n            result += roman_mapping[place_value] + roman_mapping[place_value * 5]\n        elif digit == 9:\n            result += roman_mapping[place_value] + roman_mapping[place_value * 10]\n        else:\n            # Handle 5-8\n            if digit >= 5:\n                result += roman_mapping[place_value * 5]\n                digit -= 5\n            # Handle 1-3\n            result += roman_mapping[place_value] * digit\n    \n    return result.lower()  # Return in lowercase\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Sort the sides to ensure a is the smallest\n    sides = sorted([a, b, c])\n    a, b, c = sides\n    \n    # Check if the triangle inequality holds\n    if a + b > c:\n        # Check for a right angle\n        if a**2 + b**2 == c**2:\n            return True\n    return False\n", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    GivEn thE lengThs Of the Three Sides of a TriAngle. retURn True If The tHRee\n    Sides form a righT-ANgleD triangle, False oTherwise.\n    A rigHt-angLeD TrIaNGlE is a trIangle in wHIcH ONe aNgLE Is rIgHT aNgle oR \n    90 deGreE.\n    exaMple:\n    rIghT_aNgLE_TRiaNgle(3, 4, 5) == True\n    right_ANGLe_triangle(1, 2, 3) == False\n    '''\n\n    # Sort the sides to ensure a is the smallest\n    sides = sorted([a, b, c])\n    a, b, c = sides\n    \n    # Check if the triangle inequality holds\n    if a + b > c:\n        # Check for a right angle\n        if a**2 + b**2 == c**2:\n            return True\n    return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    best_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word.lower())  # Use lowercase for case insensitivity\n        num_unique_chars = len(unique_chars)\n        \n        if num_unique_chars > max_unique_chars:\n            max_unique_chars = num_unique_chars\n            best_word = word\n        elif num_unique_chars == max_unique_chars:\n            if word < best_word:  # Lexicographically smaller\n                best_word = word\n    \n    return best_word\n", "solution": "\ndef find_max(words):\n    \"\"\"WritE a fuNctioN thAt accEpts a list Of strinGs.\n    THe list conTaiNS dIfFereNT words. ReTurn the word with maXIMum nUmber\n    of uniQue characterS. If muLtIPlE sTRiNgs haVe maximUM nUMBer Of UNIquE\n    cHArActerS, return thE onE WhiCh comEs fIrSt in LEXIcoGraphical ORDEr.\n\n    find_max([\"nAmE\", \"Of\", \"strinG\"]) == \"striNg\"\n    fInd_maX([\"NaMe\", \"eNAm\", \"gAmE\"]) == \"enAM\"\n    finD_maX([\"aAAAaaa\", \"bb\" ,\"Cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    max_unique_chars = 0\n    best_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word.lower())  # Use lowercase for case insensitivity\n        num_unique_chars = len(unique_chars)\n        \n        if num_unique_chars > max_unique_chars:\n            max_unique_chars = num_unique_chars\n            best_word = word\n        elif num_unique_chars == max_unique_chars:\n            if word < best_word:  # Lexicographically smaller\n                best_word = word\n    \n    return best_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_eaten = number + min(need, remaining)\n    remaining_after_eating = max(0, remaining - need)\n    return [total_eaten, remaining_after_eating]\n", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n    but now you need to eat mORE carRots to compLete the day's mEals.\n    yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                    The number OF caRrots LefT aFtER YOur Meals ]\n    if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n    \n    exAMPle:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    VarIables:\n    @number : intEgER\n        The number Of CArRotS tHAT yOu HaVe eatEn.\n    @need : inTeger\n        the number OF cARrots that yOu need to eat.\n    @remaining : IntegeR\n        tHE number oF remaining CArrOts Thet exIst in sToCK\n    \n    ConSTRain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    HaVE fUN :)\n    \"\"\"\n\n    total_eaten = number + min(need, remaining)\n    remaining_after_eating = max(0, remaining - need)\n    return [total_eaten, remaining_after_eating]\n"}
{"task_id": "HumanEval/160", "completion": "\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list must be equal to the length of operand list minus one.\")\n    \n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            if operand[i + 1] == 0:\n                raise ValueError(\"Division by zero is not allowed.\")\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n        else:\n            raise ValueError(f\"Invalid operator: {operator[i]}\")\n    \n    return result\n", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n    THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n    eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n    ThE BasIc algEbrA oPeRATIonS:\n    Addition ( + ) \n    sUBTraction ( - ) \n    MuLtIPlicatiOn ( * ) \n    FloOr dIvisiON ( // ) \n    EXpoNEntIaTioN ( ** ) \n\n    examPle:\n    operator['+', '*', '-']\n    ArRAY = [2, 3, 4, 5]\n    resulT = 2 + 3 * 4 - 5\n    => result = 9\n\n    NoTe:\n        tHE leNgTH oF operator list is EqUAL tO tHe LengtH of operand list mInus one.\n        OPErANd is a list of of nOn-neGative InTEgERS.\n        OpEraTor list has At leAsT One operator, aND operand list Has at lEAsT TWO oPERands.\n\n    \"\"\"\n\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list must be equal to the length of operand list minus one.\")\n    \n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            if operand[i + 1] == 0:\n                raise ValueError(\"Division by zero is not allowed.\")\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n        else:\n            raise ValueError(f\"Invalid operator: {operator[i]}\")\n    \n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    if not any(char.isalpha() for char in s):\n        result.reverse()\n    \n    return ''.join(result)\n", "solution": "\ndef solve(s):\n    \"\"\"You aRe giVen a sTriNg s.\n    if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n    OTHerwIse keep it aS it is.\n    If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n    tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n    EXaMPLEs\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"Ab\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    if not any(char.isalpha() for char in s):\n        result.reverse()\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    \n    if not text:\n        return None\n    \n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the string\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Return the hexadecimal representation of the hash\n    return md5_hash.hexdigest()\n", "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n    if 'text' is aN emPTy StRing, return nOne.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    import hashlib\n    \n    if not text:\n        return None\n    \n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the string\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Return the hexadecimal representation of the hash\n    return md5_hash.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # Generate even integers between a and b\n    even_integers = [x for x in range(a, b + 1) if x % 2 == 0]\n    \n    return even_integers\n", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n    aNd b, in asCEndIng order.\n\n    For exAMPle:\n    gEnerate_intEgers(2, 8) => [2, 4, 6, 8]\n    generatE_inteGeRS(8, 2) => [2, 4, 6, 8]\n    gEnERaTe_intEgers(10, 14) => []\n    \"\"\"\n\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # Generate even integers between a and b\n    even_integers = [x for x in range(a, b + 1) if x % 2 == 0]\n    \n    return even_integers\n"}
