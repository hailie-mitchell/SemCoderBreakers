{"task_id": "HumanEval/0", "solution": "from typing import List"}
{"task_id": "HumanEval/1", "solution": "from typing import List"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truNcatE_numbEr(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truNcatE_numbEr(3.5)\n    0.5\n    \"\"\"\n\n\n    # Extract the decimal part using modulus\n    return number % 1"}
{"task_id": "HumanEval/3", "solution": "from typing import List"}
{"task_id": "HumanEval/4", "solution": "from typing import List"}
{"task_id": "HumanEval/5", "solution": "from typing import List"}
{"task_id": "HumanEval/6", "solution": "from typing import List"}
{"task_id": "HumanEval/7", "solution": "from typing import List"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef makE_palIndroMe(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makE_palIndroMe('')\n    ''\n    >>> makE_palIndroMe('cat')\n    'catac'\n    >>> makE_palIndroMe('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n\n\n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            prefix = string[:i]\n            return string + prefix[::-1]\n\n    return string  # In case of an empty string, return the empty string"}
{"task_id": "HumanEval/11", "solution": "from typing import List"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional"}
{"task_id": "HumanEval/13", "solution": "\n\ndef greAtesT_commOn_dIvisoR(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greAtesT_commOn_dIvisoR(3, 5)\n    1\n    >>> greAtesT_commOn_dIvisoR(25, 15)\n    5\n    \"\"\"\n\n\n\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List"}
{"task_id": "HumanEval/15", "solution": "\n\ndef strIng_sEquenCe(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> strIng_sEquenCe(0)\n    '0'\n    >>> strIng_sEquenCe(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n\n    if n < 0:\n        return \"\"  # Handle negative input gracefully\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "solution": "\n\ndef couNt_diStincT_chAractErs(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> couNt_diStincT_chAractErs('xyzXYZ')\n    3\n    >>> couNt_diStincT_chAractErs('Jerry')\n    4\n    \"\"\"\n\n\n    # Convert the string to lowercase\n    lower_string = string.lower()\n    # Use a set to find distinct characters\n    distinct_characters = set(lower_string)\n    # Return the count of distinct characters\n    return len(distinct_characters)"}
{"task_id": "HumanEval/17", "solution": "from typing import List"}
{"task_id": "HumanEval/18", "solution": "\n\ndef how_Many_Times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_Many_Times('', 'a')\n    0\n    >>> how_Many_Times('aaa', 'a')\n    3\n    >>> how_Many_Times('aaaa', 'aa')\n    3\n    \"\"\"\n\n\n    occurences = 0\n\n    substring_length = len(substring)\n    \n    if substring_length == 0:\n        return 0\n    \n    # Iterate through the string to find occurrences\n    for i in range(len(string) - substring_length + 1):\n        if string[i:i + substring_length] == substring:\n            occurences += 1\n            \n    return occurences"}
{"task_id": "HumanEval/19", "solution": "from typing import List"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple"}
{"task_id": "HumanEval/21", "solution": "from typing import List"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strLen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strLen('')\n    0\n    >>> strLen('abc')\n    3\n    \"\"\"\n\n\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "\n\ndef larGest_DivisOr(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> larGest_DivisOr(15)\n    5\n    \"\"\"\n\n\n\n    if n <= 1:\n        return 0  # or raise an exception, depending on the requirement\n    \n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 0  # This line should never be reached, but it's here for completeness"}
{"task_id": "HumanEval/25", "solution": "from typing import List"}
{"task_id": "HumanEval/26", "solution": "from typing import List"}
{"task_id": "HumanEval/27", "solution": "\n\ndef fliP_casE(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> fliP_casE('Hello')\n    'hELLO'\n    \"\"\"\n\n\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)  # Non-alphabetic characters remain unchanged\n    return ''.join(result)"}
{"task_id": "HumanEval/28", "solution": "from typing import List"}
{"task_id": "HumanEval/29", "solution": "from typing import List"}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_PosiTive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_PosiTive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_PosiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_pRime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_pRime(6)\n    False\n    >>> is_pRime(101)\n    True\n    >>> is_pRime(11)\n    True\n    >>> is_pRime(13441)\n    True\n    >>> is_pRime(61)\n    True\n    >>> is_pRime(4)\n    False\n    >>> is_pRime(1)\n    False\n    \"\"\"\n\n    if n <= 1: return False\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: n_sqrt += 1\n\n    \n    for i in range(2, n_sqrt + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math"}
{"task_id": "HumanEval/33", "solution": "\n\ndef sorT_thiRd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sorT_thiRd([1, 2, 3])\n    [1, 2, 3]\n    >>> sorT_thiRd([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n\n    third_sorted = sorted(third)\n\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(third_sorted.pop(0))\n        else:\n            result.append(l[i])\n\n    return result"}
{"task_id": "HumanEval/34", "solution": "\n\ndef uniQue(l: list):\n    \"\"\"Return sorted uniQue elements in a list\n    >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n\n    # Use a set to get unique elements\n    unique_elements = set(l)\n    # Convert the set back to a list and sort it\n    sorted_unique_elements = sorted(unique_elements)\n    return sorted_unique_elements"}
{"task_id": "HumanEval/35", "solution": "\n\ndef max_ElemEnt(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_ElemEnt([1, 2, 3])\n    3\n    >>> max_ElemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n\n    if not l:  # Check if the list is empty\n        return None  # or raise an exception\n    max_value = l[0]  # Start with the first element\n    for element in l:\n        if element > max_value:\n            max_value = element  # Update max_value if a larger element is found\n    return max_value"}
{"task_id": "HumanEval/36", "solution": "\n\ndef fizZ_buzZ(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizZ_buzZ(50)\n    0\n    >>> fizZ_buzZ(78)\n    2\n    >>> fizZ_buzZ(79)\n    3\n    \"\"\"\n\n    cnt = 0\n    for i in range(n):\n\n        if (i % 11 == 0 or i % 13 == 0):\n            cnt += str(i).count('7')\n    return cnt"}
{"task_id": "HumanEval/37", "solution": "\n\ndef sorT_eveN(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sorT_eveN([1, 2, 3])\n    [1, 2, 3]\n    >>> sorT_eveN([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n\n    sorted_even = sorted(even)\n    \n    # Create the result list\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even[i // 2])\n        else:\n            result.append(l[i])\n    \n    return result"}
{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decOde_cYclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n\n    \n    # Decode each group\n    decoded_groups = []\n    for group in groups:\n        if len(group) == 3:\n            decoded_groups.append(group[1:] + group[0])  # Cycle back\n        else:\n            decoded_groups.append(group)  # Keep as is\n    \n    # Join the decoded groups to form the final decoded string\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/39", "solution": "\n\ndef priMe_fiB(n: int):\n    \"\"\"\n    priMe_fiB returns n-th number that is a Fibonacci number and it's also prime.\n    >>> priMe_fiB(1)\n    2\n    >>> priMe_fiB(2)\n    3\n    >>> priMe_fiB(3)\n    5\n    >>> priMe_fiB(4)\n    13\n    >>> priMe_fiB(5)\n    89\n    \"\"\"\n\n\n    import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n        return True\n\n    def fibonacci_number(n):\n        \"\"\"Return the n-th Fibonacci number.\"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 0\n    while count < n:\n        fib_number = fibonacci_number(i)\n        if miller_rabin(fib_number):\n            count += 1\n        i += 1\n\n    return fib_number"}
{"task_id": "HumanEval/40", "solution": "\n\ndef triPles_Sum_to_ZerO(l: list):\n    \"\"\"\n    triPles_Sum_to_ZerO takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triPles_Sum_to_ZerO([1, 3, 5, 0])\n    False\n    >>> triPles_Sum_to_ZerO([1, 3, -2, 1])\n    True\n    >>> triPles_Sum_to_ZerO([1, 2, 3, 7])\n    False\n    >>> triPles_Sum_to_ZerO([2, 4, -5, 3, 9, 7])\n    True\n    >>> triPles_Sum_to_ZerO([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n\n            for k in range(len(l)):\n                if i != j and i != k and j != k:  # Ensure distinct indices\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n    return False"}
{"task_id": "HumanEval/41", "solution": "\n\ndef car_Race_ColliSioN(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n\n    if n < 2:\n        return 0  # No collisions possible with fewer than 2 cars\n    \n    # Each car can collide with every other car in the other lane\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "solution": "\n\ndef incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "\n\ndef paiRs_suM_to_zeRo(l):\n    \"\"\"\n    paiRs_suM_to_zeRo takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> paiRs_suM_to_zeRo([1, 3, 5, 0])\n    False\n    >>> paiRs_suM_to_zeRo([1, 3, -2, 1])\n    False\n    >>> paiRs_suM_to_zeRo([1, 2, 3, 7])\n    False\n    >>> paiRs_suM_to_zeRo([2, 4, -5, 3, 5, 7])\n    True\n    >>> paiRs_suM_to_zeRo([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "\n\ndef chaNge_bAse(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> chaNge_bAse(8, 3)\n    '22'\n    >>> chaNge_bAse(8, 2)\n    '1000'\n    >>> chaNge_bAse(7, 2)\n    '111'\n    \"\"\"\n\n\n    if x == 0: return \"0\"\n    ret = \"\"\n\n\n    while x > 0:\n        remainder = x % base\n        ret = str(remainder) + ret  # Prepend the remainder to the result\n        x //= base  # Integer division\n\n    return ret"}
{"task_id": "HumanEval/45", "solution": "\n\ndef triAnglE_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triAnglE_area(5, 3)\n    7.5\n    \"\"\"\n\n\n    if a < 0 or h < 0:\n        raise ValueError(\"Lengths must be non-negative.\")\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialize the first four Fib4 numbers\n    fib4_numbers = [0, 0, 2, 0]\n\n    # Compute the Fib4 numbers iteratively\n    for i in range(4, n + 1):\n        next_fib4 = fib4_numbers[i - 1] + fib4_numbers[i - 2] + fib4_numbers[i - 3] + fib4_numbers[i - 4]\n        fib4_numbers.append(next_fib4)\n\n    return fib4_numbers[n]"}
{"task_id": "HumanEval/47", "solution": "\n\ndef medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n\n    sorted_l = sorted(l)\n\n    n = len(sorted_l)\n    \n    if n % 2 == 1:\n        # Odd length: return the middle element\n        return sorted_l[n // 2]\n    else:\n        # Even length: return the average of the two middle elements\n        mid1 = sorted_l[n // 2 - 1]\n        mid2 = sorted_l[n // 2]\n        return (mid1 + mid2) / 2"}
{"task_id": "HumanEval/48", "solution": "\n\ndef is_pAlinDrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_pAlinDrome('')\n    True\n    >>> is_pAlinDrome('aba')\n    True\n    >>> is_pAlinDrome('aaaaa')\n    True\n    >>> is_pAlinDrome('zbcd')\n    False\n    \"\"\"\n\n\n    # Convert the string to lowercase and filter out non-alphanumeric characters\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n    \n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/49", "solution": "\n\ndef modP(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modP(3, 5)\n    3\n    >>> modP(1101, 101)\n    2\n    >>> modP(0, 101)\n    1\n    >>> modP(3, 11)\n    8\n    >>> modP(100, 101)\n    1\n    \"\"\"\n\n\n    res, x = 1, 2\n    while n != 0:\n\n        if n % 2 != 0:  # If n is odd\n            res = (res * x) % p\n        x = (x * x) % p  # Square x\n        n //= 2  # Divide n by 2\n    return res"}
{"task_id": "HumanEval/50", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decOde_sHift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "\n\ndef remOve_vOwels(text):\n    \"\"\"\n    remOve_vOwels is a function that takes string and returns string without vowels.\n    >>> remOve_vOwels('')\n    ''\n    >>> remOve_vOwels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remOve_vOwels('abcdef')\n    'bcdf'\n    >>> remOve_vOwels('aaaaa')\n    ''\n    >>> remOve_vOwels('aaBAA')\n    'B'\n    >>> remOve_vOwels('zbcd')\n    'zbcd'\n    \"\"\"\n\n\n    vowels = 'aeiouAEIOU'\n    result = []\n    \n    for char in text:\n        if char not in vowels:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/52", "solution": "\n\ndef belOw_thReshoLd(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> belOw_thReshoLd([1, 2, 4, 10], 100)\n    True\n    >>> belOw_thReshoLd([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n\n    for number in l:\n        if number >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "\n\ndef samE_chaRs(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> samE_chaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> samE_chaRs('abcd', 'dddddddabc')\n    True\n    >>> samE_chaRs('dddddddabc', 'abcd')\n    True\n    >>> samE_chaRs('eabcd', 'dddddddabc')\n    False\n    >>> samE_chaRs('abcd', 'dddddddabce')\n    False\n    >>> samE_chaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n\n    # Normalize the strings by converting to lowercase and sorting\n    normalized_s0 = ''.join(sorted(s0.lower()))\n    normalized_s1 = ''.join(sorted(s1.lower()))\n    \n    # Check if the normalized strings are equal\n    return normalized_s0 == normalized_s1"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n\n    if n == 0: return 0\n    if n <= 2: return 1\n\n\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "solution": "\n\ndef corRect_BrackEtiNg(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corRect_BrackEtiNg(\"<\")\n    False\n    >>> corRect_BrackEtiNg(\"<>\")\n    True\n    >>> corRect_BrackEtiNg(\"<<><>>\")\n    True\n    >>> corRect_BrackEtiNg(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n\n        if x == '<':\n            cnt += 1\n        elif x == '>':\n            cnt -= 1\n            if cnt < 0:\n                return False\n    return cnt == 0"}
{"task_id": "HumanEval/57", "solution": "\n\ndef monOtonIc(l: list):\n    \"\"\"Return True is list elements are monOtonIcally increasing or decreasing.\n    >>> monOtonIc([1, 2, 4, 20])\n    True\n    >>> monOtonIc([1, 20, 4, 10])\n    False\n    >>> monOtonIc([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    \n    return inc or dec"}
{"task_id": "HumanEval/58", "solution": "\n\ndef comMon(l1: list, l2: list):\n    \"\"\"Return sorted unique comMon elements for two lists.\n    >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> comMon([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n\n    # Convert lists to sets to get unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert to list and sort it\n    result = sorted(common_elements)\n    \n    return result"}
{"task_id": "HumanEval/59", "solution": "\n\ndef larGest_Prime_FacTor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> larGest_Prime_FacTor(13195)\n    29\n    >>> larGest_Prime_FacTor(2048)\n    2\n    \"\"\"\n\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n\n            for j in range(i * i, n + 1, i):\n                isprime[j] = False\n\n    largest_prime_factor = None\n    for i in range(2, n + 1):\n        if isprime[i] and n % i == 0:\n            largest_prime_factor = i\n\n    return largest_prime_factor"}
{"task_id": "HumanEval/60", "solution": "\n\ndef sum_To_n(n: int):\n    \"\"\"sum_To_n is a function that sums numbers from 1 to n.\n    >>> sum_To_n(30)\n    465\n    >>> sum_To_n(100)\n    5050\n    >>> sum_To_n(5)\n    15\n    >>> sum_To_n(10)\n    55\n    >>> sum_To_n(1)\n    1\n    \"\"\"\n\n\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "solution": "\n\ndef corRect_BrackEtiNg(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corRect_BrackEtiNg(\"(\")\n    False\n    >>> corRect_BrackEtiNg(\"()\")\n    True\n    >>> corRect_BrackEtiNg(\"(()())\")\n    True\n    >>> corRect_BrackEtiNg(\")(()\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n\n        if x == '(':\n            cnt += 1\n        elif x == ')':\n            cnt -= 1\n            if cnt < 0:\n                return False\n    return cnt == 0"}
{"task_id": "HumanEval/62", "solution": "\n\ndef derIvatIve(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derIvatIve of this polynomial in the same form.\n    >>> derIvatIve([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derIvatIve([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n    if len(xs) < 2:\n        return []\n    \n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    \n    return result"}
{"task_id": "HumanEval/63", "solution": "\n\ndef fibFib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibFib(0) == 0\n    fibFib(1) == 0\n    fibFib(2) == 1\n    fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n    >>> fibFib(1)\n    0\n    >>> fibFib(5)\n    4\n    >>> fibFib(8)\n    24\n    \"\"\"\n\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n\n        return 1\n\n    # Initialize the first three FibFib numbers\n    fibFib_0, fibFib_1, fibFib_2 = 0, 0, 1\n\n    # Start calculating from the third FibFib number\n    for i in range(3, n + 1):\n        next_fibFib = fibFib_0 + fibFib_1 + fibFib_2\n        # Update the values for the next iteration\n        fibFib_0, fibFib_1, fibFib_2 = fibFib_1, fibFib_2, next_fibFib\n\n    return fibFib_2"}
{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowEls_cOunt(s):\n    \"\"\"Write a function vowEls_cOunt which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowEls_cOunt(\"abcde\")\n    2\n    >>> vowEls_cOunt(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n\n\n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for char in s:\n        if char in vowels:\n            count += 1\n\n    # Check if the last character is 'y' and it's a vowel\n    if s[-1] == 'y' and 'a' in vowels and 'e' in vowels and 'i' in vowels and 'o' in vowels and 'u' in vowels:\n        count += 1\n\n    return count"}
{"task_id": "HumanEval/65", "solution": "\ndef cirCulaR_shifT(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> cirCulaR_shifT(12, 1)\n    \"21\"\n    >>> cirCulaR_shifT(12, 2)\n    \"12\"\n    \"\"\"\n\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n\n    \n    # Calculate the effective shift\n    effective_shift = shift % len(s)\n    \n    # Perform the circular shift\n    shifted_digits = s[-effective_shift:] + s[:-effective_shift]\n    \n    return shifted_digits"}
{"task_id": "HumanEval/66", "solution": "\ndef digItSuM(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digItSuM(\"\") => 0\n        digItSuM(\"abAB\") => 131\n        digItSuM(\"abcCd\") => 67\n        digItSuM(\"helloE\") => 69\n        digItSuM(\"woArBld\") => 131\n        digItSuM(\"aAaaaXa\") => 153\n    \"\"\"\n\n\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum"}
{"task_id": "HumanEval/67", "solution": "\ndef fruIt_diStribUtiOn(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruIt_diStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruIt_diStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruIt_diStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruIt_diStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n\n    words = s.split(\" \")\n\n    \n    # Extract the number of apples and oranges\n    apples = int(words[0])\n    oranges = int(words[4])  # Assuming the format is always \"X apples and Y oranges\"\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"task_id": "HumanEval/68", "solution": "\ndef pluCk(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluCk one of the nodes and return it.\n    The pluCked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The pluCked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n\n    if all(val % 2 == 1 for val in arr): return []\n\n\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if value < smallest_even:  # Check if it's smaller than the current smallest\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even:  # If it's equal, check the index\n                if index < smallest_index:\n                    smallest_index = index\n\n    return [smallest_even, smallest_index] if smallest_index != -1 else []"}
{"task_id": "HumanEval/69", "solution": "\ndef seaRch(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        seaRch([4, 1, 2, 2, 3, 1]) == 2\n        seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        seaRch([5, 5, 4, 4, 4]) == -1\n    '''\n\n\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n\n        count[num] += 1\n\n    max_num = -1\n    for num in count:\n        if num <= count[num] and num > max_num:\n            max_num = num\n\n    return max_num"}
{"task_id": "HumanEval/70", "solution": "\ndef strAnge_Sort_lIst(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strAnge_Sort_lIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strAnge_Sort_lIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strAnge_Sort_lIst([]) == []\n    '''\n\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    \n    # If there's an odd number of elements, we need to add the middle element\n    if i == j:\n        ans.append(sorted_list[i])\n    \n    return ans"}
{"task_id": "HumanEval/71", "solution": "\ndef triAnglE_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triAnglE_area(3, 4, 5) == 6.00\n    triAnglE_area(1, 2, 10) == -1\n    '''\n\n\n\n    # Check if the sides can form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "\ndef wilL_it_fLy(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    wilL_it_fLy([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    wilL_it_fLy([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    wilL_it_fLy([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    wilL_it_fLy([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n\n    \n    # Check if the list is palindromic\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    # Check if the list is balanced\n    def is_balanced(lst):\n        return len(lst) % 2 == 0\n    \n    # Calculate the sum of the list\n    total_sum = sum(q)\n    \n    # Check if the list is palindromic and balanced\n    if is_palindrome(q) and is_balanced(q):\n        # Check if the sum is less than or equal to w\n        return total_sum <= w\n    \n    return False"}
{"task_id": "HumanEval/73", "solution": "\ndef smaLlesT_chanGe(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smaLlesT_chanGe([1,2,3,5,4,7,9,6]) == 4\n    smaLlesT_chanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n    smaLlesT_chanGe([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt"}
{"task_id": "HumanEval/74", "solution": "\ndef totAl_maTch(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totAl_maTch([], []) \u279e []\n    totAl_maTch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    totAl_maTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    totAl_maTch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    totAl_maTch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 < total_chars1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "\ndef is_mUltiPly_prIme(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_mUltiPly_prIme(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n\n                isprime[j] = False\n\n    primes = [i for i in range(2, a + 1) if isprime[i]]\n\n    # Check for combinations of 3 primes\n    for p1 in primes:\n        for p2 in primes:\n            if p1 == p2: continue  # Avoid using the same prime\n            for p3 in primes:\n                if p3 == p1 or p3 == p2: continue  # Avoid using the same prime\n                if p1 * p2 * p3 == a:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/76", "solution": "\ndef is_sImplE_poweR(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_sImplE_poweR(1, 4) => true\n    is_sImplE_poweR(2, 2) => true\n    is_sImplE_poweR(8, 2) => true\n    is_sImplE_poweR(3, 2) => false\n    is_sImplE_poweR(3, 1) => false\n    is_sImplE_poweR(5, 3) => false\n    \"\"\"\n\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n\n\n    # Check if x is a perfect square\n    if x < 0:\n        return False\n\n    # Check for positive n\n    if n > 0:\n        k = 0\n        while n ** k < x:\n            k += 1\n        return n ** k == x\n\n    # Check for negative n\n    if n < 0:\n        k = 0\n        while abs(n) ** k < abs(x):\n            k += 1\n        return abs(n) ** k == abs(x)\n\n    return False"}
{"task_id": "HumanEval/77", "solution": "\ndef iscUbe(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscUbe(1) ==> True\n    iscUbe(2) ==> False\n    iscUbe(-1) ==> True\n    iscUbe(64) ==> True\n    iscUbe(0) ==> True\n    iscUbe(180) ==> False\n    '''\n\n\n    if a == 0:\n        return True\n    a = abs(a)  # Take the absolute value to handle negative cases\n    n = 0\n    while n**3 < a:\n        n += 1\n    return n**3 == a"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_Key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n\n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = {2, 3, 5, 7, 11, 13}  # 11 and 13 are in decimal\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Convert hexadecimal digits to decimal\n    for char in num:\n        if char.isdigit():\n            decimal_value = int(char)\n        else:\n            decimal_value = ord(char) - ord('A') + 10  # A=10, B=11, ..., F=15\n        \n        # Check if the decimal value is a prime\n        if decimal_value in prime_hex_digits:\n            prime_count += 1\n            \n    return prime_count"}
{"task_id": "HumanEval/79", "solution": "\ndef decImal_To_binAry(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decImal_To_binAry(15)   # returns \"db1111db\"\n    decImal_To_binAry(32)   # returns \"db100000db\"\n    \"\"\"\n\n\n    # Convert decimal to binary using the built-in bin function\n    binary_str = bin(decimal)[2:]  # Skip the '0b' prefix\n    # Prepend 'db' and append 'db' to the binary string\n    return 'db' + binary_str + 'db'"}
{"task_id": "HumanEval/80", "solution": "\ndef is_hAppy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_hAppy(a) => False\n    is_hAppy(aa) => False\n    is_hAppy(abcd) => True\n    is_hAppy(aabb) => False\n    is_hAppy(adb) => True\n    is_hAppy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n\n        # Get the three consecutive characters\n        substring = s[i:i+3]\n        # Check if all characters are distinct\n        if len(set(substring)) == 3:\n            return True\n    return False"}
{"task_id": "HumanEval/81", "solution": "\ndef numEricAl_letTer_Grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n\n    # Convert each GPA to a letter grade\n    return [to_letter_grade(gpa) for gpa in grades]"}
{"task_id": "HumanEval/82", "solution": "\ndef priMe_leNgth(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    priMe_leNgth('Hello') == True\n    priMe_leNgth('abcdcba') == True\n    priMe_leNgth('kittens') == True\n    priMe_leNgth('orange') == False\n    \"\"\"\n\n    def is_prime(a):\n\n        if a < 2:\n            return False\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "solution": "\ndef staRts_oNe_endS(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n\n\n    if n == 1:\n        return 2  # 1 and 10\n    elif n == 2:\n        return 10  # 11, 12, ..., 19\n    else:\n        # For n > 2, the count of numbers that start or end with 1 is:\n        # (10^(n-1) - 10^(n-2)) + (10^(n-1) - 10^(n-2)) - 10\n        # This simplifies to:\n        # 2 * (10^(n-1) - 10^(n-2)) - 10\n        # The first term is 2 * (10^n - 10^(n-1)) = 2 * 10^(n-1) = 20^(n-1)\n        # The second term is 10^n - 10^(n-1) = 10^n - 10 = 9 * 10^(n-1)\n        # Thus, the count is:\n        return 20**(n-1) - 9 * 10**(n-1) + 10"}
{"task_id": "HumanEval/84", "solution": "\ndef solVe(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n\n\n    # Convert N to binary and sum the digits\n    binary_representation = bin(N)[2:]  # Skip the '0b' prefix\n    digit_sum = sum(int(digit) for digit in binary_representation)\n    \n    # Convert the sum back to binary\n    result_binary = bin(digit_sum)[2:]  # Skip the '0b' prefix\n    return result_binary"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n\n    s = 0\n\n    for i in range(1, len(lst), 2):  # Start from index 1 and step by 2\n        if lst[i] % 2 == 0:  # Check if the element is even\n            s += lst[i]  # Add to sum if it is even\n    return s"}
{"task_id": "HumanEval/86", "solution": "\ndef antI_shuFfle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antI_shuFfle('Hi') returns 'Hi'\n    antI_shuFfle('hello') returns 'ehllo'\n    antI_shuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n\n    # Split the string into words\n    words = s.split()\n    \n    # Process each word\n    ordered_words = []\n    for word in words:\n        # Sort the characters in the word\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    # Join the ordered words back into a single string\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "solution": "\ndef get_Row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_Row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_Row([], 1) == []\n    get_Row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n\n        for j, y in enumerate(l):\n            if y == x:\n                res.append((i, j))\n    \n    # Sort by row (first element of the tuple) and then by column (second element)\n    res.sort(key=lambda t: (t[0], -t[1]))\n    \n    return res"}
{"task_id": "HumanEval/88", "solution": "\ndef sorT_arrAy(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sorT_arrAy([]) => []\n    * sorT_arrAy([5]) => [5]\n    * sorT_arrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sorT_arrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n\n\n    if not array:\n        return []\n    \n    # Calculate the sum of the first and last elements\n    first = array[0]\n    last = array[-1]\n    total_sum = first + last\n    \n    # Create a sorted copy of the array\n    sorted_array = sorted(array)\n    \n    # If the sum is even, reverse the sorted array\n    if total_sum % 2 == 0:\n        sorted_array.reverse()\n    \n    return sorted_array"}
{"task_id": "HumanEval/89", "solution": "\ndef encRypt(s):\n    \"\"\"Create a function encRypt that takes a string as an argument and\n    returns a string encRypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encRypt('hi') returns 'lm'\n    encRypt('asdfghjkl') returns 'ewhjklnop'\n    encRypt('gf') returns 'kj'\n    encRypt('et') returns 'ix'\n    \"\"\"\n\n\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_string = []\n    \n    for char in s:\n        if char.islower():  # Check if the character is a lowercase letter\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            # Calculate the new index for the rotated alphabet\n            new_index = (index + 2) % 26\n            # Append the new character to the encrypted string\n            encrypted_string.append(alphabet[new_index])\n        else:\n            # If the character is not a lowercase letter, keep it unchanged\n            encrypted_string.append(char)\n    \n    return ''.join(encrypted_string)"}
{"task_id": "HumanEval/90", "solution": "\ndef nexT_smaLlest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function nexT_smaLlest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    nexT_smaLlest([1, 2, 3, 4, 5]) == 2\n    nexT_smaLlest([5, 1, 4, 3, 2]) == 2\n    nexT_smaLlest([]) == None\n    nexT_smaLlest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n\n    unique_elements = list(set(sorted_list))\n    \n    if len(unique_elements) < 2: return None\n    \n    return unique_elements[1]"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bOred(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bOred(\"Hello world\")\n    0\n    >>> is_bOred(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n\n    # Split the string into sentences\n    sentences = S.split('.') + S.split('!') + S.split('?')\n    \n    # Initialize a counter for boredoms\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Strip whitespace and check if the sentence starts with \"I\"\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n            \n    return boredom_count"}
{"task_id": "HumanEval/92", "solution": "\ndef any_Int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_Int(5, 2, 7) \u279e True\n    \n    any_Int(3, 2, 2) \u279e False\n\n    any_Int(3, -2, 1) \u279e True\n    \n    any_Int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n\n    # Check if all inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    \n    # Calculate the sum of the other two numbers\n    sum_xy = x + y\n    sum_xz = x + z\n    sum_yz = y + z\n    \n    # Check if any of the sums equals the third number\n    if x == sum_xy or y == sum_xz or z == sum_yz:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/93", "solution": "\ndef encOde(message):\n    \"\"\"\n    Write a function that takes a message, and encOdes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encOde('test')\n    'TGST'\n    >>> encOde('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n\n\n    vowels = \"aeiouAEIOU\"\n    vowel_mapping = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 's', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'S', 'U': 'W'\n    }\n\n    result = []\n\n    for char in message:\n        if char in vowels:\n            # Replace vowel with the letter 2 places ahead\n            new_char = vowel_mapping[char]\n            result.append(new_char)\n        else:\n            # Swap case and keep the original character\n            swapped_char = switch_case(char)\n            result.append(swapped_char)\n\n    return ''.join(result)"}
{"task_id": "HumanEval/94", "solution": "\n\ndef skjKasdKd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0  # or return None if preferred\n\n    # Calculate the sum of the digits of the largest prime\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits"}
{"task_id": "HumanEval/95", "solution": "\ndef cheCk_diCt_casE(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    cheCk_diCt_casE({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    cheCk_diCt_casE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    cheCk_diCt_casE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    cheCk_diCt_casE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    cheCk_diCt_casE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n\n        if not isinstance(k, str):\n            return False\n        if k.islower():\n            lower = True\n        elif k.isupper():\n            upper = True\n        else:\n            return False\n    return lower or upper"}
{"task_id": "HumanEval/96", "solution": "\ndef couNt_up_To(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    couNt_up_To(5) => [2,3]\n    couNt_up_To(11) => [2,3,5,7]\n    couNt_up_To(0) => []\n    couNt_up_To(20) => [2,3,5,7,11,13,17,19]\n    couNt_up_To(1) => []\n    couNt_up_To(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i * i, n + 1, i):\n                isprime[j] = False\n    return ans"}
{"task_id": "HumanEval/97", "solution": "\ndef mulTiplY(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    mulTiplY(148, 412) should return 16.\n    mulTiplY(19, 28) should return 72.\n    mulTiplY(2020, 1851) should return 0.\n    mulTiplY(14,-15) should return 20.\n    \"\"\"\n\n\n    # Extract the unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "solution": "\ndef couNt_upPer(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    couNt_upPer('aBCdEf') returns 1\n    couNt_upPer('abcdefg') returns 0\n    couNt_upPer('dBBE') returns 0\n    \"\"\"\n\n    cnt = 0\n    for i in range(0, len(s), 2):\n\n        if s[i].isupper() and s[i] in 'AEIOU':\n            cnt += 1\n    return cnt"}
{"task_id": "HumanEval/99", "solution": "\ndef cloSest_IntegEr(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> cloSest_IntegEr(\"10\")\n    10\n    >>> cloSest_IntegEr(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example cloSest_IntegEr(\"14.5\") should\n    return 15 and cloSest_IntegEr(\"-14.5\") should return -15.\n    '''\n\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n\n        else:\n            return int(val) + 1 if val > 0 else int(val) - 1\n\n    # Convert the string to a float\n    float_value = float(value)\n    \n    # Use the rounding function to get the closest integer\n    return rounding(float_value)"}
{"task_id": "HumanEval/100", "solution": "\ndef makE_a_piLe(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makE_a_piLe(3)\n    [3, 5, 7]\n    \"\"\"\n\n\n    ans, num = [], n\n\n    for i in range(n):\n        ans.append(num)\n        if num % 2 == 0:  # even\n            num += 1\n        else:  # odd\n            num += 2\n    return ans"}
{"task_id": "HumanEval/101", "solution": "\ndef worDs_stRing(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    worDs_stRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    worDs_stRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n\n    # Strip leading/trailing whitespace and split by commas and spaces\n    words = s.strip().replace(',', ' ').split()\n    return words"}
{"task_id": "HumanEval/102", "solution": "\ndef choOse_nUm(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choOse_nUm(12, 15) = 14\n    choOse_nUm(13, 12) = -1\n    \"\"\"\n\n\n\n    # Ensure x and y are positive\n    if x <= 0 or y <= 0:\n        return -1\n    \n    # Ensure x is less than or equal to y\n    if x > y:\n        return -1\n    \n    # Start from y and check for even numbers\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number found\n    return -1"}
{"task_id": "HumanEval/103", "solution": "\ndef rouNded_Avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rouNded_Avg(1, 5) => \"0b11\"\n    rouNded_Avg(7, 5) => -1\n    rouNded_Avg(10, 20) => \"0b1111\"\n    rouNded_Avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n\n\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    \n    # Calculate the average\n    average = total_sum / count\n    \n    # Round the average to the nearest integer\n    rounded_average = round(average)\n    \n    # Convert to binary and return as a string\n    return f\"0b{rounded_average:b}\""}
{"task_id": "HumanEval/104", "solution": "\ndef uniQue_dIgits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniQue_dIgits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> uniQue_dIgits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n\n    def judge(x):\n        for ch in str(x):\n\n            if int(ch) % 2 == 0:\n                return False\n        return True\n\n    unique_numbers = set()\n    \n    for number in x:\n        if judge(number):\n            unique_numbers.add(number)\n    \n    return sorted(unique_numbers)"}
{"task_id": "HumanEval/105", "solution": "\ndef by_lEngtH(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      elif x == 9:\n        return \"Nine\"\n      else:\n        return \"\"\n\n    # Filter and sort the valid numbers\n    valid_numbers = [num for num in arr if 1 <= num <= 9]\n    valid_numbers.sort(reverse=True)\n\n    # Convert numbers to words\n    result = [to_word(num) for num in valid_numbers]\n\n    return result"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # even\n            # Calculate factorial\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:  # odd\n            # Calculate sum of numbers from 1 to i\n            result.append(sum(range(1, i + 1)))\n\n    return result"}
{"task_id": "HumanEval/107", "solution": "\ndef eveN_odd_PalinDroMe(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n\n            if i % 2 == 0:\n                even_cnt += 1\n            else:\n                odd_cnt += 1\n\n    return (even_cnt, odd_cnt)"}
{"task_id": "HumanEval/108", "solution": "\ndef couNt_nuMs(arr):\n    \"\"\"\n    Write a function couNt_nuMs which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> couNt_nuMs([]) == 0\n    >>> couNt_nuMs([-1, 11, -11]) == 1\n    >>> couNt_nuMs([1, 1, 2]) == 3\n    \"\"\"\n\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n\n        return sum(int(digit) for digit in l)\n\n    count = 0\n    for num in arr:\n        if judge(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "\ndef movE_one_Ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    movE_one_Ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    movE_one_Ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n\n\n    # Check for possible right shifts\n    n = len(arr)\n    for i in range(n):\n        # Create a new array by right shifting the current array\n        shifted_arr = arr[n-1:] + arr[:n-1]  # Right shift\n        if shifted_arr == sorted_arr:\n            return True\n        arr = shifted_arr  # Update the original array for the next shift\n\n    return False"}
{"task_id": "HumanEval/110", "solution": "\ndef excHangE(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an excHangE of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of excHangEd elements between lst1 and lst2.\n    If it is possible to excHangE elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n\n\n    # Check if all elements in lst1 are even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # Check if we can exchange elements to make lst1 even\n    for num in lst2:\n        if num % 2 != 0:  # If we find an odd number in lst2\n            # Try to exchange it with an even number in lst1\n            for even_num in lst1:\n                if even_num % 2 == 0:  # Find an even number in lst1\n                    # Create a new list with the odd number replaced by an even number\n                    new_lst1 = [even_num if n == num else n for n in lst1]\n                    if all(n % 2 == 0 for n in new_lst1):\n                        return \"YES\"\n    \n    return \"NO\""}
{"task_id": "HumanEval/111", "solution": "\ndef hisTogrAm(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n    hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n    hisTogrAm('b b b b a') == {'b': 4}\n    hisTogrAm('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n\n            if word in count:\n                count[word] += 1\n            else:\n                count[word] = 1\n\n    max_count = max(count.values())\n    for letter, cnt in count.items():\n        if cnt == max_count:\n            ans[letter] = cnt\n\n    return ans"}
{"task_id": "HumanEval/112", "solution": "\ndef revErse_DeletE(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n\n    \n    # Convert c to a set for faster lookup\n    c_set = set(c)\n    \n    # Create the result string by filtering out characters in s\n    result = ''.join(char for char in s if char not in c_set)\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome"}
{"task_id": "HumanEval/113", "solution": "\ndef odd_CounT(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_CounT(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_CounT(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n\n\n    for i in range(len(lst)):\n        # Count odd digits in the current string\n        odd_count = sum(1 for char in lst[i] if int(char) % 2 != 0)\n        # Replace 'i' with the actual index and odd count\n        formatted_string = template.replace('i', str(i)).replace('n', str(odd_count))\n        ans.append(formatted_string)\n\n    return ans"}
{"task_id": "HumanEval/114", "solution": "\ndef minsubARraySUm(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n    minsubARraySUm([-1, -2, -3]) == -6\n    \"\"\"\n\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n\n    \n    for num in nums:\n        s += num\n        ans = min(ans, s)\n        if s > 0:\n            s = 0\n            \n    return ans"}
{"task_id": "HumanEval/115", "solution": "import math"}
{"task_id": "HumanEval/116", "solution": "\ndef sorT_arrAy(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sorT_arrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sorT_arrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sorT_arrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        \n        if x1 < y1:\n            return -1\n        elif x1 > y1:\n            return 1\n        else:\n            if x < y:\n                return -1\n            elif x > y:\n                return 1\n            else:\n                return 0\n\n    return sorted(arr, key=cmp_to_key(cmp))"}
{"task_id": "HumanEval/117", "solution": "\ndef selEct_wOrds(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selEct_wOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selEct_wOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selEct_wOrds(\"simple white space\", 2) ==> []\n    selEct_wOrds(\"Hello world\", 4) ==> [\"world\"]\n    selEct_wOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n\n    ans = []\n    for word in s.split(\" \"):\n\n        # Count consonants in the word\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in 'aeiou':\n                consonant_count += 1\n        \n        # Check if the word has exactly n consonants\n        if consonant_count == n:\n            ans.append(word)\n    \n    return ans"}
{"task_id": "HumanEval/118", "solution": "\ndef get_ClosEst_voWel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_ClosEst_voWel(\"yogurt\") ==> \"u\"\n    get_ClosEst_voWel(\"FULL\") ==> \"U\"\n    get_ClosEst_voWel(\"quick\") ==> \"\"\n    get_ClosEst_voWel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n\n\n    vowels_found = []\n    last_vowel_index = -1\n\n    # Iterate from the end of the word to the beginning\n    for i in range(len(word) - 1, -1, -1):\n        if is_vowel(word[i]):\n            # If we found a vowel, we need to check if it's between two consonants\n            if last_vowel_index == -1:\n                # This is the first vowel found\n                last_vowel_index = i\n            else:\n                # We have found a vowel before, check if it's between two consonants\n                if word[i + 1] not in \"aeiouAEIOU\" and word[last_vowel_index - 1] not in \"aeiouAEIOU\":\n                    # We found a vowel that is between two consonants\n                    vowels_found.append(word[i])\n\n    # If we found any vowels, return the closest one\n    if vowels_found:\n        return vowels_found[0]\n    else:\n        return \"\""}
{"task_id": "HumanEval/119", "solution": "\ndef matCh_paRens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    matCh_paRens(['()(', ')']) == 'Yes'\n    matCh_paRens([')', ')']) == 'No'\n    '''\n\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n\n        for char in s:\n            if char == '(':\n                cnt += 1\n            elif char == ')':\n                cnt -= 1\n                if cnt < 0:\n                    return False\n        return cnt == 0\n\n    # Concatenate the two strings\n    combined_string = lst[0] + lst[1]\n\n    # Check if the combined string is valid\n    if valid_parens(combined_string):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "solution": "\ndef maxImum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maxImum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n\n    # Step 1: Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Step 2: Return the first k elements from the sorted array\n    return sorted_arr[:k]"}
{"task_id": "HumanEval/121", "solution": "\ndef solUtioN(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solUtioN([5, 8, 7, 1]) ==> 12\n    solUtioN([3, 3, 3, 3, 3]) ==> 9\n    solUtioN([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n\n    total_sum = 0\n    for i in range(0, len(lst), 2):  # Iterate over even positions\n        if lst[i] % 2 != 0:  # Check if the element is odd\n            total_sum += lst[i]  # Add to the sum if it is odd\n    return total_sum"}
{"task_id": "HumanEval/122", "solution": "\ndef add_ElemEnts(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n\n    def digits(x: int) -> int:\n\n        return len(str(abs(x)))\n\n    total_sum = 0\n    for i in range(k):\n        if digits(arr[i]) <= 2:\n            total_sum += arr[i]\n\n    return total_sum"}
{"task_id": "HumanEval/123", "solution": "\ndef get_Odd_cOllatZ(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_Odd_cOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n\n    ans, x = [], n\n    while x != 1:\n\n        if x % 2 == 0:  # even\n            x //= 2\n        else:  # odd\n            x = 3 * x + 1\n        \n        if x % 2 != 0:  # if the new number is odd\n            ans.append(x)\n\n    return sorted(set(ans))  # use set to remove duplicates and sort the result"}
{"task_id": "HumanEval/124", "solution": "\ndef valId_daTe(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valId_daTe('03-11-2000') => True\n\n    valId_daTe('15-01-2012') => False\n\n    valId_daTe('04-0-2040') => False\n\n    valId_daTe('06-04-2020') => True\n\n    valId_daTe('06/04/2020') => False\n    \"\"\"\n\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n\n\n    # Validate month\n    if not (m.isdigit() and 1 <= int(m) <= 12):\n        return False\n    \n    # Validate day\n    if not (d.isdigit() and 1 <= int(d) <= days[int(m) - 1]):\n        return False\n    \n    # Validate year\n    if not (y.isdigit() and len(y) == 4):\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "solution": "\ndef splIt_woRds(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splIt_woRds(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    splIt_woRds(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    splIt_woRds(\"abcdef\") == 3 \n    '''\n\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n\n    \n    # If neither condition is met, count lowercase letters with odd order\n    lower_case_letters = [ch for ch in txt if ch.islower()]\n    odd_order_letters = [ch for ch in lower_case_letters if (ord(ch) - ord('a')) % 2 != 0]\n    return len(odd_order_letters)"}
{"task_id": "HumanEval/126", "solution": "\ndef is_sOrteD(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sOrteD([5]) \u279e True\n    is_sOrteD([1, 2, 3, 4, 5]) \u279e True\n    is_sOrteD([1, 3, 2, 4, 5]) \u279e False\n    is_sOrteD([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sOrteD([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sOrteD([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sOrteD([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sOrteD([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n\n    count = dict()\n    for x in lst:\n\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n\n    # Check for duplicates\n    for key, value in count.items():\n        if value > 1:\n            return False\n\n    # Check for ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "solution": "\ndef intErseCtion(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intErseCtion of these two \n    intervals is a prime number.\n    Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intErseCtion is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n    intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n    intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n\n    def is_prime(a):\n\n        if a < 2:\n            return False\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True\n\n    # Extract start and end from intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check for intersection\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # Calculate the intErseCtion\n    int_start = max(start1, start2)\n    int_end = min(end1, end2)\n\n    # Calculate the length of the intErseCtion\n    length = int_end - int_start\n\n    # Check if the length is prime\n    return \"YES\" if is_prime(length) else \"NO\""}
{"task_id": "HumanEval/128", "solution": "\ndef proD_sigNs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> proD_sigNs([1, 2, 2, -4]) == -9\n    >>> proD_sigNs([0, 1]) == 0\n    >>> proD_sigNs([]) == None\n    \"\"\"\n\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n\n\n    for num in arr:\n        s += abs(num)\n        if num < 0:\n            sgn *= -1\n        elif num > 0:\n            sgn *= 1\n\n    return s * sgn"}
{"task_id": "HumanEval/129", "solution": "\ndef minpath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n\n                x, y = i, j\n                break\n        if x != 0 and y != 0:\n            break\n\n    # Directions: right, down, left, up\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    path = []\n\n    def dfs(x, y, visited, current_length):\n        if current_length == k:\n            return path\n        visited.add((x, y))\n        path.append(grid[x][y])\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                dfs(nx, ny, visited, current_length + 1)\n                path.pop()  # Backtrack\n\n        visited.remove((x, y))\n\n    visited = set()\n    dfs(x, y, visited, 0)\n    return path"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n\n    if n == 0: return [1]\n    if n == 1: return [1, 3]\n    ans = [1, 3]\n\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_value = 1 + (i / 2)\n        else:\n            next_value = ans[-1] + ans[-2] + ans[-3]\n        ans.append(next_value)\n\n    return ans"}
{"task_id": "HumanEval/131", "solution": "\ndef digIts(n):\n    \"\"\"Given a positive integer n, return the product of the odd digIts.\n    Return 0 if all digIts are even.\n    For example:\n    digIts(1)  == 1\n    digIts(4)  == 0\n    digIts(235) == 15\n    \"\"\"\n\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n\n        digit = int(ch)\n        if digit % 2 != 0:  # Check if the digit is odd\n            has_odd = True\n            prod *= digit\n            \n    return prod if has_odd else 0"}
{"task_id": "HumanEval/132", "solution": "\ndef is_nEsteD(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nEsteD('[[]]') \u279e True\n    is_nEsteD('[]]]]]]][[[[[]') \u279e False\n    is_nEsteD('[][]') \u279e False\n    is_nEsteD('[]') \u279e False\n    is_nEsteD('[[][]]') \u279e True\n    is_nEsteD('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n\n            elif string[j] == \"]\":\n                cnt -= 1\n                max_nest = max(max_nest, cnt)\n            if cnt < 0:\n                break\n        if max_nest > 0:\n            return True\n    return False"}
{"task_id": "HumanEval/133", "solution": "\n\ndef sum_SquaRes(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\n\n    # Initialize the sum of squared values\n    squared_sum = 0\n    \n    # Iterate through each number in the list\n    for num in lst:\n        # Round the number to the nearest integer\n        rounded_num = int(num + 0.5)  # This will round to the nearest int\n        squared_value = rounded_num ** 2  # Square the rounded number\n        squared_sum += squared_value  # Add to the total sum\n    \n    return squared_sum"}
{"task_id": "HumanEval/134", "solution": "\ndef cheCk_if_Last_cHar_Is_a_leTter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    cheCk_if_Last_cHar_Is_a_leTter(\"apple pie\") \u279e False\n    cheCk_if_Last_cHar_Is_a_leTter(\"apple pi e\") \u279e True\n    cheCk_if_Last_cHar_Is_a_leTter(\"apple pi e \") \u279e False\n    cheCk_if_Last_cHar_Is_a_leTter(\"\") \u279e False \n    '''\n\n    if len(txt) == 0: return False\n\n    \n    last_char = txt[-1]\n    \n    # Check if the last character is a letter\n    if last_char.isalpha():\n        # Check if it's not part of a word\n        if len(txt) == 1 or (txt[-2] == ' ' and txt[-1] != ' '):\n            return True\n    \n    return False"}
{"task_id": "HumanEval/135", "solution": "\ndef can_ArraNge(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_ArraNge([1,2,4,3,5]) = 3\n    can_ArraNge([1,2,3]) = -1\n    \"\"\"\n\n\n    for i in range(len(arr) - 1, 0, -1):\n\n        if arr[i] < arr[i - 1]:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/136", "solution": "\ndef larGest_SmallEst_IntegErs(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    larGest_SmallEst_IntegErs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    larGest_SmallEst_IntegErs([]) == (None, None)\n    larGest_SmallEst_IntegErs([0]) == (None, None)\n    '''\n\n    neg = list(filter(lambda x: x < 0, lst))\n\n    pos = list(filter(lambda x: x > 0, lst))\n\n    if not neg:\n        largest_neg = None\n    else:\n        largest_neg = max(neg)\n\n    if not pos:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos)\n\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "solution": "\ndef comPare_One(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    comPare_One(1, 2.5) \u279e 2.5\n    comPare_One(1, \"2,3\") \u279e \"2,3\"\n    comPare_One(\"5,1\", \"6\") \u279e \"6\"\n    comPare_One(\"1\", 1) \u279e None\n    \"\"\"\n\n\n    num_a = float(str(a).replace(\",\", \".\"))\n\n    num_b = float(str(b).replace(\",\", \".\"))\n\n    if num_a > num_b:\n        return a\n    elif num_b > num_a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "\ndef is_eQual_To_sum_EveN(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_eQual_To_sum_EveN(4) == False\n    is_eQual_To_sum_EveN(6) == False\n    is_eQual_To_sum_EveN(8) == True\n    \"\"\"\n\n\n    if n < 0:\n        return False\n    \n    # Generate all combinations of 4 positive even numbers\n    for a in range(2, n + 1, 2):\n        for b in range(2, n + 1, 2):\n            for c in range(2, n + 1, 2):\n                for d in range(2, n + 1, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "\ndef speCial_FactoRiaL(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> speCial_FactoRiaL(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n\n    fac, ans = 1, 1\n\n    for i in range(1, n + 1):\n        fac *= i\n        ans *= fac\n    return ans"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_SpacEs(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_SpacEs(\"Example\") == \"Example\"\n    fix_SpacEs(\"Example 1\") == \"Example_1\"\n    fix_SpacEs(\" Example 2\") == \"_Example_2\"\n    fix_SpacEs(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    ans = text\n\n    \n    # Replace spaces with underscores\n    ans = ans.replace(' ', '_')\n    \n    # Replace consecutive spaces with -\n    while '__' in ans:\n        ans = ans.replace('__', '-')\n    \n    # Remove leading and trailing underscores if they exist\n    ans = ans.strip('_')\n    \n    return ans"}
{"task_id": "HumanEval/141", "solution": "\ndef filE_namE_checK(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    filE_namE_checK(\"example.txt\") # => 'Yes'\n    filE_namE_checK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n\n    \n    if len(f_list) != 2:\n        return \"No\"\n    \n    name_part, ext_part = f_list\n    \n    if not name_part:\n        return \"No\"\n    \n    if not name_part[0].isalpha():\n        return \"No\"\n    \n    if ext_part not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    \n    return \"Yes\""}
{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_SquaRes(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans"}
{"task_id": "HumanEval/143", "solution": "\ndef worDs_in_SenteNce(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "solution": "\ndef simPlifY(x, n):\n    \"\"\"Your task is to implement a function that will simPlifY the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simPlifY(\"1/5\", \"5/1\") = True\n    simPlifY(\"1/6\", \"2/1\") = False\n    simPlifY(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n\n\n    \n    def parse_fraction(fraction):\n        \"\"\"Helper function to parse a fraction string into a tuple (numerator, denominator).\"\"\"\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    # Parse the fractions\n    x_num, x_den = parse_fraction(x)\n    n_num, n_den = parse_fraction(n)\n\n    # Calculate the product of the numerators and the product of the denominators\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product is a whole number\n    return product_num % product_den == 0"}
{"task_id": "HumanEval/145", "solution": "\ndef ordEr_by_PointS(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> ordEr_by_PointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> ordEr_by_PointS([]) == []\n    \"\"\"\n\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n\n        return sum(int(digit) for digit in x_list)\n\n    # Create a list of tuples (weight, index, value)\n    weighted_nums = [(weight(num), i, num) for i, num in enumerate(nums)]\n    \n    # Sort by weight and then by index\n    weighted_nums.sort()\n    \n    # Extract the sorted values\n    return [value for _, _, value in weighted_nums]"}
{"task_id": "HumanEval/146", "solution": "\ndef speCialfilteR(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    speCialfilteR([15, -73, 14, -15]) => 1 \n    speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n\n        if num > 10:\n            # Get the absolute value of the number\n            abs_num = abs(num)\n            # Get the first digit\n            first_digit = str(abs_num)[0]\n            # Get the last digit\n            last_digit = str(abs_num)[-1]\n            # Check if both are odd\n            if first_digit in odd and last_digit in odd:\n                ans += 1\n    return ans"}
{"task_id": "HumanEval/147", "solution": "\ndef get_Max_tRipleS(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n\n    if n <= 2: return False\n\n\n    # Calculate the values of a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Count the number of triples\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n\n\n    # Find the indices of the planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    # Determine the range of indices to consider\n    if index1 < index2:\n        start_index = index1 + 1\n        end_index = index2\n    else:\n        start_index = index2 + 1\n        end_index = index1\n\n    # Get the planets in the specified range\n    result_planets = planets[start_index:end_index]\n\n    # Sort the planets by their index in the planets list\n    result_planets.sort(key=lambda planet: planets.index(planet))\n\n    return tuple(result_planets)"}
{"task_id": "HumanEval/149", "solution": "\ndef sorTed_lIst_suM(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n\n        if len(s) < len(t):\n            return -1\n        elif len(s) > len(t):\n            return 1\n        else:\n            return (s > t) - (s < t)\n\n    # Filter out odd-length strings\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list using the custom comparator\n    sorted_lst = sorted(filtered_lst, key=cmp_to_key(cmp))\n    \n    return sorted_lst"}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_Y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_Y(7, 34, 12) == 34\n    for x_or_Y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    def is_prime(a):\n\n        if a < 2:\n            return False\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "\ndef douBle_tHe_difFerEnce(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    douBle_tHe_difFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    douBle_tHe_difFerEnce([-1, -2, 0]) == 0\n    douBle_tHe_difFerEnce([9, -2]) == 81\n    douBle_tHe_difFerEnce([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n    ans = 0\n    for num in lst:\n\n        if isinstance(num, int) and num % 2 != 0:  # Check if it's an odd integer\n            ans += num ** 2  # Add the square of the odd number to the sum\n    return ans"}
{"task_id": "HumanEval/152", "solution": "\ndef comPare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n\n    result = []\n    for score, guessed in zip(game, guess):\n        if score == guessed:\n            result.append(0)\n        else:\n            result.append(abs(score - guessed))\n    return result"}
{"task_id": "HumanEval/153", "solution": "\ndef StrOngeSt_ExtEnsIon(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for StrOngeSt_ExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n\n            elif ch.islower(): SM += 1\n        return CAP - SM\n\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        current_strength = strength(extension)\n        if current_strength > strongest_strength:\n            strongest_strength = current_strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\" if strongest_extension else f\"{class_name}.\""}
{"task_id": "HumanEval/154", "solution": "\ndef cycPattErn_chEck(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycPattErn_chEck(\"abcd\",\"abd\") => False\n    cycPattErn_chEck(\"hello\",\"ell\") => True\n    cycPattErn_chEck(\"whassup\",\"psus\") => False\n    cycPattErn_chEck(\"abab\",\"baa\") => True\n    cycPattErn_chEck(\"efef\",\"eeff\") => False\n    cycPattErn_chEck(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    if a == b:\n        return True\n    if b == \"\":\n\n        return True  # An empty string is always a substring of any string\n\n    # Check rotations of b\n    n = len(a)\n    m = len(b)\n\n    if m > n:\n        return False  # b cannot be a substring of a if it's longer than a\n\n    for i in range(n - m + 1):\n        if a[i:i + m] == b:\n            return True\n\n    # Check rotations of b\n    for i in range(m):\n        if a[n - m + i:n] + a[0:n - m + i] == b:\n            return True\n\n    return False"}
{"task_id": "HumanEval/155", "solution": "\ndef eveN_odd_Count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        eveN_odd_Count(-12) ==> (1, 1)\n        eveN_odd_Count(123) ==> (1, 2)\n    \"\"\"\n\n    even, odd = 0, 0\n    for ch in str(num):\n\n        if ch != '-':  # Ignore the negative sign if present\n            if int(ch) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/156", "solution": "\ndef int_To_miNi_romAn(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_To_miNi_romAn(19) == 'xix'\n    >>> int_To_miNi_romAn(152) == 'clii'\n    >>> int_To_miNi_romAn(426) == 'cdxxvi'\n    \"\"\"\n\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n\n    # Extract the digits from the number\n    thousands = number // 1000\n    hundreds = (number // 100) % 10\n    tens = (number // 10) % 10\n    ones = number % 10\n\n    # Build the roman numeral\n    roman_numeral = m[thousands] + c[hundreds] + x[tens] + i[ones]\n\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "solution": "\ndef rigHt_anGle_trIanGle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    rigHt_anGle_trIanGle(3, 4, 5) == True\n    rigHt_anGle_trIanGle(1, 2, 3) == False\n    '''\n\n\n    # Sort the sides to ensure a is the smallest and c is the largest\n    sides = sorted([a, b, c])\n    a, b, c = sides\n    \n    # Check if the right-angled condition is satisfied\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "solution": "\ndef finD_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    finD_max([\"name\", \"of\", \"string\"]) == \"string\"\n    finD_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    finD_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n\n        unique_chars = set(word)  # Get unique characters in the word\n        if len(unique_chars) > mx_ch_cnt:\n            mx_ch_cnt = len(unique_chars)\n            ans = word  # Update the answer with the current word\n        elif len(unique_chars) == mx_ch_cnt:\n            if word < ans:  # Compare lexicographically if counts are equal\n                ans = word\n    return ans"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n\n    if need <= remaining:\n\n        total_eaten = number + need\n        left_after_meals = remaining - need\n    else:\n        total_eaten = number + remaining\n        left_after_meals = 0\n\n    return [total_eaten, left_after_meals]"}
{"task_id": "HumanEval/160", "solution": "\ndef do_aLgebRa(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n\n    exp = \"\"\n\n    for i in range(len(operator)):\n        if i == 0:\n            exp += str(operand[i])\n        else:\n            exp += operator[i-1] + str(operand[i])\n\n    # Evaluate the expression\n    result = eval(exp)\n    return result"}
{"task_id": "HumanEval/161", "solution": "\ndef solVe(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solVe(\"1234\") = \"4321\"\n    solVe(\"ab\") = \"AB\"\n    solVe(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n\n            has_letter = True\n            if ch.islower():\n                ans += ch.upper()\n            else:\n                ans += ch.lower()\n        else:\n            ans += ch\n\n    if not has_letter:\n        return s[::-1]\n\n    return ans"}
{"task_id": "HumanEval/162", "solution": "\ndef strIng_tO_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> strIng_tO_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if text == \"\": return None\n    import hashlib\n\n    \n    # Create an md5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the string\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Return the hexadecimal representation of the hash\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "solution": "\ndef genEratE_inteGerS(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    genEratE_inteGerS(2, 8) => [2, 4, 6, 8]\n    genEratE_inteGerS(8, 2) => [2, 4, 6, 8]\n    genEratE_inteGerS(10, 14) => []\n    \"\"\"\n\n\n\n    # Ensure a and b are positive integers\n    if a < 1 or b < 1:\n        return []\n    \n    # Normalize the range\n    if a > b:\n        a, b = b, a\n    \n    # List to hold the even numbers\n    even_numbers = []\n    \n    # Iterate through the range from a to b\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_numbers.append(num)\n    \n    # Return the sorted list of even numbers\n    return sorted(even_numbers)"}
