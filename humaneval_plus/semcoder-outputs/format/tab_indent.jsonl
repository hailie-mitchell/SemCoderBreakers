{"task_id": "HumanEval/0", "completion": "\n\tfor i in range(len(sorted_numbers) - 1):\n\t\tif sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n\t\t\treturn True\n\treturn False\n", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n\t\"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\tFalse\n\t>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\tTrue\n\t\"\"\"\n\n\n\tsorted_numbers = sorted(numbers)\n\n\tfor i in range(len(sorted_numbers) - 1):\n\t\tif sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n\t\t\treturn True\n\treturn False\n"}
{"task_id": "HumanEval/1", "completion": "\n\t\tif ch == \")\": cnt -= 1\n\t\tgroup += ch\n\t\tif cnt == 0:\n\t\t\tresults.append(group.strip())\n\t\t\tgroup = \"\"\n\treturn results\n", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\t\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separate_paren_groups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t\"\"\"\n\n\n\tcnt, group, results = 0, \"\", []\n\tfor ch in paren_string:\n\t\tif ch == \"(\": cnt += 1\n\n\t\tif ch == \")\": cnt -= 1\n\t\tgroup += ch\n\t\tif cnt == 0:\n\t\t\tresults.append(group.strip())\n\t\t\tgroup = \"\"\n\treturn results\n"}
{"task_id": "HumanEval/2", "completion": "\n\treturn number - int(number)\n", "solution": "\n\ndef truncate_number(number: float) -> float:\n\t\"\"\" Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncate_number(3.5)\n\t0.5\n\t\"\"\"\n\n\n\treturn number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\n\t\taccount += operation\n\t\tif account < 0:\n\t\t\treturn True\n\treturn False\n", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n\t\"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n\tzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n\tat that point function should return True. Otherwise it should return False.\n\t>>> below_zero([1, 2, 3])\n\tFalse\n\t>>> below_zero([1, 2, -4, 5])\n\tTrue\n\t\"\"\"\n\n\taccount = 0\n\tfor operation in operations:\n\n\t\taccount += operation\n\t\tif account < 0:\n\t\t\treturn True\n\treturn False\n"}
{"task_id": "HumanEval/4", "completion": "\n\tmean = sum(numbers) / len(numbers)\n\tdeviations = [abs(num - mean) for num in numbers]\n\treturn sum(deviations) / len(deviations)\n", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n\t\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\taround the mean of this dataset.\n\tMean Absolute Deviation is the average absolute difference between each\n\telement and a centerpoint (mean in this case):\n\tMAD = average | x - x_mean |\n\t>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t\"\"\"\n\n\n\tmean = sum(numbers) / len(numbers)\n\tdeviations = [abs(num - mean) for num in numbers]\n\treturn sum(deviations) / len(deviations)\n"}
{"task_id": "HumanEval/5", "completion": "\n\t\tres.append(numbers[i])\n\t\tif i < len(numbers) - 1:\n\t\t\tres.append(delimeter)\n\treturn res\n", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\t\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\t>>> intersperse([], 4)\n\t[]\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t\"\"\"\n\n\n\tres = []\n\tfor i in range(len(numbers)):\n\n\t\tres.append(numbers[i])\n\t\tif i < len(numbers) - 1:\n\t\t\tres.append(delimeter)\n\treturn res\n"}
{"task_id": "HumanEval/6", "completion": "\n\t\t\tif ch == '(':\n\t\t\t\tcnt += 1\n\t\t\t\tmax_depth = max(max_depth, cnt)\n\t\t\telif ch == ')':\n\t\t\t\tcnt -= 1\n\t\treturn max_depth\n\n\treturn [count_depth(group) for group in paren_string.split()]\n", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\t\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parse_nested_parens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t\"\"\"\n\n    \n\tdef count_depth(s: str) -> int:\n\t\tmax_depth, cnt = 0, 0\n\t\tfor ch in s:\n\n\t\t\tif ch == '(':\n\t\t\t\tcnt += 1\n\t\t\t\tmax_depth = max(max_depth, cnt)\n\t\t\telif ch == ')':\n\t\t\t\tcnt -= 1\n\t\treturn max_depth\n\n\treturn [count_depth(group) for group in paren_string.split()]\n"}
{"task_id": "HumanEval/7", "completion": "\n\treturn [s for s in strings if substring in s]\n", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n\t\"\"\" Filter an input list of strings only for ones that contain given substring\n\t>>> filter_by_substring([], 'a')\n\t[]\n\t>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t\"\"\"\n\n\n\treturn [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n\t\ts += number\n\t\tp *= number\n\treturn s, p\n", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n\t\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n\tEmpty sum should be equal to 0 and empty product should be equal to 1.\n\t>>> sum_product([])\n\t(0, 1)\n\t>>> sum_product([1, 2, 3, 4])\n\t(10, 24)\n\t\"\"\"\n\n\ts, p = 0, 1\n\tfor number in numbers:\n\n\t\ts += number\n\t\tp *= number\n\treturn s, p\n"}
{"task_id": "HumanEval/9", "completion": "\n\tmax_so_far = float('-inf')\n\tresult = []\n\tfor num in numbers:\n\t\tif num > max_so_far:\n\t\t\tmax_so_far = num\n\t\tresult.append(max_so_far)\n\treturn result\n", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\t\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 3, 3, 3, 4, 4]\n\t\"\"\"\n\n\n\tmax_so_far = float('-inf')\n\tresult = []\n\tfor num in numbers:\n\t\tif num > max_so_far:\n\t\t\tmax_so_far = num\n\t\tresult.append(max_so_far)\n\treturn result\n"}
{"task_id": "HumanEval/10", "completion": "\n\n\tfor i in range(len(string)):\n\t\tif is_palindrome(string[i:]):\n\t\t\treturn string + string[:i][::-1]\n", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n\t\"\"\" Test if given string is a palindrome \"\"\"\n\treturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\t\"\"\" Find the shortest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> make_palindrome('')\n\t''\n\t>>> make_palindrome('cat')\n\t'catac'\n\t>>> make_palindrome('cata')\n\t'catac'\n\t\"\"\"\n\n\tif is_palindrome(string):\n\t\treturn string\n\n\n\tfor i in range(len(string)):\n\t\tif is_palindrome(string[i:]):\n\t\t\treturn string + string[:i][::-1]\n"}
{"task_id": "HumanEval/11", "completion": "\n\t# Initialize an empty string to store the result\n\tresult = \"\"\n\n\t# Iterate over the characters in the strings\n\tfor i in range(len(a)):\n\t\t# Perform XOR operation on the corresponding characters\n\t\tresult += str(int(a[i]) ^ int(b[i]))\n\n\treturn result\n", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n\t\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n\tPerform binary XOR on these inputs and return result also as a string.\n\t>>> string_xor('010', '110')\n\t'100'\n\t\"\"\"\n\n\n\t# Initialize an empty string to store the result\n\tresult = \"\"\n\n\t# Iterate over the characters in the strings\n\tfor i in range(len(a)):\n\t\t# Perform XOR operation on the corresponding characters\n\t\tresult += str(int(a[i]) ^ int(b[i]))\n\n\treturn result\n"}
{"task_id": "HumanEval/12", "completion": "\n\n\tlongest_string = strings[0]\n\tfor string in strings:\n\t\tif len(string) > len(longest_string):\n\t\t\tlongest_string = string\n\n\treturn longest_string\n", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n\t\"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n\tstrings of the same length. Return None in case the input list is empty.\n\t>>> longest([])\n\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t\"\"\"\n\n\tif not strings:\n\t\treturn None\n\n\n\n\tlongest_string = strings[0]\n\tfor string in strings:\n\t\tif len(string) > len(longest_string):\n\t\t\tlongest_string = string\n\n\treturn longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a\n", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n\t\"\"\" Return a greatest common divisor of two integers a and b\n\t>>> greatest_common_divisor(3, 5)\n\t1\n\t>>> greatest_common_divisor(25, 15)\n\t5\n\t\"\"\"\n\n\n\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a\n"}
{"task_id": "HumanEval/14", "completion": "\n\treturn [string[:i] for i in range(1, len(string) + 1)]\n", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n\t\"\"\" Return list of all prefixes from shortest to longest of the input string\n\t>>> all_prefixes('abc')\n\t['a', 'ab', 'abc']\n\t\"\"\"\n\n\n\treturn [string[:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n\treturn ' '.join(str(i) for i in range(n+1))\n", "solution": "\n\ndef string_sequence(n: int) -> str:\n\t\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> string_sequence(0)\n\t'0'\n\t>>> string_sequence(5)\n\t'0 1 2 3 4 5'\n\t\"\"\"\n\n\n\treturn ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\n\treturn len(set(string.lower()))\n", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n\t\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> count_distinct_characters('xyzXYZ')\n\t3\n\t>>> count_distinct_characters('Jerry')\n\t4\n\t\"\"\"\n\n\n\treturn len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n\t\telif note == \"o|\": return 2\n\t\telif note == \".|\": return 1\n\t\telse: return 0\n\n\tnotes = music_string.split()\n\treturn [count_beats(note) for note in notes]\n", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n\t\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t\"\"\"\n\n\n\tdef count_beats(note: str) -> int:\n\t\tif note == \"o\": return 4\n\n\t\telif note == \"o|\": return 2\n\t\telif note == \".|\": return 1\n\t\telse: return 0\n\n\tnotes = music_string.split()\n\treturn [count_beats(note) for note in notes]\n"}
{"task_id": "HumanEval/18", "completion": "\n\tsubstring_length = len(substring)\n\tstring_length = len(string)\n\n\tif substring_length > string_length:\n\t\treturn 0\n\n\tfor i in range(string_length - substring_length + 1):\n\t\tif string[i:i+substring_length] == substring:\n\t\t\toccurences += 1\n\n\treturn occurences\n", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n\t\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n\t>>> how_many_times('', 'a')\n\t0\n\t>>> how_many_times('aaa', 'a')\n\t3\n\t>>> how_many_times('aaaa', 'aa')\n\t3\n\t\"\"\"\n\n\n\toccurences = 0\n\n\tsubstring_length = len(substring)\n\tstring_length = len(string)\n\n\tif substring_length > string_length:\n\t\treturn 0\n\n\tfor i in range(string_length - substring_length + 1):\n\t\tif string[i:i+substring_length] == substring:\n\t\t\toccurences += 1\n\n\treturn occurences\n"}
{"task_id": "HumanEval/19", "completion": "\n\n\t# Convert the string to a list of integers\n\tnumbers_list = [to_int[num] for num in numbers.split()]\n\n\t# Sort the list\n\tnumbers_list.sort()\n\n\t# Convert the sorted list back to a list of strings\n\tsorted_numbers = [list(to_int.keys())[list(to_int.values()).index(num)] for num in numbers_list]\n\n\t#", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n\t\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sort_numbers('three one five')\n\t'one three five'\n\t\"\"\"\n\n    \n\tto_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n\n\t# Convert the string to a list of integers\n\tnumbers_list = [to_int[num] for num in numbers.split()]\n\n\t# Sort the list\n\tnumbers_list.sort()\n\n\t# Convert the sorted list back to a list of strings\n\tsorted_numbers = [list(to_int.keys())[list(to_int.values()).index(num)] for num in numbers_list]\n\n\t#"}
{"task_id": "HumanEval/20", "completion": "\n\n\tfor i in range(1, len(numbers)):\n\t\tdiff = numbers[i] - numbers[i - 1]\n\t\tif diff < min_diff:\n\t\t\tmin_diff = diff\n\t\t\tmin_pair = (numbers[i - 1], numbers[i])\n\n\treturn min_pair\n", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\t\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number).\n\t>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t\"\"\"\n\n\n\tnumbers.sort()\n\tmin_diff = float(\"inf\")\n\tmin_pair = None\n\n\n\tfor i in range(1, len(numbers)):\n\t\tdiff = numbers[i] - numbers[i - 1]\n\t\tif diff < min_diff:\n\t\t\tmin_diff = diff\n\t\t\tmin_pair = (numbers[i - 1], numbers[i])\n\n\treturn min_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n\tmin_val = min(numbers)\n\tmax_val = max(numbers)\n\t\n\treturn [(num - min_val) / (max_val - min_val) for num in numbers]\n", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\t\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t\"\"\"\n\n\n\n\tmin_val = min(numbers)\n\tmax_val = max(numbers)\n\t\n\treturn [(num - min_val) / (max_val - min_val) for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n\treturn [value for value in values if isinstance(value, int)]\n", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n\t\"\"\" Filter given list of any python values only for integers\n\t>>> filter_integers(['a', 3.14, 5])\n\t[5]\n\t>>> filter_integers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t\"\"\"\n\n\n\treturn [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n\treturn len(string)\n", "solution": "\n\ndef strlen(string: str) -> int:\n\t\"\"\" Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t\"\"\"\n\n\n\treturn len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n\tfor i in range(n-1, 0, -1):\n\t\tif n % i == 0:\n\t\t\treturn i\n", "solution": "\n\ndef largest_divisor(n: int) -> int:\n\t\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largest_divisor(15)\n\t5\n\t\"\"\"\n\n\n\n\tfor i in range(n-1, 0, -1):\n\t\tif n % i == 0:\n\t\t\treturn i\n"}
{"task_id": "HumanEval/25", "completion": "\n\t\t\tn = n / i\n\t\telse:\n\t\t\ti += 1\n\tif n > 1:\n\t\tfact.append(n)\n\treturn fact\n", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n\t\"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t\"\"\"\n\n\timport math\n\tfact = []\n\ti = 2\n\twhile i <= int(math.sqrt(n) + 1):\n\t\tif n % i == 0:\n\t\t\tfact.append(i)\n\n\t\t\tn = n / i\n\t\telse:\n\t\t\ti += 1\n\tif n > 1:\n\t\tfact.append(n)\n\treturn fact\n"}
{"task_id": "HumanEval/26", "completion": "\n\t\tif number in num_cnt:\n\t\t\tnum_cnt[number] += 1\n\t\telse:\n\t\t\tnum_cnt[number] = 1\n\n\tresult = [number for number in numbers if num_cnt[number] == 1]\n\treturn result\n", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\t\"\"\" From a list of integers, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> remove_duplicates([1, 2, 3, 2, 4])\n\t[1, 3, 4]\n\t\"\"\"\n\n\tnum_cnt = dict()\n\tfor number in numbers:\n\n\t\tif number in num_cnt:\n\t\t\tnum_cnt[number] += 1\n\t\telse:\n\t\t\tnum_cnt[number] = 1\n\n\tresult = [number for number in numbers if num_cnt[number] == 1]\n\treturn result\n"}
{"task_id": "HumanEval/27", "completion": "\n\treturn string.swapcase()\n", "solution": "\n\ndef flip_case(string: str) -> str:\n\t\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\t>>> flip_case('Hello')\n\t'hELLO'\n\t\"\"\"\n\n\n\treturn string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "\n\treturn ''.join(strings)\n", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n\t\"\"\" Concatenate list of strings into a single string\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t\"\"\"\n\n\n\treturn ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n\treturn [s for s in strings if s.startswith(prefix)]\n", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n\t\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n\t>>> filter_by_prefix([], 'a')\n\t[]\n\t>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t\"\"\"\n\n\n\treturn [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n\treturn [num for num in l if num > 0]\n", "solution": "\n\ndef get_positive(l: list):\n\t\"\"\"Return only positive numbers in the list.\n\t>>> get_positive([-1, 2, -4, 5, 6])\n\t[2, 5, 6]\n\t>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[5, 3, 2, 3, 9, 123, 1]\n\t\"\"\"\n\n\n\treturn [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n\tfor i in range(2, n_sqrt):\n\t\tif n % i == 0: return False\n\treturn True\n", "solution": "\n\ndef is_prime(n):\n\t\"\"\"Return true if a given number is prime, and false otherwise.\n\t>>> is_prime(6)\n\tFalse\n\t>>> is_prime(101)\n\tTrue\n\t>>> is_prime(11)\n\tTrue\n\t>>> is_prime(13441)\n\tTrue\n\t>>> is_prime(61)\n\tTrue\n\t>>> is_prime(4)\n\tFalse\n\t>>> is_prime(1)\n\tFalse\n\t\"\"\"\n\n\tif n <= 1: return False\n\tn_sqrt = 1\n\twhile n_sqrt ** 2 < n: n_sqrt += 1\n\n\tfor i in range(2, n_sqrt):\n\t\tif n % i == 0: return False\n\treturn True\n"}
{"task_id": "HumanEval/32", "completion": "\n\n\tx = 0.0\n\twhile abs(func(x)) > 1e-6:\n\t\tx = x - func(x) / derivative(x)\n\treturn x\n", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n\t\"\"\"\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\t\"\"\"\n\treturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\t\"\"\" xs are coefficients of a polynomial.\n\tfind_zero find x such that poly(x) = 0.\n\tfind_zero returns only only zero point, even if there are many.\n\tMoreover, find_zero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t\"\"\"\n\n\n\tdxs = [xs[i] * i for i in range(1, len(xs))]\n\tdef func(x):\n\t\treturn poly(xs, x)\n\tdef derivative(x):\n\t\treturn poly(dxs, x)\n    \n\n\n\tx = 0.0\n\twhile abs(func(x)) > 1e-6:\n\t\tx = x - func(x) / derivative(x)\n\treturn x\n"}
{"task_id": "HumanEval/33", "completion": "\n\tthird.sort()\n\tj = 0\n\tfor i in range(len(l)):\n\t\tif i % 3 == 0:\n\t\t\tl[i] = third[j]\n\t\t\tj += 1\n\treturn l\n", "solution": "\n\ndef sort_third(l: list):\n\t\"\"\"This function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sort_third([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n\t[2, 6, 3, 4, 8, 9, 5]\n\t\"\"\"\n\n\tthird = [l[i] for i in range(len(l)) if i % 3 == 0]\n\n\tthird.sort()\n\tj = 0\n\tfor i in range(len(l)):\n\t\tif i % 3 == 0:\n\t\t\tl[i] = third[j]\n\t\t\tj += 1\n\treturn l\n"}
{"task_id": "HumanEval/34", "completion": "\n\treturn sorted(set(l))\n", "solution": "\n\ndef unique(l: list):\n\t\"\"\"Return sorted unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[0, 2, 3, 5, 9, 123]\n\t\"\"\"\n\n\n\treturn sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n\treturn max(l)\n", "solution": "\n\ndef max_element(l: list):\n\t\"\"\"Return maximum element in the list.\n\t>>> max_element([1, 2, 3])\n\t3\n\t>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t123\n\t\"\"\"\n\n\n\treturn max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\n\t\tif i % 11 == 0 or i % 13 == 0:\n\t\t\tcnt += str(i).count('7')\n\treturn cnt\n", "solution": "\n\ndef fizz_buzz(n: int):\n\t\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\t>>> fizz_buzz(50)\n\t0\n\t>>> fizz_buzz(78)\n\t2\n\t>>> fizz_buzz(79)\n\t3\n\t\"\"\"\n\n\tcnt = 0\n\tfor i in range(n):\n\n\t\tif i % 11 == 0 or i % 13 == 0:\n\t\t\tcnt += str(i).count('7')\n\treturn cnt\n"}
{"task_id": "HumanEval/37", "completion": "\n\teven.sort()\n\tresult = []\n\tfor i in range(len(l)):\n\t\tif i % 2 == 0:\n\t\t\tresult.append(even.pop(0))\n\t\telse:\n\t\t\tresult.append(l[i])\n\treturn result\n", "solution": "\n\ndef sort_even(l: list):\n\t\"\"\"This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sort_even([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sort_even([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t\"\"\"\n\n\teven = [l[i] for i in range(len(l)) if i % 2 == 0]\n\n\teven.sort()\n\tresult = []\n\tfor i in range(len(l)):\n\t\tif i % 2 == 0:\n\t\t\tresult.append(even.pop(0))\n\t\telse:\n\t\t\tresult.append(l[i])\n\treturn result\n"}
{"task_id": "HumanEval/38", "completion": "\n\t# reverse cycle elements in each group. Unless group has fewer elements than 3.\n\tgroups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n\treturn \"\".join(groups)\n", "solution": "\n\ndef encode_cyclic(s: str):\n\t\"\"\"\n\treturns encoded string by cycling groups of three characters.\n\t\"\"\"\n\t# split string to groups. Each of length 3.\n\tgroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n\t# cycle elements in each group. Unless group has fewer elements than 3.\n\tgroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n\treturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\t\"\"\"\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t\"\"\"\n\n\tgroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n\n\t# reverse cycle elements in each group. Unless group has fewer elements than 3.\n\tgroups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n\treturn \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n\t\t\ta = random.randint(2, n - 1)\n\t\t\tx = pow(a, d, n)\n\t\t\tif x == 1 or x == n - 1:\n\t\t\t\tcontinue\n\t\t\tfor _ in range(r - 1):\n\t\t\t\tx = pow(x, 2, n)\n\t\t\t\tif x == n - 1:\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\treturn False\n\t\treturn True\n", "solution": "\n\ndef prime_fib(n: int):\n\t\"\"\"\n\tprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> prime_fib(1)\n\t2\n\t>>> prime_fib(2)\n\t3\n\t>>> prime_fib(3)\n\t5\n\t>>> prime_fib(4)\n\t13\n\t>>> prime_fib(5)\n\t89\n\t\"\"\"\n\n\n\timport random\n\tdef miller_rabin(n, k=10):\n\t\t\"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n\t\tif n < 2:\n\t\t\treturn False\n\t\tif n == 2 or n == 3:\n\t\t\treturn True\n\t\tif n % 2 == 0:\n\t\t\treturn False\n\n\t\tr = 0\n\t\td = n - 1\n\t\twhile d % 2 == 0:\n\t\t\tr += 1\n\t\t\td //= 2\n\n\t\tfor _ in range(k):\n\n\t\t\ta = random.randint(2, n - 1)\n\t\t\tx = pow(a, d, n)\n\t\t\tif x == 1 or x == n - 1:\n\t\t\t\tcontinue\n\t\t\tfor _ in range(r - 1):\n\t\t\t\tx = pow(x, 2, n)\n\t\t\t\tif x == n - 1:\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\treturn False\n\t\treturn True\n"}
{"task_id": "HumanEval/40", "completion": "\n\t\t\tfor k in range(len(l)):\n\t\t\t\tif i != j and j != k and i != k:\n\t\t\t\t\tif l[i] + l[j] + l[k] == 0:\n\t\t\t\t\t\treturn True\n\treturn False\n", "solution": "\n\ndef triples_sum_to_zero(l: list):\n\t\"\"\"\n\ttriples_sum_to_zero takes a list of integers as an input.\n\tit returns True if there are three distinct elements in the list that\n\tsum to zero, and False otherwise.\n\n\t>>> triples_sum_to_zero([1, 3, 5, 0])\n\tFalse\n\t>>> triples_sum_to_zero([1, 3, -2, 1])\n\tTrue\n\t>>> triples_sum_to_zero([1, 2, 3, 7])\n\tFalse\n\t>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\tTrue\n\t>>> triples_sum_to_zero([1])\n\tFalse\n\t\"\"\"\n\n\tfor i in range(len(l)):\n\t\tfor j in range(len(l)):\n\n\t\t\tfor k in range(len(l)):\n\t\t\t\tif i != j and j != k and i != k:\n\t\t\t\t\tif l[i] + l[j] + l[k] == 0:\n\t\t\t\t\t\treturn True\n\treturn False\n"}
{"task_id": "HumanEval/41", "completion": "\n\tif n < 2:\n\t\treturn 0\n\treturn n * (n - 1) // 2\n", "solution": "\n\ndef car_race_collision(n: int):\n\t\"\"\"\n\tImagine a road that's a perfectly straight infinitely long line.\n\tn cars are driving left to right;  simultaneously, a different set of n cars\n\tare driving right to left.   The two sets of cars start out being very far from\n\teach other.  All cars move in the same speed.  Two cars are said to collide\n\twhen a car that's moving left to right hits a car that's moving right to left.\n\tHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\n\tin their trajectory as if they did not collide.\n\n\tThis function outputs the number of such collisions.\n\t\"\"\"\n\n\n\tif n < 2:\n\t\treturn 0\n\treturn n * (n - 1) // 2\n"}
{"task_id": "HumanEval/42", "completion": "\n\treturn [x + 1 for x in l]\n", "solution": "\n\ndef incr_list(l: list):\n\t\"\"\"Return list with elements incremented by 1.\n\t>>> incr_list([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t\"\"\"\n\n\n\treturn [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n\t\t\tif i != j and l[i] + l[j] == 0:\n\t\t\t\treturn True\n\treturn False\n", "solution": "\n\ndef pairs_sum_to_zero(l):\n\t\"\"\"\n\tpairs_sum_to_zero takes a list of integers as an input.\n\tit returns True if there are two distinct elements in the list that\n\tsum to zero, and False otherwise.\n\t>>> pairs_sum_to_zero([1, 3, 5, 0])\n\tFalse\n\t>>> pairs_sum_to_zero([1, 3, -2, 1])\n\tFalse\n\t>>> pairs_sum_to_zero([1, 2, 3, 7])\n\tFalse\n\t>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n\tTrue\n\t>>> pairs_sum_to_zero([1])\n\tFalse\n\t\"\"\"\n\n\tfor i in range(len(l)):\n\t\tfor j in range(len(l)):\n\n\t\t\tif i != j and l[i] + l[j] == 0:\n\t\t\t\treturn True\n\treturn False\n"}
{"task_id": "HumanEval/44", "completion": "\n\twhile x > 0:\n\t\tret = str(x % base) + ret\n\t\tx = x // base\n\treturn ret\n", "solution": "\n\ndef change_base(x: int, base: int):\n\t\"\"\"Change numerical base of input number x to base.\n\treturn string representation after the conversion.\n\tbase numbers are less than 10.\n\t>>> change_base(8, 3)\n\t'22'\n\t>>> change_base(8, 2)\n\t'1000'\n\t>>> change_base(7, 2)\n\t'111'\n\t\"\"\"\n\n\n\tif x == 0: return \"0\"\n\tret = \"\"\n\n\twhile x > 0:\n\t\tret = str(x % base) + ret\n\t\tx = x // base\n\treturn ret\n"}
{"task_id": "HumanEval/45", "completion": "\n\treturn 0.5 * a * h\n", "solution": "\n\ndef triangle_area(a, h):\n\t\"\"\"Given length of a side and high return area for a triangle.\n\t>>> triangle_area(5, 3)\n\t7.5\n\t\"\"\"\n\n\n\treturn 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n\t\treturn 2\n\telif n == 3:\n\t\treturn 0\n\n\ta, b, c, d = 0, 0, 2, 0\n\tfor _ in range(n - 4):\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\n\treturn d\n", "solution": "\n\ndef fib4(n: int):\n\t\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t\"\"\"\n\n    \n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 0\n\telif n == 2:\n\n\t\treturn 2\n\telif n == 3:\n\t\treturn 0\n\n\ta, b, c, d = 0, 0, 2, 0\n\tfor _ in range(n - 4):\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\n\treturn d\n"}
{"task_id": "HumanEval/47", "completion": "\n\tn = len(sorted_l)\n\tif n % 2 == 0:\n\t\treturn (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n\telse:\n\t\treturn sorted_l[n//2]\n", "solution": "\n\ndef median(l: list):\n\t\"\"\"Return median of elements in the list l.\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t15.0\n\t\"\"\"\n\n\n\tsorted_l = sorted(l)\n\n\tn = len(sorted_l)\n\tif n % 2 == 0:\n\t\treturn (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n\telse:\n\t\treturn sorted_l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n\treturn text == text[::-1]\n", "solution": "\n\ndef is_palindrome(text: str):\n\t\"\"\"\n\tChecks if given string is a palindrome\n\t>>> is_palindrome('')\n\tTrue\n\t>>> is_palindrome('aba')\n\tTrue\n\t>>> is_palindrome('aaaaa')\n\tTrue\n\t>>> is_palindrome('zbcd')\n\tFalse\n\t\"\"\"\n\n\n\treturn text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n\t\tif n % 2 == 1:\n\t\t\tres = (res * x) % p\n\t\tx = (x * x) % p\n\t\tn //= 2\n\treturn res\n", "solution": "\n\ndef modp(n: int, p: int):\n\t\"\"\"Return 2^n modulo p (be aware of numerics).\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t\"\"\"\n\n\n\tres, x = 1, 2\n\twhile n != 0:\n\n\t\tif n % 2 == 1:\n\t\t\tres = (res * x) % p\n\t\tx = (x * x) % p\n\t\tn //= 2\n\treturn res\n"}
{"task_id": "HumanEval/50", "completion": "\n\treturn \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "solution": "\n\ndef encode_shift(s: str):\n\t\"\"\"\n\treturns encoded string by shifting every character by 5 in the alphabet.\n\t\"\"\"\n\treturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\t\"\"\"\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t\"\"\"\n\n\n\treturn \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n\tvowels = 'aeiouAEIOU'\n\treturn ''.join([char for char in text if char not in vowels])\n", "solution": "\n\ndef remove_vowels(text):\n\t\"\"\"\n\tremove_vowels is a function that takes string and returns string without vowels.\n\t>>> remove_vowels('')\n\t''\n\t>>> remove_vowels(\"abcdef\\nghijklm\")\n\t'bcdf\\nghjklm'\n\t>>> remove_vowels('abcdef')\n\t'bcdf'\n\t>>> remove_vowels('aaaaa')\n\t''\n\t>>> remove_vowels('aaBAA')\n\t'B'\n\t>>> remove_vowels('zbcd')\n\t'zbcd'\n\t\"\"\"\n\n\n\tvowels = 'aeiouAEIOU'\n\treturn ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n\tfor num in l:\n\t\tif num >= t:\n\t\t\treturn False\n\treturn True\n", "solution": "\n\ndef below_threshold(l: list, t: int):\n\t\"\"\"Return True if all numbers in the list l are below threshold t.\n\t>>> below_threshold([1, 2, 4, 10], 100)\n\tTrue\n\t>>> below_threshold([1, 20, 4, 10], 5)\n\tFalse\n\t\"\"\"\n\n\n\tfor num in l:\n\t\tif num >= t:\n\t\t\treturn False\n\treturn True\n"}
{"task_id": "HumanEval/53", "completion": "\n\treturn x + y\n", "solution": "\n\ndef add(x: int, y: int):\n\t\"\"\"Add two numbers x and y\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t\"\"\"\n\n\n\treturn x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n\tfrom collections import Counter\n\treturn Counter(s0) == Counter(s1)\n", "solution": "\n\ndef same_chars(s0: str, s1: str):\n\t\"\"\"\n\tCheck if two words have the same characters.\n\t>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\tTrue\n\t>>> same_chars('abcd', 'dddddddabc')\n\tTrue\n\t>>> same_chars('dddddddabc', 'abcd')\n\tTrue\n\t>>> same_chars('eabcd', 'dddddddabc')\n\tFalse\n\t>>> same_chars('abcd', 'dddddddabce')\n\tFalse\n\t>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tFalse\n\t\"\"\"\n\n\n\tfrom collections import Counter\n\treturn Counter(s0) == Counter(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n\n\ta, b = 1, 1\n\tfor _ in range(3, n + 1):\n\t\ta, b = b, a + b\n\treturn b\n", "solution": "\n\ndef fib(n: int):\n\t\"\"\"Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t\"\"\"\n\n\n\tif n == 0: return 0\n\tif n <= 2: return 1\n\n\n\ta, b = 1, 1\n\tfor _ in range(3, n + 1):\n\t\ta, b = b, a + b\n\treturn b\n"}
{"task_id": "HumanEval/56", "completion": "\n\t\tif x == \"<\":\n\t\t\tcnt += 1\n\t\telif x == \">\":\n\t\t\tcnt -= 1\n\t\tif cnt < 0:\n\t\t\treturn False\n\treturn cnt == 0\n", "solution": "\n\ndef correct_bracketing(brackets: str):\n\t\"\"\" brackets is a string of \"<\" and \">\".\n\treturn True if every opening bracket has a corresponding closing bracket.\n\n\t>>> correct_bracketing(\"<\")\n\tFalse\n\t>>> correct_bracketing(\"<>\")\n\tTrue\n\t>>> correct_bracketing(\"<<><>>\")\n\tTrue\n\t>>> correct_bracketing(\"><<>\")\n\tFalse\n\t\"\"\"\n\n\n\tcnt = 0\n\tfor x in brackets:\n\n\t\tif x == \"<\":\n\t\t\tcnt += 1\n\t\telif x == \">\":\n\t\t\tcnt -= 1\n\t\tif cnt < 0:\n\t\t\treturn False\n\treturn cnt == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n\t\tif l[i] > l[i + 1]:\n\t\t\tinc = False\n\t\tif l[i] < l[i + 1]:\n\t\t\tdec = False\n\treturn inc or dec\n", "solution": "\n\ndef monotonic(l: list):\n\t\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\t>>> monotonic([1, 2, 4, 20])\n\tTrue\n\t>>> monotonic([1, 20, 4, 10])\n\tFalse\n\t>>> monotonic([4, 1, 0, -10])\n\tTrue\n\t\"\"\"\n\n\tinc, dec = True, True\n\tfor i in range(len(l) - 1):\n\n\t\tif l[i] > l[i + 1]:\n\t\t\tinc = False\n\t\tif l[i] < l[i + 1]:\n\t\t\tdec = False\n\treturn inc or dec\n"}
{"task_id": "HumanEval/58", "completion": "\n\treturn sorted(set(l1) & set(l2))\n", "solution": "\n\ndef common(l1: list, l2: list):\n\t\"\"\"Return sorted unique common elements for two lists.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t\"\"\"\n\n\n\treturn sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "\n\t\t\tfor j in range(i * 2, n + 1, i):\n\t\t\t\tisprime[j] = False\n\n\tfor i in range(n, 1, -1):\n\t\tif isprime[i] and n % i == 0:\n\t\t\treturn i\n\n\treturn None\n", "solution": "\n\ndef largest_prime_factor(n: int):\n\t\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largest_prime_factor(13195)\n\t29\n\t>>> largest_prime_factor(2048)\n\t2\n\t\"\"\"\n\n\n\tisprime = [True] * (n + 1)\n\tfor i in range(2, n + 1):\n\t\tif isprime[i]:\n\n\t\t\tfor j in range(i * 2, n + 1, i):\n\t\t\t\tisprime[j] = False\n\n\tfor i in range(n, 1, -1):\n\t\tif isprime[i] and n % i == 0:\n\t\t\treturn i\n\n\treturn None\n"}
{"task_id": "HumanEval/60", "completion": "\n\treturn n * (n + 1) // 2\n", "solution": "\n\ndef sum_to_n(n: int):\n\t\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n\t>>> sum_to_n(30)\n\t465\n\t>>> sum_to_n(100)\n\t5050\n\t>>> sum_to_n(5)\n\t15\n\t>>> sum_to_n(10)\n\t55\n\t>>> sum_to_n(1)\n\t1\n\t\"\"\"\n\n\n\treturn n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n\t\tif x == \"(\":\n\t\t\tcnt += 1\n\t\telif x == \")\":\n\t\t\tcnt -= 1\n\t\tif cnt < 0:\n\t\t\treturn False\n\treturn cnt == 0\n", "solution": "\n\ndef correct_bracketing(brackets: str):\n\t\"\"\" brackets is a string of \"(\" and \")\".\n\treturn True if every opening bracket has a corresponding closing bracket.\n\n\t>>> correct_bracketing(\"(\")\n\tFalse\n\t>>> correct_bracketing(\"()\")\n\tTrue\n\t>>> correct_bracketing(\"(()())\")\n\tTrue\n\t>>> correct_bracketing(\")(()\")\n\tFalse\n\t\"\"\"\n\n\n\tcnt = 0\n\tfor x in brackets:\n\n\t\tif x == \"(\":\n\t\t\tcnt += 1\n\t\telif x == \")\":\n\t\t\tcnt -= 1\n\t\tif cnt < 0:\n\t\t\treturn False\n\treturn cnt == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n\treturn [i * xs[i] for i in range(1, len(xs))]\n", "solution": "\n\ndef derivative(xs: list):\n\t\"\"\" xs represent coefficients of a polynomial.\n\txs[0] + xs[1] * x + xs[2] * x^2 + ....\n\t Return derivative of this polynomial in the same form.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t\"\"\"\n\n\n\treturn [i * xs[i] for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "\n\t\treturn 1\n\telse:\n\t\ta, b, c = 0, 0, 1\n\t\tfor _ in range(3, n + 1):\n\t\t\ta, b, c = b, c, a + b + c\n\t\treturn c\n", "solution": "\n\ndef fibfib(n: int):\n\t\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfibfib(0) == 0\n\tfibfib(1) == 0\n\tfibfib(2) == 1\n\tfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\t>>> fibfib(1)\n\t0\n\t>>> fibfib(5)\n\t4\n\t>>> fibfib(8)\n\t24\n\t\"\"\"\n\n\n\tif n == 0 or n == 1:\n\t\treturn 0\n\telif n == 2:\n\n\t\treturn 1\n\telse:\n\t\ta, b, c = 0, 0, 1\n\t\tfor _ in range(3, n + 1):\n\t\t\ta, b, c = b, c, a + b + c\n\t\treturn c\n"}
{"task_id": "HumanEval/64", "completion": "\n\n\tvowels = 'aeiou'\n\tcount = 0\n\n\tfor char in s:\n\t\tif char.lower() in vowels:\n\t\t\tcount += 1\n\n\tif s[-1].lower() == 'y':\n\t\tcount += 1\n\n\treturn count\n", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n\t\"\"\"Write a function vowels_count which takes a string representing\n\ta word as input and returns the number of vowels in the string.\n\tVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n\tvowel, but only when it is at the end of the given word.\n\n\tExample:\n\t>>> vowels_count(\"abcde\")\n\t2\n\t>>> vowels_count(\"ACEDY\")\n\t3\n\t\"\"\"\n\n\tif s == \"\": return 0\n\n\n\tvowels = 'aeiou'\n\tcount = 0\n\n\tfor char in s:\n\t\tif char.lower() in vowels:\n\t\t\tcount += 1\n\n\tif s[-1].lower() == 'y':\n\t\tcount += 1\n\n\treturn count\n"}
{"task_id": "HumanEval/65", "completion": "\n\t\n\treturn s[-shift:] + s[:-shift]\n", "solution": "\ndef circular_shift(x, shift):\n\t\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n\tand return the result as a string.\n\tIf shift > number of digits, return digits reversed.\n\t>>> circular_shift(12, 1)\n\t\"21\"\n\t>>> circular_shift(12, 2)\n\t\"12\"\n\t\"\"\"\n\n\n\ts = str(x)\n\tif shift > len(s): return s[::-1]\n\n\t\n\treturn s[-shift:] + s[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n\tsum = 0\n\tfor char in s:\n\t\tif char.isupper():\n\t\t\tsum += ord(char)\n\treturn sum\n", "solution": "\ndef digitSum(s):\n\t\"\"\"Task\n\tWrite a function that takes a string as input and returns the sum of the upper characters only'\n\tASCII codes.\n\n\tExamples:\n\t\tdigitSum(\"\") => 0\n\t\tdigitSum(\"abAB\") => 131\n\t\tdigitSum(\"abcCd\") => 67\n\t\tdigitSum(\"helloE\") => 69\n\t\tdigitSum(\"woArBld\") => 131\n\t\tdigitSum(\"aAaaaXa\") => 153\n\t\"\"\"\n\n\n\tsum = 0\n\tfor char in s:\n\t\tif char.isupper():\n\t\t\tsum += ord(char)\n\treturn sum\n"}
{"task_id": "HumanEval/67", "completion": "\n\tapples = int(words[0])\n\toranges = int(words[4])\n\treturn n - apples - oranges\n", "solution": "\ndef fruit_distribution(s,n):\n\t\"\"\"\n\tIn this task, you will be given a string that represents a number of apples and oranges \n\tthat are distributed in a basket of fruit this basket contains \n\tapples, oranges, and mango fruits. Given the string that represents the total number of \n\tthe oranges and apples and an integer that represent the total number of the fruits \n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t\"\"\"\n\n\n\twords = s.split(\" \")\n\n\tapples = int(words[0])\n\toranges = int(words[4])\n\treturn n - apples - oranges\n"}
{"task_id": "HumanEval/68", "completion": "\n\n\tsmallest_even_val = float('inf')\n\tsmallest_even_index = -1\n\n\tfor i, val in enumerate(arr):\n\t\tif val % 2 == 0 and val < smallest_even_val:\n\t\t\tsmallest_even_val = val\n\t\t\tsmallest_even_index = i\n\n\tif smallest_even_index == -1: return []\n\n\treturn [smallest_even_", "solution": "\ndef pluck(arr):\n\t\"\"\"\n\t\"Given an array representing a branch of a tree that has non-negative integer nodes\n\tyour task is to pluck one of the nodes and return it.\n\tThe plucked node should be the node with the smallest even value.\n\tIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n\tThe plucked node should be returned in a list, [ smalest_value, its index ],\n\tIf there are no even values or the given array is empty, return [].\n\n\tExample 1:\n\t\tInput: [4,2,3]\n\t\tOutput: [2, 1]\n\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 2:\n\t\tInput: [1,2,3]\n\t\tOutput: [2, 1]\n\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index. \n\n\tExample 3:\n\t\tInput: []\n\t\tOutput: []\n    \n\tExample 4:\n\t\tInput: [5, 0, 3, 0, 4, 2]\n\t\tOutput: [0, 1]\n\t\tExplanation: 0 is the smallest value, but  there are two zeros,\n\t\t\t\t\t so we will choose the first zero, which has the smallest index.\n\n\tConstraints:\n\t\t* 1 <= nodes.length <= 10000\n\t\t* 0 <= node.value\n\t\"\"\"\n\n\n\tif all(val % 2 == 1 for val in arr): return []\n\n\n\tsmallest_even_val = float('inf')\n\tsmallest_even_index = -1\n\n\tfor i, val in enumerate(arr):\n\t\tif val % 2 == 0 and val < smallest_even_val:\n\t\t\tsmallest_even_val = val\n\t\t\tsmallest_even_index = i\n\n\tif smallest_even_index == -1: return []\n\n\treturn [smallest_even_"}
{"task_id": "HumanEval/69", "completion": "\n\t\tcount[num] += 1\n\n\tfor num in sorted(count.keys(), reverse=True):\n\t\tif num <= count[num]:\n\t\t\treturn num\n\n\treturn -1\n", "solution": "\ndef search(lst):\n\t'''\n\tYou are given a non-empty list of positive integers. Return the greatest integer that is greater than \n\tzero, and has a frequency greater than or equal to the value of the integer itself. \n\tThe frequency of an integer is the number of times it appears in the list.\n\tIf no such a value exist, return -1.\n\tExamples:\n\t\tsearch([4, 1, 2, 2, 3, 1]) == 2\n\t\tsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n\t\tsearch([5, 5, 4, 4, 4]) == -1\n\t'''\n\n\n\tcount = dict()\n\tfor num in lst:\n\t\tif num not in count:\n\t\t\tcount[num] = 0\n\n\t\tcount[num] += 1\n\n\tfor num in sorted(count.keys(), reverse=True):\n\t\tif num <= count[num]:\n\t\t\treturn num\n\n\treturn -1\n"}
{"task_id": "HumanEval/70", "completion": "\n\t\tans.append(sorted_list[j])\n\t\ti += 1\n\t\tj -= 1\n\tif i == j:\n\t\tans.append(sorted_list[i])\n\treturn ans\n", "solution": "\ndef strange_sort_list(lst):\n\t'''\n\tGiven list of integers, return list in strange order.\n\tStrange sorting, is when you start with the minimum value,\n\tthen maximum of the remaining integers, then minimum and so on.\n\n\tExamples:\n\tstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n\tstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\tstrange_sort_list([]) == []\n\t'''\n\n\tsorted_list = sorted(lst)\n\tans, i, j = [], 0, len(sorted_list) - 1\n\twhile i < j:\n\t\tans.append(sorted_list[i])\n\n\t\tans.append(sorted_list[j])\n\t\ti += 1\n\t\tj -= 1\n\tif i == j:\n\t\tans.append(sorted_list[i])\n\treturn ans\n"}
{"task_id": "HumanEval/71", "completion": "\n\tif a + b > c and a + c > b and b + c > a:\n\t\t# calculate semi-perimeter\n\t\ts = (a + b + c) / 2\n\t\t# calculate area using Heron's formula\n\t\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\t\treturn round(area, 2)\n\telse:\n\t\treturn -", "solution": "\ndef triangle_area(a, b, c):\n\t'''\n\tGiven the lengths of the three sides of a triangle. Return the area of\n\tthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \n\tOtherwise return -1\n\tThree sides make a valid triangle when the sum of any two sides is greater \n\tthan the third side.\n\tExample:\n\ttriangle_area(3, 4, 5) == 6.00\n\ttriangle_area(1, 2, 10) == -1\n\t'''\n\n\n\n\tif a + b > c and a + c > b and b + c > a:\n\t\t# calculate semi-perimeter\n\t\ts = (a + b + c) / 2\n\t\t# calculate area using Heron's formula\n\t\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\t\treturn round(area, 2)\n\telse:\n\t\treturn -"}
{"task_id": "HumanEval/72", "completion": "\n\t\n\t# Check if the list is a palindrome\n\tif q != q[::-1]:\n\t\treturn False\n\t\n\t# Check if the sum of the elements is less than or equal to the maximum possible weight\n\tif sum(q) <= w:\n\t\treturn True\n\t\n\treturn False\n", "solution": "\ndef will_it_fly(q,w):\n\t'''\n\tWrite a function that returns True if the object q will fly, and False otherwise.\n\tThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n\tExample:\n\twill_it_fly([1, 2], 5) \u279e False \n\t# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n\twill_it_fly([3, 2, 3], 1) \u279e False\n\t# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\twill_it_fly([3, 2, 3], 9) \u279e True\n\t# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n\twill_it_fly([3], 5) \u279e True\n\t# 3 is less than the maximum possible weight, and it's balanced.\n\t'''\n\n\n\t\n\t# Check if the list is a palindrome\n\tif q != q[::-1]:\n\t\treturn False\n\t\n\t# Check if the sum of the elements is less than or equal to the maximum possible weight\n\tif sum(q) <= w:\n\t\treturn True\n\t\n\treturn False\n"}
{"task_id": "HumanEval/73", "completion": "\n\t\tif arr[i] != arr_reversed[i]:\n\t\t\tcnt += 1\n\treturn cnt\n", "solution": "\ndef smallest_change(arr):\n\t\"\"\"\n\tGiven an array arr of integers, find the minimum number of elements that\n\tneed to be changed to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\tFor example:\n\tsmallest_change([1,2,3,5,4,7,9,6]) == 4\n\tsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallest_change([1, 2, 3, 2, 1]) == 0\n\t\"\"\"\n\n\tarr_reversed, cnt = arr[::-1], 0\n\tfor i in range(len(arr) // 2):\n\n\t\tif arr[i] != arr_reversed[i]:\n\t\t\tcnt += 1\n\treturn cnt\n"}
{"task_id": "HumanEval/74", "completion": "\n\ttotal_chars1 = sum(len(word) for word in lst1)\n\ttotal_chars2 = sum(len(word) for word in lst2)\n\n\tif total_chars1 < total_chars2:\n\t\treturn lst1\n\telif total_chars2 < total_chars1:\n\t\treturn lst2\n\telse:\n\t\treturn lst1\n", "solution": "\ndef total_match(lst1, lst2):\n\t'''\n\tWrite a function that accepts two lists of strings and returns the list that has \n\ttotal number of chars in the all strings of the list less than the other list.\n\n\tif the two lists have the same number of chars, return the first list.\n\n\tExamples\n\ttotal_match([], []) \u279e []\n\ttotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n\ttotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n\ttotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n\ttotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\t'''\n\n\n\ttotal_chars1 = sum(len(word) for word in lst1)\n\ttotal_chars2 = sum(len(word) for word in lst2)\n\n\tif total_chars1 < total_chars2:\n\t\treturn lst1\n\telif total_chars2 < total_chars1:\n\t\treturn lst2\n\telse:\n\t\treturn lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n\t\t\t\tisprime[j] = False\n\tprimes = [i for i in range(2, a + 1) if isprime[i]]\n\tcount = 0\n\tfor i in range(len(primes)):\n\t\tfor j in range(i + 1, len(primes)):\n\t\t\tfor k in range(j + 1, len(primes)):\n\t\t\t\tif primes[i] * primes[j] *", "solution": "\ndef is_multiply_prime(a):\n\t\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100. \n\tExample:\n\tis_multiply_prime(30) == True\n\t30 = 2 * 3 * 5\n\t\"\"\"\n\n\tif a <= 1: return False\n\tisprime = [True] * (a + 1)\n\tfor i in range(2, a + 1):\n\t\tif isprime[i]:\n\t\t\tfor j in range(i + i, a + 1, i):\n\n\t\t\t\tisprime[j] = False\n\tprimes = [i for i in range(2, a + 1) if isprime[i]]\n\tcount = 0\n\tfor i in range(len(primes)):\n\t\tfor j in range(i + 1, len(primes)):\n\t\t\tfor k in range(j + 1, len(primes)):\n\t\t\t\tif primes[i] * primes[j] *"}
{"task_id": "HumanEval/76", "completion": "\n\n\ti = 0\n\twhile True:\n\t\tpower = n ** i\n\t\tif power > x:\n\t\t\treturn False\n\t\tif power == x:\n\t\t\treturn True\n\t\ti += 1\n", "solution": "\ndef is_simple_power(x, n):\n\t\"\"\"Your task is to write a function that returns true if a number x is a simple\n\tpower of n and false in other cases.\n\tx is a simple power of n if n**int=x\n\tFor example:\n\tis_simple_power(1, 4) => true\n\tis_simple_power(2, 2) => true\n\tis_simple_power(8, 2) => true\n\tis_simple_power(3, 2) => false\n\tis_simple_power(3, 1) => false\n\tis_simple_power(5, 3) => false\n\t\"\"\"\n\n\tif x == 1: return True\n\tif n == 0: return x == 0\n\tif n == 1: return x == 1\n\tif n == -1: return abs(x) == 1\n\n\n\ti = 0\n\twhile True:\n\t\tpower = n ** i\n\t\tif power > x:\n\t\t\treturn False\n\t\tif power == x:\n\t\t\treturn True\n\t\ti += 1\n"}
{"task_id": "HumanEval/77", "completion": "\n\ta = abs(a)\n\tif a == 0:\n\t\treturn True\n\ti = 0\n\twhile i**3 <= a:\n\t\tif i**3 == a:\n\t\t\treturn True\n\t\ti += 1\n\treturn False\n", "solution": "\ndef iscube(a):\n\t'''\n\tWrite a function that takes an integer a and returns True \n\tif this ingeger is a cube of some integer number.\n\tNote: you may assume the input is always valid.\n\tExamples:\n\tiscube(1) ==> True\n\tiscube(2) ==> False\n\tiscube(-1) ==> True\n\tiscube(64) ==> True\n\tiscube(0) ==> True\n\tiscube(180) ==> False\n\t'''\n\n\n\ta = abs(a)\n\tif a == 0:\n\t\treturn True\n\ti = 0\n\twhile i**3 <= a:\n\t\tif i**3 == a:\n\t\t\treturn True\n\t\ti += 1\n\treturn False\n"}
{"task_id": "HumanEval/78", "completion": "\n\tprime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n\tcount = 0\n\tfor digit in num:\n\t\tif digit in prime_hex_digits:\n\t\t\tcount += 1\n\treturn count\n", "solution": "\ndef hex_key(num):\n\t\"\"\"You have been tasked to write a function that receives \n\ta hexadecimal number as a string and counts the number of hexadecimal \n\tdigits that are primes (prime number, or a prime, is a natural number \n\tgreater than 1 that is not a product of two smaller natural numbers).\n\tHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\tPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\tSo you have to determine a number of the following digits: 2, 3, 5, 7, \n\tB (=decimal 11), D (=decimal 13).\n\tNote: you may assume the input is always correct or empty string, \n\tand symbols A,B,C,D,E,F are always uppercase.\n\tExamples:\n\tFor num = \"AB\" the output should be 1.\n\tFor num = \"1077E\" the output should be 2.\n\tFor num = \"ABED1A33\" the output should be 4.\n\tFor num = \"123456789ABCDEF0\" the output should be 6.\n\tFor num = \"2020\" the output should be 2.\n\t\"\"\"\n\n\n\tprime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n\tcount = 0\n\tfor digit in num:\n\t\tif digit in prime_hex_digits:\n\t\t\tcount += 1\n\treturn count\n"}
{"task_id": "HumanEval/79", "completion": "\n\tbinary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n\treturn 'db' + binary + 'db'  # Add 'db' prefix and suffix\n", "solution": "\ndef decimal_to_binary(decimal):\n\t\"\"\"You will be given a number in decimal form and your task is to convert it to\n\tbinary format. The function should return a string, with each character representing a binary\n\tnumber. Each character in the string will be '0' or '1'.\n\n\tThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\n\tThe extra characters are there to help with the format.\n\n\tExamples:\n\tdecimal_to_binary(15)   # returns \"db1111db\"\n\tdecimal_to_binary(32)   # returns \"db100000db\"\n\t\"\"\"\n\n\n\tbinary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n\treturn 'db' + binary + 'db'  # Add 'db' prefix and suffix\n"}
{"task_id": "HumanEval/80", "completion": "\n\t\tif len(set(s[i:i+3])) == 3:\n\t\t\treturn True\n\treturn False\n", "solution": "\ndef is_happy(s):\n\t\"\"\"You are given a string s.\n\tYour task is to check if the string is happy or not.\n\tA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n\tFor example:\n\tis_happy(a) => False\n\tis_happy(aa) => False\n\tis_happy(abcd) => True\n\tis_happy(aabb) => False\n\tis_happy(adb) => True\n\tis_happy(xyy) => False\n\t\"\"\"\n\n\tif len(s) < 3: return False\n\tfor i in range(len(s) - 2):\n\n\t\tif len(set(s[i:i+3])) == 3:\n\t\t\treturn True\n\treturn False\n"}
{"task_id": "HumanEval/81", "completion": "\n\t  elif score > 2.0:\n\t\treturn \"C+\"\n\t  elif score > 1.7:\n\t\treturn \"C\"\n\t  elif score > 1.3:\n\t\treturn \"C-\"\n\t  elif score > 1.0:\n\t\treturn \"D+\"\n\t  elif score > 0.7:\n\t\treturn \"D\"\n\t  elif score > 0.0:\n\t\treturn \"D-\"\n\t  else:\n\t\treturn \"", "solution": "\ndef numerical_letter_grade(grades):\n\t\"\"\"It is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write \n\ta function that can output a list of letter grades using the following table:\n\t\t\t GPA       |    Letter grade\n\t\t\t  4.0                A+\n\t\t\t> 3.7                A \n\t\t\t> 3.3                A- \n\t\t\t> 3.0                B+\n\t\t\t> 2.7                B \n\t\t\t> 2.3                B-\n\t\t\t> 2.0                C+\n\t\t\t> 1.7                C\n\t\t\t> 1.3                C-\n\t\t\t> 1.0                D+ \n\t\t\t> 0.7                D \n\t\t\t> 0.0                D-\n\t\t\t  0.0                E\n    \n\n\tExample:\n\tgrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t\"\"\"\n\n\n\tdef to_letter_grade(score):\n\t  if score == 4.0:\n\t\treturn \"A+\"\n\t  elif score > 3.7:\n\t\treturn \"A\"\n\t  elif score > 3.3:\n\t\treturn \"A-\"\n\t  elif score > 3.0:\n\t\treturn \"B+\"\n\t  elif score > 2.7:\n\t\treturn \"B\"\n\t  elif score > 2.3:\n\t\treturn \"B-\"\n\n\t  elif score > 2.0:\n\t\treturn \"C+\"\n\t  elif score > 1.7:\n\t\treturn \"C\"\n\t  elif score > 1.3:\n\t\treturn \"C-\"\n\t  elif score > 1.0:\n\t\treturn \"D+\"\n\t  elif score > 0.7:\n\t\treturn \"D\"\n\t  elif score > 0.0:\n\t\treturn \"D-\"\n\t  else:\n\t\treturn \""}
{"task_id": "HumanEval/82", "completion": "\n\t\tif a < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(a**0.5) + 1):\n\t\t\tif a % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\treturn is_prime(len(string))\n", "solution": "\ndef prime_length(string):\n\t\"\"\"Write a function that takes a string and returns True if the string\n\tlength is a prime number or False otherwise\n\tExamples\n\tprime_length('Hello') == True\n\tprime_length('abcdcba') == True\n\tprime_length('kittens') == True\n\tprime_length('orange') == False\n\t\"\"\"\n\n\tdef is_prime(a):\n\n\t\tif a < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(a**0.5) + 1):\n\t\t\tif a % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\treturn is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n\tif n == 1:\n\t\treturn 2\n\telse:\n\t\treturn 10**(n-1)\n", "solution": "\ndef starts_one_ends(n):\n\t\"\"\"\n\tGiven a positive integer n, return the count of the numbers of n-digit\n\tpositive integers that start or end with 1.\n\t\"\"\"\n\n\n\n\tif n == 1:\n\t\treturn 2\n\telse:\n\t\treturn 10**(n-1)\n"}
{"task_id": "HumanEval/84", "completion": "\n\tdigit_sum = sum(int(digit) for digit in str(N))\n\treturn bin(digit_sum)[2:]\n", "solution": "\ndef solve(N):\n\t\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n\tExample\n\t\tFor N = 1000, the sum of digits will be 1 the output should be \"1\".\n\t\tFor N = 150, the sum of digits will be 6 the output should be \"110\".\n\t\tFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n\tVariables:\n\t\t@N integer\n\t\t\t Constraints: 0 \u2264 N \u2264 10000.\n\tOutput:\n\t\t a string of binary number\n\t\"\"\"\n\n\n\n\tdigit_sum = sum(int(digit) for digit in str(N))\n\treturn bin(digit_sum)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n\tfor i in range(1, len(lst), 2):\n\t\tif lst[i] % 2 == 0:\n\t\t\ts += lst[i]\n\treturn s\n", "solution": "\ndef add(lst):\n\t\"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\tadd([4, 2, 6, 7]) ==> 2 \n\t\"\"\"\n\n\n\ts = 0\n\n\tfor i in range(1, len(lst), 2):\n\t\tif lst[i] % 2 == 0:\n\t\t\ts += lst[i]\n\treturn s\n"}
{"task_id": "HumanEval/86", "completion": "\n\twords = s.split(' ')\n\tordered_words = [''.join(sorted(word)) for word in words]\n\treturn ' '.join(ordered_words)\n", "solution": "\ndef anti_shuffle(s):\n\t\"\"\"\n\tWrite a function that takes a string and returns an ordered version of it.\n\tOrdered version of string, is a string where all words (separated by space)\n\tare replaced by a new word where all the characters arranged in\n\tascending order based on ascii value.\n\tNote: You should keep the order of words and blank spaces in the sentence.\n\n\tFor example:\n\tanti_shuffle('Hi') returns 'Hi'\n\tanti_shuffle('hello') returns 'ehllo'\n\tanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\t\"\"\"\n\n\n\twords = s.split(' ')\n\tordered_words = [''.join(sorted(word)) for word in words]\n\treturn ' '.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n\t\tfor j, y in enumerate(l):\n\t\t\tif y == x:\n\t\t\t\tres.append((i, j))\n\treturn sorted(res, key=lambda x: (x[0], -x[1]))\n", "solution": "\ndef get_row(lst, x):\n\t\"\"\"\n\tYou are given a 2 dimensional data, as a nested lists,\n\twhich is similar to matrix, however, unlike matrices,\n\teach row may contain a different number of columns.\n\tGiven lst, and integer x, find integers x in the list,\n\tand return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\teach tuple is a coordinate - (row, columns), starting with 0.\n\tSort coordinates initially by rows in ascending order.\n\tAlso, sort coordinates of the row by columns in descending order.\n    \n\tExamples:\n\tget_row([\n\t  [1,2,3,4,5,6],\n\t  [1,2,3,4,1,6],\n\t  [1,2,3,4,5,1]\n\t], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\tget_row([], 1) == []\n\tget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\t\"\"\"\n\n\tres = []\n\tfor i, l in enumerate(lst):\n\n\t\tfor j, y in enumerate(l):\n\t\t\tif y == x:\n\t\t\t\tres.append((i, j))\n\treturn sorted(res, key=lambda x: (x[0], -x[1]))\n"}
{"task_id": "HumanEval/88", "completion": "\n\tif not array:\n\t\treturn []\n\telif len(array) == 1:\n\t\treturn [array[0]]\n\telse:\n\t\tfirst_value = array[0]\n\t\tlast_value = array[-1]\n\t\tsum_value = first_value + last_value\n\t\tif sum_value % 2 == 0:\n\t\t\treturn sorted(array, reverse=True)\n\t\telse:\n\t\t\treturn sorted(array", "solution": "\ndef sort_array(array):\n\t\"\"\"\n\tGiven an array of non-negative integers, return a copy of the given array after sorting,\n\tyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n\tor sort it in descending order if the sum( first index value, last index value) is even.\n\n\tNote:\n\t* don't change the given array.\n\n\tExamples:\n\t* sort_array([]) => []\n\t* sort_array([5]) => [5]\n\t* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n\t* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\t\"\"\"\n\n\n\n\tif not array:\n\t\treturn []\n\telif len(array) == 1:\n\t\treturn [array[0]]\n\telse:\n\t\tfirst_value = array[0]\n\t\tlast_value = array[-1]\n\t\tsum_value = first_value + last_value\n\t\tif sum_value % 2 == 0:\n\t\t\treturn sorted(array, reverse=True)\n\t\telse:\n\t\t\treturn sorted(array"}
{"task_id": "HumanEval/89", "completion": "\n\tencrypted_string = \"\"\n\tfor char in s:\n\t\tif char.isalpha():\n\t\t\tif char.islower():\n\t\t\t\tnew_char = chr((ord(char) - ord('a') - 2) % 26 + ord('a'))\n\t\t\t\tencrypted_string += new_char\n\t\t\telse:\n\t\t\t\tnew_char = chr((ord(char) - ord('A') - 2)", "solution": "\ndef encrypt(s):\n\t\"\"\"Create a function encrypt that takes a string as an argument and\n\treturns a string encrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\tencrypt('hi') returns 'lm'\n\tencrypt('asdfghjkl') returns 'ewhjklnop'\n\tencrypt('gf') returns 'kj'\n\tencrypt('et') returns 'ix'\n\t\"\"\"\n\n\n\tencrypted_string = \"\"\n\tfor char in s:\n\t\tif char.isalpha():\n\t\t\tif char.islower():\n\t\t\t\tnew_char = chr((ord(char) - ord('a') - 2) % 26 + ord('a'))\n\t\t\t\tencrypted_string += new_char\n\t\t\telse:\n\t\t\t\tnew_char = chr((ord(char) - ord('A') - 2)"}
{"task_id": "HumanEval/90", "completion": "\n\treturn sorted_list[1]\n", "solution": "\ndef next_smallest(lst):\n\t\"\"\"\n\tYou are given a list of integers.\n\tWrite a function next_smallest() that returns the 2nd smallest element of the list.\n\tReturn None if there is no such element.\n    \n\tnext_smallest([1, 2, 3, 4, 5]) == 2\n\tnext_smallest([5, 1, 4, 3, 2]) == 2\n\tnext_smallest([]) == None\n\tnext_smallest([1, 1]) == None\n\t\"\"\"\n\n\tif len(lst) <= 1: return None\n\tsorted_list = sorted(lst)\n\n\treturn sorted_list[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n\tboredoms = 0\n\tsentences = S.split('.') + S.split('?') + S.split('!')\n\tfor sentence in sentences:\n\t\tif sentence.strip().startswith(\"I\"):\n\t\t\tboredoms += 1\n\treturn boredoms\n", "solution": "\ndef is_bored(S):\n\t\"\"\"\n\tYou'll be given a string of words, and your task is to count the number\n\tof boredoms. A boredom is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n   \n\tFor example:\n\t>>> is_bored(\"Hello world\")\n\t0\n\t>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t\"\"\"\n\n\n\tboredoms = 0\n\tsentences = S.split('.') + S.split('?') + S.split('!')\n\tfor sentence in sentences:\n\t\tif sentence.strip().startswith(\"I\"):\n\t\t\tboredoms += 1\n\treturn boredoms\n"}
{"task_id": "HumanEval/92", "completion": "\n\tif isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n\t\tif x == y + z or y == x + z or z == x + y:\n\t\t\treturn True\n\treturn False\n", "solution": "\ndef any_int(x, y, z):\n\t'''\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n    \n\tExamples\n\tany_int(5, 2, 7) \u279e True\n    \n\tany_int(3, 2, 2) \u279e False\n\n\tany_int(3, -2, 1) \u279e True\n    \n\tany_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n\t'''\n\n\n\tif isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n\t\tif x == y + z or y == x + z or z == x + y:\n\t\t\treturn True\n\treturn False\n"}
{"task_id": "HumanEval/93", "completion": "\n\n\tdef replace_vowel(ch):\n\t\tvowels = \"aeiou\"\n\t\tif ch in vowels:\n\t\t\tindex = vowels.index(ch)\n\t\t\treturn vowels[(index + 2) % 5]\n\t\treturn ch\n\n\tencoded_message = \"\"\n\tfor ch in message:\n\t\tif ch.isalpha():\n\t\t\tencoded_message += switch_case(replace_v", "solution": "\ndef encode(message):\n\t\"\"\"\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n    \n\tExamples:\n\t>>> encode('test')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'tHKS KS C MGSSCGG'\n\t\"\"\"\n\n\n\tdef switch_case(ch):\n\t\tif ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n\t\t\treturn chr(ord(ch) + 32)\n\t\telif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n\t\t\treturn chr(ord(ch) - 32)\n\n\n\tdef replace_vowel(ch):\n\t\tvowels = \"aeiou\"\n\t\tif ch in vowels:\n\t\t\tindex = vowels.index(ch)\n\t\t\treturn vowels[(index + 2) % 5]\n\t\treturn ch\n\n\tencoded_message = \"\"\n\tfor ch in message:\n\t\tif ch.isalpha():\n\t\t\tencoded_message += switch_case(replace_v"}
{"task_id": "HumanEval/94", "completion": "\n\n\tprimes = [x for x in lst if is_prime(x)]\n\tif primes:\n\t\treturn sum(int(d) for d in str(max(primes)))\n\telse:\n\t\treturn 0\n", "solution": "\n\ndef skjkasdkd(lst):\n\t\"\"\"You are given a list of integers.\n\tYou need to find the largest prime value and return the sum of its digits.\n\n\tExamples:\n\tFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\tFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\tFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n\tFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n\tFor lst = [0,81,12,3,1,21] the output should be 3\n\tFor lst = [0,8,1,2,1,7] the output should be 7\n\t\"\"\"\n\n\n\tdef is_prime(a):\n\t\treturn not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n\n\tprimes = [x for x in lst if is_prime(x)]\n\tif primes:\n\t\treturn sum(int(d) for d in str(max(primes)))\n\telse:\n\t\treturn 0\n"}
{"task_id": "HumanEval/95", "completion": "\n\t\tif not isinstance(k, str):\n\t\t\treturn False\n\t\tif k != k.lower():\n\t\t\tlower = False\n\t\tif k != k.upper():\n\t\t\tupper = False\n\treturn lower or upper\n", "solution": "\ndef check_dict_case(dict):\n\t\"\"\"\n\tGiven a dictionary, return True if all keys are strings in lower \n\tcase or all keys are strings in upper case, else return False.\n\tThe function should return False is the given dictionary is empty.\n\tExamples:\n\tcheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\tcheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n\tcheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n\tcheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\tcheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\t\"\"\"\n\n\tkeys = list(dict.keys())\n\tif keys == []: return False\n\tlower, upper = True, True\n\tfor k in keys:\n\n\t\tif not isinstance(k, str):\n\t\t\treturn False\n\t\tif k != k.lower():\n\t\t\tlower = False\n\t\tif k != k.upper():\n\t\t\tupper = False\n\treturn lower or upper\n"}
{"task_id": "HumanEval/96", "completion": "\n\t\tif isprime[i]:\n\t\t\tans.append(i)\n\t\t\tfor j in range(i * i, n, i):\n\t\t\t\tisprime[j] = False\n\treturn ans\n", "solution": "\ndef count_up_to(n):\n\t\"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n\tintegers that are prime numbers and less than n.\n\tfor example:\n\tcount_up_to(5) => [2,3]\n\tcount_up_to(11) => [2,3,5,7]\n\tcount_up_to(0) => []\n\tcount_up_to(20) => [2,3,5,7,11,13,17,19]\n\tcount_up_to(1) => []\n\tcount_up_to(18) => [2,3,5,7,11,13,17]\n\t\"\"\"\n\n\n\tans = []\n\tisprime = [True] * (n + 1)\n\tfor i in range(2, n):\n\n\t\tif isprime[i]:\n\t\t\tans.append(i)\n\t\t\tfor j in range(i * i, n, i):\n\t\t\t\tisprime[j] = False\n\treturn ans\n"}
{"task_id": "HumanEval/97", "completion": "\n\t# Get the unit digits of a and b\n\ta_unit_digit = abs(a) % 10\n\tb_unit_digit = abs(b) % 10\n\n\t# Return the product of the unit digits\n\treturn a_unit_digit * b_unit_digit\n", "solution": "\ndef multiply(a, b):\n\t\"\"\"Complete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t\"\"\"\n\n\n\t# Get the unit digits of a and b\n\ta_unit_digit = abs(a) % 10\n\tb_unit_digit = abs(b) % 10\n\n\t# Return the product of the unit digits\n\treturn a_unit_digit * b_unit_digit\n"}
{"task_id": "HumanEval/98", "completion": "\n\t\tif s[i] in 'AEIOU':\n\t\t\tcnt += 1\n\treturn cnt\n", "solution": "\ndef count_upper(s):\n\t\"\"\"\n\tGiven a string s, count the number of uppercase vowels in even indices.\n    \n\tFor example:\n\tcount_upper('aBCdEf') returns 1\n\tcount_upper('abcdefg') returns 0\n\tcount_upper('dBBE') returns 0\n\t\"\"\"\n\n\tcnt = 0\n\tfor i in range(0, len(s), 2):\n\n\t\tif s[i] in 'AEIOU':\n\t\t\tcnt += 1\n\treturn cnt\n"}
{"task_id": "HumanEval/99", "completion": "\n\t\telse:\n\t\t\treturn int(val) if val > 0 else -int(val)\n\n\treturn rounding(float(value))\n", "solution": "\ndef closest_integer(value):\n\t'''\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\n\tExamples\n\t>>> closest_integer(\"10\")\n\t10\n\t>>> closest_integer(\"15.3\")\n\t15\n\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closest_integer(\"14.5\") should\n\treturn 15 and closest_integer(\"-14.5\") should return -15.\n\t'''\n\n\n\tdef rounding(val):\n\t\tif abs(val - int(val)) != 0.5:\n\t\t\treturn round(val)\n\n\t\telse:\n\t\t\treturn int(val) if val > 0 else -int(val)\n\n\treturn rounding(float(value))\n"}
{"task_id": "HumanEval/100", "completion": "\n\tfor i in range(n):\n\t\tans.append(num)\n\t\tif num % 2 == 0:\n\t\t\tnum += 1\n\t\telse:\n\t\t\tnum += 2\n\treturn ans\n", "solution": "\ndef make_a_pile(n):\n\t\"\"\"\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t- the next odd number if n is odd.\n\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> make_a_pile(3)\n\t[3, 5, 7]\n\t\"\"\"\n\n\n\tans, num = [], n\n\n\tfor i in range(n):\n\t\tans.append(num)\n\t\tif num % 2 == 0:\n\t\t\tnum += 1\n\t\telse:\n\t\t\tnum += 2\n\treturn ans\n"}
{"task_id": "HumanEval/101", "completion": "\n\treturn s.replace(',', '').split()\n", "solution": "\ndef words_string(s):\n\t\"\"\"\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n    \n\tFor example:\n\twords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t\"\"\"\n\n\n\treturn s.replace(',', '').split()\n"}
{"task_id": "HumanEval/102", "completion": "\n\tif x > y:\n\t\treturn -1\n\telif x % 2 == 0:\n\t\treturn x\n\telse:\n\t\treturn x + 1 if x + 1 <= y else -1\n", "solution": "\ndef choose_num(x, y):\n\t\"\"\"This function takes two positive numbers x and y and returns the\n\tbiggest even integer number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchoose_num(12, 15) = 14\n\tchoose_num(13, 12) = -1\n\t\"\"\"\n\n\n\n\tif x > y:\n\t\treturn -1\n\telif x % 2 == 0:\n\t\treturn x\n\telse:\n\t\treturn x + 1 if x + 1 <= y else -1\n"}
{"task_id": "HumanEval/103", "completion": "\n\tif n > m:\n\t\treturn -1\n\tavg = round((n + m) / 2)\n\treturn bin(avg)\n", "solution": "\ndef rounded_avg(n, m):\n\t\"\"\"You are given two positive integers n and m, and your task is to compute the\n\taverage of the integers from n through m (including n and m). \n\tRound the answer to the nearest integer and convert that to binary.\n\tIf n is greater than m, return -1.\n\tExample:\n\trounded_avg(1, 5) => \"0b11\"\n\trounded_avg(7, 5) => -1\n\trounded_avg(10, 20) => \"0b1111\"\n\trounded_avg(20, 33) => \"0b11010\"\n\t\"\"\"\n\n\n\n\tif n > m:\n\t\treturn -1\n\tavg = round((n + m) / 2)\n\treturn bin(avg)\n"}
{"task_id": "HumanEval/104", "completion": "\n\t\t\tif int(ch) % 2 == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\treturn sorted([i for i in x if judge(i)])\n", "solution": "\ndef unique_digits(x):\n\t\"\"\"Given a list of positive integers x. return a sorted list of all \n\telements that hasn't any even digit.\n\n\tNote: Returned list should be sorted in increasing order.\n    \n\tFor example:\n\t>>> unique_digits([15, 33, 1422, 1])\n\t[1, 15, 33]\n\t>>> unique_digits([152, 323, 1422, 10])\n\t[]\n\t\"\"\"\n\n\n\tdef judge(x):\n\t\tfor ch in str(x):\n\n\t\t\tif int(ch) % 2 == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\treturn sorted([i for i in x if judge(i)])\n"}
{"task_id": "HumanEval/105", "completion": "\n\t  elif x == 6:\n\t\treturn \"Six\"\n\t  elif x == 7:\n\t\treturn \"Seven\"\n\t  elif x == 8:\n\t\treturn \"Eight\"\n\t  elif x == 9:\n\t\treturn \"Nine\"\n\t  else:\n\t\treturn \"\"\n\n\tarr = [x for x in arr if 1 <= x <= 9]\n\tarr.sort(reverse=True)\n\treturn [to_word", "solution": "\ndef by_length(arr):\n\t\"\"\"\n\tGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n\treverse the resulting array, and then replace each digit by its corresponding name from\n\t\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n\tFor example:\n\t  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\t\t\t-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\t\t\t-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n\t  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n\t  If the array is empty, return an empty array:\n\t  arr = []\n\t  return []\n    \n\t  If the array has any strange number ignore it:\n\t  arr = [1, -1 , 55] \n\t\t\t-> sort arr -> [-1, 1, 55]\n\t\t\t-> reverse arr -> [55, 1, -1]\n\t  return = ['One']\n\t\"\"\"\n\n\tdef to_word(x: int) -> str:\n\t  if x == 1:\n\t\treturn \"One\"\n\t  elif x == 2:\n\t\treturn \"Two\"\n\t  elif x == 3:\n\t\treturn \"Three\"\n\t  elif x == 4:\n\t\treturn \"Four\"\n\t  elif x == 5:\n\t\treturn \"Five\"\n\n\t  elif x == 6:\n\t\treturn \"Six\"\n\t  elif x == 7:\n\t\treturn \"Seven\"\n\t  elif x == 8:\n\t\treturn \"Eight\"\n\t  elif x == 9:\n\t\treturn \"Nine\"\n\t  else:\n\t\treturn \"\"\n\n\tarr = [x for x in arr if 1 <= x <= 9]\n\tarr.sort(reverse=True)\n\treturn [to_word"}
{"task_id": "HumanEval/106", "completion": "\n\n\tdef factorial(i):\n\t\t\"\"\" Calculate the factorial of a number \"\"\"\n\t\tif i == 0: return 1\n\t\tresult = 1\n\t\tfor j in range(1, i + 1):\n\t\t\tresult *= j\n\t\treturn result\n\n\tdef sum_to_i(i):\n\t\t\"\"\" Calculate the sum of numbers from 1 to i \"\"\"\n\t\treturn i * (i + 1)", "solution": "\ndef f(n):\n\t\"\"\" Implement the function f that takes n as a parameter,\n\tand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n\tor the sum of numbers from 1 to i otherwise.\n\ti starts from 1.\n\tthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n\tExample:\n\tf(5) == [1, 2, 6, 24, 15]\n\t\"\"\"\n\n\n\tif n == 0: return []\n\tif n == 1: return [1]\n\tif n == 2: return [1, 2]\n\n\n\n\tdef factorial(i):\n\t\t\"\"\" Calculate the factorial of a number \"\"\"\n\t\tif i == 0: return 1\n\t\tresult = 1\n\t\tfor j in range(1, i + 1):\n\t\t\tresult *= j\n\t\treturn result\n\n\tdef sum_to_i(i):\n\t\t\"\"\" Calculate the sum of numbers from 1 to i \"\"\"\n\t\treturn i * (i + 1)"}
{"task_id": "HumanEval/107", "completion": "\n\t\t\tif i % 2 == 0:\n\t\t\t\teven_cnt += 1\n\t\t\telse:\n\t\t\t\todd_cnt += 1\n\treturn (even_cnt, odd_cnt)\n", "solution": "\ndef even_odd_palindrome(n):\n\t\"\"\"\n\tGiven a positive integer n, return a tuple that has the number of even and odd\n\tinteger palindromes that fall within the range(1, n), inclusive.\n\n\tExample 1:\n\n\t\tInput: 3\n\t\tOutput: (1, 2)\n\t\tExplanation:\n\t\tInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n\tExample 2:\n\n\t\tInput: 12\n\t\tOutput: (4, 6)\n\t\tExplanation:\n\t\tInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n\tNote:\n\t\t1. 1 <= n <= 10^3\n\t\t2. returned tuple has the number of even and odd integer palindromes respectively.\n\t\"\"\"\n\n\n\todd_cnt, even_cnt = 0, 0\n\tfor i in range(1, n + 1):\n\t\tif str(i) == str(i)[::-1]:\n\n\t\t\tif i % 2 == 0:\n\t\t\t\teven_cnt += 1\n\t\t\telse:\n\t\t\t\todd_cnt += 1\n\treturn (even_cnt, odd_cnt)\n"}
{"task_id": "HumanEval/108", "completion": "\n\t\treturn sum(int(i) for i in l) > 0\n\n\treturn sum(judge(x) for x in arr)\n", "solution": "\ndef count_nums(arr):\n\t\"\"\"\n\tWrite a function count_nums which takes an array of integers and returns\n\tthe number of elements which has a sum of digits > 0.\n\tIf a number is negative, then its first signed digit will be negative:\n\te.g. -123 has signed digits -1, 2, and 3.\n\t>>> count_nums([]) == 0\n\t>>> count_nums([-1, 11, -11]) == 1\n\t>>> count_nums([1, 1, 2]) == 3\n\t\"\"\"\n\n\tdef judge(x: int) -> int:\n\t\tl = list(str(x))\n\t\tif l[0] == \"-\":\n\t\t\tl = l[1:]\n\n\t\treturn sum(int(i) for i in l) > 0\n\n\treturn sum(judge(x) for x in arr)\n"}
{"task_id": "HumanEval/109", "completion": "\n\n\tn = len(arr)\n\tfor i in range(n):\n\t\trotated_arr = arr[i:] + arr[:i]\n\t\tif rotated_arr == sorted_arr:\n\t\t\treturn True\n\treturn False\n", "solution": "\ndef move_one_ball(arr):\n\t\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\tnumbers in the array will be randomly ordered. Your task is to determine if\n\tit is possible to get an array sorted in non-decreasing order by performing \n\tthe following operation on the given array:\n\t\tYou are allowed to perform right shift operation any number of times.\n    \n\tOne right shift operation means shifting all elements of the array by one\n\tposition in the right direction. The last element of the array will be moved to\n\tthe starting position in the array i.e. 0th index. \n\n\tIf it is possible to obtain the sorted array by performing the above operation\n\tthen return True else return False.\n\tIf the given array is empty then return True.\n\n\tNote: The given list is guaranteed to have unique elements.\n\n\tFor Example:\n    \n\tmove_one_ball([3, 4, 5, 1, 2])==>True\n\tExplanation: By performin 2 right shift operations, non-decreasing order can\n\t\t\t\t be achieved for the given array.\n\tmove_one_ball([3, 5, 4, 1, 2])==>False\n\tExplanation:It is not possible to get non-decreasing order for the given\n\t\t\t\tarray by performing any number of right shift operations.\n                \n\t\"\"\"\n\n    \n\tsorted_arr = sorted(arr)\n\tif arr == sorted_arr: return True\n\n\n\tn = len(arr)\n\tfor i in range(n):\n\t\trotated_arr = arr[i:] + arr[:i]\n\t\tif rotated_arr == sorted_arr:\n\t\t\treturn True\n\treturn False\n"}
{"task_id": "HumanEval/110", "completion": "\n\todd_in_lst1 = [x for x in lst1 if x % 2 != 0]\n\teven_in_lst2 = [x for x in lst2 if x % 2 == 0]\n\n\tif len(odd_in_lst1) <= len(even_in_lst2):\n\t\treturn \"YES\"\n\telse:\n\t\treturn \"NO\"\n", "solution": "\ndef exchange(lst1, lst2):\n\t\"\"\"In this problem, you will implement a function that takes two lists of numbers,\n\tand determines whether it is possible to perform an exchange of elements\n\tbetween them to make lst1 a list of only even numbers.\n\tThere is no limit on the number of exchanged elements between lst1 and lst2.\n\tIf it is possible to exchange elements between the lst1 and lst2 to make\n\tall the elements of lst1 to be even, return \"YES\".\n\tOtherwise, return \"NO\".\n\tFor example:\n\texchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n\texchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n\tIt is assumed that the input lists will be non-empty.\n\t\"\"\"\n\n\n\n\todd_in_lst1 = [x for x in lst1 if x % 2 != 0]\n\teven_in_lst2 = [x for x in lst2 if x % 2 == 0]\n\n\tif len(odd_in_lst1) <= len(even_in_lst2):\n\t\treturn \"YES\"\n\telse:\n\t\treturn \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n\t\t\tcount[word] = count.get(word, 0) + 1\n\tfor key, value in count.items():\n\t\tif value not in ans:\n\t\t\tans[value] = [key]\n\t\telse:\n\t\t\tans[value].append(key)\n\treturn {key: value for key, value in ans.items() if key == max(ans.keys())}\n", "solution": "\ndef histogram(test):\n\t\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n\tof the letter with the most repetition and containing the corresponding count.\n\tIf several letters have the same occurrence, return all of them.\n    \n\tExample:\n\thistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\thistogram('a b b a') == {'a': 2, 'b': 2}\n\thistogram('a b c a b') == {'a': 2, 'b': 2}\n\thistogram('b b b b a') == {'b': 4}\n\thistogram('') == {}\n\n\t\"\"\"\n\n\n\tif test == \"\": return {}    \n\tcount, ans = dict(), dict()\n\tfor word in test.split(\" \"):\n\t\tif word != \"\":\n\n\t\t\tcount[word] = count.get(word, 0) + 1\n\tfor key, value in count.items():\n\t\tif value not in ans:\n\t\t\tans[value] = [key]\n\t\telse:\n\t\t\tans[value].append(key)\n\treturn {key: value for key, value in ans.items() if key == max(ans.keys())}\n"}
{"task_id": "HumanEval/112", "completion": "\n\tresult = ''.join([char for char in s if char not in c])\n\tis_palindrome = result == result[::-1]\n\treturn (result, is_palindrome)\n", "solution": "\ndef reverse_delete(s,c):\n\t\"\"\"Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and True/False for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\t\"\"\"\n\n\n\tresult = ''.join([char for char in s if char not in c])\n\tis_palindrome = result == result[::-1]\n\treturn (result, is_palindrome)\n"}
{"task_id": "HumanEval/113", "completion": "\n\tfor i, s in enumerate(lst):\n\t\todd_count = sum(1 for c in s if int(c) % 2 != 0)\n\t\tans.append(template.replace('i', str(odd_count)).replace('n', str(i+1)))\n\treturn ans\n", "solution": "\ndef odd_count(lst):\n\t\"\"\"Given a list of strings, where each string consists of only digits, return a list.\n\tEach element i of the output should be \"the number of odd elements in the\n\tstring i of the input.\" where all the i's should be replaced by the number\n\tof odd digits in the i'th string of the input.\n\n\t>>> odd_count(['1234567'])\n\t[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\t>>> odd_count(['3',\"11111111\"])\n\t[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\t \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\t\"\"\"\n\n\n\tans, template = [], \"the number of odd elements in the string i of the input.\"\n\n\tfor i, s in enumerate(lst):\n\t\todd_count = sum(1 for c in s if int(c) % 2 != 0)\n\t\tans.append(template.replace('i', str(odd_count)).replace('n', str(i+1)))\n\treturn ans\n"}
{"task_id": "HumanEval/114", "completion": "\n\tfor num in nums:\n\t\ts += num\n\t\tans = min(ans, s)\n\t\tif s > 0:\n\t\t\ts = 0\n\treturn ans\n", "solution": "\ndef minSubArraySum(nums):\n\t\"\"\"\n\tGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\tof nums.\n\tExample\n\tminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\tminSubArraySum([-1, -2, -3]) == -6\n\t\"\"\"\n\n\n\tif all(x >= 0 for x in nums): return min(nums)\n\ts, ans = 0, 0\n\n\tfor num in nums:\n\t\ts += num\n\t\tans = min(ans, s)\n\t\tif s > 0:\n\t\t\ts = 0\n\treturn ans\n"}
{"task_id": "HumanEval/115", "completion": "\n\tfor row in grid:\n\t\tans += sum(row)\n\treturn math.ceil(ans / capacity)\n", "solution": "import math\n\ndef max_fill(grid, capacity):\n\t\"\"\"\n\tYou are given a rectangular grid of wells. Each row represents a single well,\n\tand each 1 in a row represents a single unit of water.\n\tEach well has a corresponding bucket that can be used to extract water from it, \n\tand all buckets have the same capacity.\n\tYour task is to use the buckets to empty the wells.\n\tOutput the number of times you need to lower the buckets.\n\n\tExample 1:\n\t\tInput: \n\t\t\tgrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\t\t\tbucket_capacity : 1\n\t\tOutput: 6\n\n\tExample 2:\n\t\tInput: \n\t\t\tgrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\t\t\tbucket_capacity : 2\n\t\tOutput: 5\n    \n\tExample 3:\n\t\tInput: \n\t\t\tgrid : [[0,0,0], [0,0,0]]\n\t\t\tbucket_capacity : 5\n\t\tOutput: 0\n\n\tConstraints:\n\t\t* all wells have the same length\n\t\t* 1 <= grid.length <= 10^2\n\t\t* 1 <= grid[:,1].length <= 10^2\n\t\t* grid[i][j] -> 0 | 1\n\t\t* 1 <= capacity <= 10\n\t\"\"\"\n\n\n\tans = 0    \n\n\tfor row in grid:\n\t\tans += sum(row)\n\treturn math.ceil(ans / capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\n\t\ty1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n\t\tif x1 == y1:\n\t\t\treturn x - y\n\t\treturn x1 - y1\n\n\treturn sorted(arr, key=cmp_to_key(cmp))\n", "solution": "\ndef sort_array(arr):\n\t\"\"\"\n\tIn this Kata, you have to sort an array of non-negative integers according to\n\tnumber of ones in their binary representation in ascending order.\n\tFor similar number of ones, sort based on decimal value.\n\n\tIt must be implemented like this:\n\t>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\t>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\t>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\t\"\"\"\n\n\tfrom functools import cmp_to_key\n\tdef cmp(x: int, y: int) -> int:\n\t\tx1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n\n\t\ty1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n\t\tif x1 == y1:\n\t\t\treturn x - y\n\t\treturn x1 - y1\n\n\treturn sorted(arr, key=cmp_to_key(cmp))\n"}
{"task_id": "HumanEval/117", "completion": "\n\t\tconsonants = sum(1 for c in word if c.lower() in \"bcdfghjklmnpqrstvwxyz\")\n\t\tif consonants == n:\n\t\t\tans.append(word)\n\treturn ans\n", "solution": "\ndef select_words(s, n):\n\t\"\"\"Given a string s and a natural number n, you have been tasked to implement \n\ta function that returns a list of all words from string s that contain exactly \n\tn consonants, in order these words appear in the string s.\n\tIf the string s is empty then the function should return an empty list.\n\tNote: you may assume the input string contains only letters and spaces.\n\tExamples:\n\tselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\tselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\tselect_words(\"simple white space\", 2) ==> []\n\tselect_words(\"Hello world\", 4) ==> [\"world\"]\n\tselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\t\"\"\"\n\n\n\tans = []\n\tfor word in s.split(\" \"):\n\n\t\tconsonants = sum(1 for c in word if c.lower() in \"bcdfghjklmnpqrstvwxyz\")\n\t\tif consonants == n:\n\t\t\tans.append(word)\n\treturn ans\n"}
{"task_id": "HumanEval/118", "completion": "\n\n\tvowels = [ch for ch in word[::-1] if is_vowel(ch)]\n\tconsonants = [ch for ch in word[::-1] if not is_vowel(ch)]\n\n\tif len(vowels) == 0 or len(consonants) < 2:\n\t\treturn \"\"\n\n\tvowel_index = 0\n\tconsonant_index = 0\n\n", "solution": "\ndef get_closest_vowel(word):\n\t\"\"\"You are given a word. Your task is to find the closest vowel that stands between \n\ttwo consonants from the right side of the word (case sensitive).\n    \n\tVowels in the beginning and ending doesn't count. Return empty string if you didn't\n\tfind any vowel met the above condition. \n\n\tYou may assume that the given string contains English letter only.\n\n\tExample:\n\tget_closest_vowel(\"yogurt\") ==> \"u\"\n\tget_closest_vowel(\"FULL\") ==> \"U\"\n\tget_closest_vowel(\"quick\") ==> \"\"\n\tget_closest_vowel(\"ab\") ==> \"\"\n\t\"\"\"\n\n\n\tdef is_vowel(ch: str) -> bool:\n\t\treturn ch in \"aeiouAEIOU\"\n\n\n\tvowels = [ch for ch in word[::-1] if is_vowel(ch)]\n\tconsonants = [ch for ch in word[::-1] if not is_vowel(ch)]\n\n\tif len(vowels) == 0 or len(consonants) < 2:\n\t\treturn \"\"\n\n\tvowel_index = 0\n\tconsonant_index = 0\n\n"}
{"task_id": "HumanEval/119", "completion": "\n\t\tfor char in s:\n\t\t\tif char == '(':\n\t\t\t\tcnt += 1\n\t\t\telse:\n\t\t\t\tcnt -= 1\n\t\t\tif cnt < 0:\n\t\t\t\treturn False\n\t\treturn cnt == 0\n\n\tstr1, str2 = lst\n\tif valid_parens(str1 + str2):\n\t\treturn 'Yes'\n\telif valid_parens(str2 + str1):\n\t\treturn '", "solution": "\ndef match_parens(lst):\n\t'''\n\tYou are given a list of two strings, both strings consist of open\n\tparentheses '(' or close parentheses ')' only.\n\tYour job is to check if it is possible to concatenate the two strings in\n\tsome order, that the resulting string will be good.\n\tA string S is considered to be good if and only if all parentheses in S\n\tare balanced. For example: the string '(())()' is good, while the string\n\t'())' is not.\n\tReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n\tExamples:\n\tmatch_parens(['()(', ')']) == 'Yes'\n\tmatch_parens([')', ')']) == 'No'\n\t'''\n\n\n\tdef valid_parens(s: str) -> bool:\n\t\tcnt = 0\n\n\t\tfor char in s:\n\t\t\tif char == '(':\n\t\t\t\tcnt += 1\n\t\t\telse:\n\t\t\t\tcnt -= 1\n\t\t\tif cnt < 0:\n\t\t\t\treturn False\n\t\treturn cnt == 0\n\n\tstr1, str2 = lst\n\tif valid_parens(str1 + str2):\n\t\treturn 'Yes'\n\telif valid_parens(str2 + str1):\n\t\treturn '"}
{"task_id": "HumanEval/120", "completion": "\n\timport heapq\n\t\n\t# Create a max heap using negative values\n\tmax_heap = [-num for num in arr]\n\theapq.heapify(max_heap)\n\t\n\t# Pop the maximum k elements\n\tmax_k_elements = []\n\tfor _ in range(k):\n\t\tmax_k_elements.append(-heapq.heappop(max_heap))\n\t\n\t# Return", "solution": "\ndef maximum(arr, k):\n\t\"\"\"\n\tGiven an array arr of integers and a positive integer k, return a sorted list \n\tof length k with the maximum k numbers in arr.\n\n\tExample 1:\n\n\t\tInput: arr = [-3, -4, 5], k = 3\n\t\tOutput: [-4, -3, 5]\n\n\tExample 2:\n\n\t\tInput: arr = [4, -4, 4], k = 2\n\t\tOutput: [4, 4]\n\n\tExample 3:\n\n\t\tInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\t\tOutput: [2]\n\n\tNote:\n\t\t1. The length of the array will be in the range of [1, 1000].\n\t\t2. The elements in the array will be in the range of [-1000, 1000].\n\t\t3. 0 <= k <= len(arr)\n\t\"\"\"\n\n\n\timport heapq\n\t\n\t# Create a max heap using negative values\n\tmax_heap = [-num for num in arr]\n\theapq.heapify(max_heap)\n\t\n\t# Pop the maximum k elements\n\tmax_k_elements = []\n\tfor _ in range(k):\n\t\tmax_k_elements.append(-heapq.heappop(max_heap))\n\t\n\t# Return"}
{"task_id": "HumanEval/121", "completion": "\n\tsum_of_odds = 0\n\tfor i in range(0, len(lst), 2):\n\t\tif lst[i] % 2 != 0:\n\t\t\tsum_of_odds += lst[i]\n\treturn sum_of_odds\n", "solution": "\ndef solution(lst):\n\t\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t\"\"\"\n\n\n\tsum_of_odds = 0\n\tfor i in range(0, len(lst), 2):\n\t\tif lst[i] % 2 != 0:\n\t\t\tsum_of_odds += lst[i]\n\treturn sum_of_odds\n"}
{"task_id": "HumanEval/122", "completion": "\n\t\treturn len(str(x))\n\n\ttotal = 0\n\tfor i in range(k):\n\t\tif digits(arr[i]) <= 2:\n\t\t\ttotal += arr[i]\n\treturn total\n", "solution": "\ndef add_elements(arr, k):\n\t\"\"\"\n\tGiven a non-empty array of integers arr and an integer k, return\n\tthe sum of the elements with at most two digits from the first k elements of arr.\n\n\tExample:\n\n\t\tInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\t\tOutput: 24 # sum of 21 + 3\n\n\tConstraints:\n\t\t1. 1 <= len(arr) <= 100\n\t\t2. 1 <= k <= len(arr)\n\t\"\"\"\n\n\n\tdef digits(x: int) -> int:\n\n\t\treturn len(str(x))\n\n\ttotal = 0\n\tfor i in range(k):\n\t\tif digits(arr[i]) <= 2:\n\t\t\ttotal += arr[i]\n\treturn total\n"}
{"task_id": "HumanEval/123", "completion": "\n\t\tif x % 2 != 0:\n\t\t\tans.append(x)\n\t\tif x % 2 == 0:\n\t\t\tx = x // 2\n\t\telse:\n\t\t\tx = 3 * x + 1\n\treturn sorted(ans)\n", "solution": "\ndef get_odd_collatz(n):\n\t\"\"\"\n\tGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t1. Collatz(1) is [1].\n\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\t\"\"\"\n\n\n\tans, x = [], n\n\twhile x != 1:\n\n\t\tif x % 2 != 0:\n\t\t\tans.append(x)\n\t\tif x % 2 == 0:\n\t\t\tx = x // 2\n\t\telse:\n\t\t\tx = 3 * x + 1\n\treturn sorted(ans)\n"}
{"task_id": "HumanEval/124", "completion": "\n\tif not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n\tm, d, y = int(m), int(d), int(y)\n\tif m < 1 or m > 12: return False\n\tif d < 1 or d > days[m-1]: return False\n\treturn True\n", "solution": "\ndef valid_date(date):\n\t\"\"\"You have to write a function which validates a given date string and\n\treturns True if the date is valid otherwise False.\n\tThe date is valid if all of the following rules are satisfied:\n\t1. The date string is not empty.\n\t2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n\t3. The months should not be less than 1 or higher than 12.\n\t4. The date should be in the format: mm-dd-yyyy\n\n\tfor example: \n\tvalid_date('03-11-2000') => True\n\n\tvalid_date('15-01-2012') => False\n\n\tvalid_date('04-0-2040') => False\n\n\tvalid_date('06-04-2020') => True\n\n\tvalid_date('06/04/2020') => False\n\t\"\"\"\n\n\tdays = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\tif len(date) != 10: return False\n\tif date[2] != \"-\" or date[5] != \"-\": return False\n\tm, d, y = date[:2], date[3:5], date[6:]\n\n\tif not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n\tm, d, y = int(m), int(d), int(y)\n\tif m < 1 or m > 12: return False\n\tif d < 1 or d > days[m-1]: return False\n\treturn True\n"}
{"task_id": "HumanEval/125", "completion": "\n\n\tlowercase_letters = [ch for ch in txt if ch.islower()]\n\treturn len([ch for ch in lowercase_letters if (ord(ch) - ord('a')) % 2 != 0])\n", "solution": "\ndef split_words(txt):\n\t'''\n\tGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\tExamples\n\tsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n\tsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n\tsplit_words(\"abcdef\") == 3 \n\t'''\n\n\twhitespace = tuple(' \\n\\r\\t')\n\tif any([x in txt for x in whitespace]): return txt.split()\n\tif \",\" in txt: return txt.split(\",\")\n\n\n\tlowercase_letters = [ch for ch in txt if ch.islower()]\n\treturn len([ch for ch in lowercase_letters if (ord(ch) - ord('a')) % 2 != 0])\n"}
{"task_id": "HumanEval/126", "completion": "\n\t\tif x in count:\n\t\t\tcount[x] += 1\n\t\telse:\n\t\t\tcount[x] = 1\n\n\t\tif count[x] > 1:\n\t\t\treturn False\n\n\tfor i in range(len(lst) - 1):\n\t\tif lst[i] > lst[i + 1]:\n\t\t\treturn False\n\n\treturn True\n", "solution": "\ndef is_sorted(lst):\n\t'''\n\tGiven a list of numbers, return whether or not they are sorted\n\tin ascending order. If list has more than 1 duplicate of the same\n\tnumber, return False. Assume no negative numbers and only integers.\n\n\tExamples\n\tis_sorted([5]) \u279e True\n\tis_sorted([1, 2, 3, 4, 5]) \u279e True\n\tis_sorted([1, 3, 2, 4, 5]) \u279e False\n\tis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n\tis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n\tis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n\tis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n\tis_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n\t'''\n\n\n\tcount = dict()\n\tfor x in lst:\n\n\t\tif x in count:\n\t\t\tcount[x] += 1\n\t\telse:\n\t\t\tcount[x] = 1\n\n\t\tif count[x] > 1:\n\t\t\treturn False\n\n\tfor i in range(len(lst) - 1):\n\t\tif lst[i] > lst[i + 1]:\n\t\t\treturn False\n\n\treturn True\n"}
{"task_id": "HumanEval/127", "completion": "\n\t\tif a < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(a**0.5) + 1):\n\t\t\tif a % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tstart = max(interval1[0], interval2[0])\n\tend = min(interval1[1], interval2[1])\n\n\tif start > end:\n\t\treturn \"NO\"\n\n\tlength = end", "solution": "\ndef intersection(interval1, interval2):\n\t\"\"\"You are given two intervals,\n\twhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n\tThe given intervals are closed which means that the interval (start, end)\n\tincludes both start and end.\n\tFor each given interval, it is assumed that its start is less or equal its end.\n\tYour task is to determine whether the length of intersection of these two \n\tintervals is a prime number.\n\tExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\twhich its length is 1, which not a prime number.\n\tIf the length of the intersection is a prime number, return \"YES\",\n\totherwise, return \"NO\".\n\tIf the two intervals don't intersect, return \"NO\".\n\n\n\t[input/output] samples:\n\tintersection((1, 2), (2, 3)) ==> \"NO\"\n\tintersection((-1, 1), (0, 4)) ==> \"NO\"\n\tintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\t\"\"\"\n\n\n\tdef is_prime(a):\n\n\t\tif a < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(a**0.5) + 1):\n\t\t\tif a % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tstart = max(interval1[0], interval2[0])\n\tend = min(interval1[1], interval2[1])\n\n\tif start > end:\n\t\treturn \"NO\"\n\n\tlength = end"}
{"task_id": "HumanEval/128", "completion": "\n\tfor num in arr:\n\t\ts += abs(num)\n\t\tsgn *= (1 if num > 0 else -1)\n\treturn s * sgn\n", "solution": "\ndef prod_signs(arr):\n\t\"\"\"\n\tYou are given an array arr of integers and you need to return\n\tsum of magnitudes of integers multiplied by product of all signs\n\tof each number in the array, represented by 1, -1 or 0.\n\tNote: return None for empty arr.\n\n\tExample:\n\t>>> prod_signs([1, 2, 2, -4]) == -9\n\t>>> prod_signs([0, 1]) == 0\n\t>>> prod_signs([]) == None\n\t\"\"\"\n\n\tif arr == []: return None\n\tif 0 in arr: return 0\n\ts, sgn = 0, 1\n\n\tfor num in arr:\n\t\ts += abs(num)\n\t\tsgn *= (1 if num > 0 else -1)\n\treturn s * sgn\n"}
{"task_id": "HumanEval/129", "completion": "\n\t\t\t\tx, y = i, j\n\t\t\t\tbreak\n\t\tbreak\n\n\tdx = [0, 1, 0, -1]\n\tdy = [1, 0, -1, 0]\n\n\tdef dfs(x, y, k, path):\n\t\tif k == 0:\n\t\t\treturn path\n\t\tmin_path = path\n\t\tfor i in range(4):\n\t\t\tnx, ny", "solution": "\ndef minPath(grid, k):\n\t\"\"\"\n\tGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \n\teach cell of the grid contains a value. Every integer in the range [1, N * N]\n\tinclusive appears exactly once on the cells of the grid.\n\n\tYou have to find the minimum path of length k in the grid. You can start\n\tfrom any cell, and in each step you can move to any of the neighbor cells,\n\tin other words, you can go to cells which share an edge with you current\n\tcell.\n\tPlease note that a path of length k means visiting exactly k cells (not\n\tnecessarily distinct).\n\tYou CANNOT go off the grid.\n\tA path A (of length k) is considered less than a path B (of length k) if\n\tafter making the ordered lists of the values on the cells that A and B go\n\tthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\n\tthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\tsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n\tlst_A[j] = lst_B[j].\n\tIt is guaranteed that the answer is unique.\n\tReturn an ordered list of the values on the cells that the minimum path go through.\n\n\tExamples:\n\n\t\tInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n\t\tOutput: [1, 2, 1]\n\n\t\tInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n\t\tOutput: [1]\n\t\"\"\"\n\n\n\tN = len(grid)\n\tx, y = 0, 0\n\tfor i in range(N):\n\t\tfor j in range(N):\n\t\t\tif grid[i][j] == 1:\n\n\t\t\t\tx, y = i, j\n\t\t\t\tbreak\n\t\tbreak\n\n\tdx = [0, 1, 0, -1]\n\tdy = [1, 0, -1, 0]\n\n\tdef dfs(x, y, k, path):\n\t\tif k == 0:\n\t\t\treturn path\n\t\tmin_path = path\n\t\tfor i in range(4):\n\t\t\tnx, ny"}
{"task_id": "HumanEval/130", "completion": "\n\n\tfor i in range(2, n + 1):\n\t\tif i % 2 == 0:\n\t\t\tans.append(1 + i // 2)\n\t\telse:\n\t\t\tans.append(ans[i - 1] + ans[i - 2] + ans[i + 1])\n\n\treturn ans\n", "solution": "\ndef tri(n):\n\t\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n\tthe last couple centuries. However, what people don't know is Tribonacci sequence.\n\tTribonacci sequence is defined by the recurrence:\n\ttri(1) = 3\n\ttri(n) = 1 + n / 2, if n is even.\n\ttri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\tFor example:\n\ttri(2) = 1 + (2 / 2) = 2\n\ttri(4) = 3\n\ttri(3) = tri(2) + tri(1) + tri(4)\n\t\t   = 2 + 3 + 3 = 8 \n\tYou are given a non-negative integer number n, you have to a return a list of the \n\tfirst n + 1 numbers of the Tribonacci sequence.\n\tExamples:\n\ttri(3) = [1, 3, 2, 8]\n\t\"\"\"\n\n\n\tif n == 0: return [1]\n\tif n == 1: return [1, 3]\n\tans = [1, 3]\n\n\n\tfor i in range(2, n + 1):\n\t\tif i % 2 == 0:\n\t\t\tans.append(1 + i // 2)\n\t\telse:\n\t\t\tans.append(ans[i - 1] + ans[i - 2] + ans[i + 1])\n\n\treturn ans\n"}
{"task_id": "HumanEval/131", "completion": "\n\t\tdigit = int(ch)\n\t\tif digit % 2 != 0:\n\t\t\thas_odd = True\n\t\t\tprod *= digit\n\treturn prod if has_odd else 0\n", "solution": "\ndef digits(n):\n\t\"\"\"Given a positive integer n, return the product of the odd digits.\n\tReturn 0 if all digits are even.\n\tFor example:\n\tdigits(1)  == 1\n\tdigits(4)  == 0\n\tdigits(235) == 15\n\t\"\"\"\n\n\n\thas_odd, prod = False, 1\n\tfor ch in str(n):\n\n\t\tdigit = int(ch)\n\t\tif digit % 2 != 0:\n\t\t\thas_odd = True\n\t\t\tprod *= digit\n\treturn prod if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n\t\t\telse:\n\t\t\t\tcnt -= 1\n\t\t\tmax_nest = max(max_nest, cnt)\n\t\t\tif max_nest > 0: return True\n\treturn False\n", "solution": "\ndef is_nested(string):\n\t'''\n\tCreate a function that takes a string as input which contains only square brackets.\n\tThe function should return True if and only if there is a valid subsequence of brackets \n\twhere at least one bracket in the subsequence is nested.\n\n\tis_nested('[[]]') \u279e True\n\tis_nested('[]]]]]]][[[[[]') \u279e False\n\tis_nested('[][]') \u279e False\n\tis_nested('[]') \u279e False\n\tis_nested('[[][]]') \u279e True\n\tis_nested('[[]][[') \u279e True\n\t'''\n\n\n\tfor i in range(len(string)):\n\t\tif string[i] == \"]\": continue\n\t\tcnt, max_nest = 0, 0\n\t\tfor j in range(i, len(string)):\n\t\t\tif string[j] == \"[\":\n\t\t\t\tcnt += 1\n\n\t\t\telse:\n\t\t\t\tcnt -= 1\n\t\t\tmax_nest = max(max_nest, cnt)\n\t\t\tif max_nest > 0: return True\n\treturn False\n"}
{"task_id": "HumanEval/133", "completion": "\n\treturn sum(int(abs(num) + 0.5) ** 2 for num in lst)\n", "solution": "\n\ndef sum_squares(lst):\n\t\"\"\"You are given a list of numbers.\n\tYou need to return the sum of squared numbers in the given list,\n\tround each element in the list to the upper int(Ceiling) first.\n\tExamples:\n\tFor lst = [1,2,3] the output should be 14\n\tFor lst = [1,4,9] the output should be 98\n\tFor lst = [1,3,5,7] the output should be 84\n\tFor lst = [1.4,4.2,0] the output should be 29\n\tFor lst = [-2.4,1,1] the output should be 6\n    \n\n\t\"\"\"\n\n\n\treturn sum(int(abs(num) + 0.5) ** 2 for num in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n\n\tlast_char = txt[-1]\n\tif last_char.isalpha():\n\t\tif len(txt) == 1:\n\t\t\treturn True\n\t\telif txt[-2] == ' ':\n\t\t\treturn True\n\treturn False\n", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n\t'''\n\tCreate a function that returns True if the last character\n\tof a given string is an alphabetical character and is not\n\ta part of a word, and False otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\n\tExamples:\n\tcheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\n\tcheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n\tcheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n\tcheck_if_last_char_is_a_letter(\"\") \u279e False \n\t'''\n\n\tif len(txt) == 0: return False\n\n\n\tlast_char = txt[-1]\n\tif last_char.isalpha():\n\t\tif len(txt) == 1:\n\t\t\treturn True\n\t\telif txt[-2] == ' ':\n\t\t\treturn True\n\treturn False\n"}
{"task_id": "HumanEval/135", "completion": "\n\t\tif arr[i] >= arr[i - 1]:\n\t\t\treturn i - 1\n\treturn -1\n", "solution": "\ndef can_arrange(arr):\n\t\"\"\"Create a function which returns the largest index of an element which\n\tis not greater than or equal to the element immediately preceding it. If\n\tno such element exists then return -1. The given array will not contain\n\tduplicate values.\n\n\tExamples:\n\tcan_arrange([1,2,4,3,5]) = 3\n\tcan_arrange([1,2,3]) = -1\n\t\"\"\"\n\n\n\tfor i in range(len(arr) - 1, 0, -1):\n\n\t\tif arr[i] >= arr[i - 1]:\n\t\t\treturn i - 1\n\treturn -1\n"}
{"task_id": "HumanEval/136", "completion": "\n\tpos = list(filter(lambda x: x > 0, lst))\n\n\tif neg:\n\t\ta = max(neg)\n\telse:\n\t\ta = None\n\n\tif pos:\n\t\tb = min(pos)\n\telse:\n\t\tb = None\n\n\treturn (a, b)\n", "solution": "\ndef largest_smallest_integers(lst):\n\t'''\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as None.\n\n\tExamples:\n\tlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n\tlargest_smallest_integers([]) == (None, None)\n\tlargest_smallest_integers([0]) == (None, None)\n\t'''\n\n\tneg = list(filter(lambda x: x < 0, lst))\n\n\tpos = list(filter(lambda x: x > 0, lst))\n\n\tif neg:\n\t\ta = max(neg)\n\telse:\n\t\ta = None\n\n\tif pos:\n\t\tb = min(pos)\n\telse:\n\t\tb = None\n\n\treturn (a, b)\n"}
{"task_id": "HumanEval/137", "completion": "\n\tnum_b = float(str(b).replace(\",\", \".\"))\n\n\tif num_a > num_b:\n\t\treturn num_a\n\telif num_b > num_a:\n\t\treturn num_b\n\telse:\n\t\treturn None\n", "solution": "\ndef compare_one(a, b):\n\t\"\"\"\n\tCreate a function that takes integers, floats, or strings representing\n\treal numbers, and returns the larger variable in its given variable type.\n\tReturn None if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be . or ,\n\n\tcompare_one(1, 2.5) \u279e 2.5\n\tcompare_one(1, \"2,3\") \u279e \"2,3\"\n\tcompare_one(\"5,1\", \"6\") \u279e \"6\"\n\tcompare_one(\"1\", 1) \u279e None\n\t\"\"\"\n\n\n\tnum_a = float(str(a).replace(\",\", \".\"))\n\n\tnum_b = float(str(b).replace(\",\", \".\"))\n\n\tif num_a > num_b:\n\t\treturn num_a\n\telif num_b > num_a:\n\t\treturn num_b\n\telse:\n\t\treturn None\n"}
{"task_id": "HumanEval/138", "completion": "\n\tif n < 8:\n\t\treturn False\n\telse:\n\t\treturn True\n", "solution": "\ndef is_equal_to_sum_even(n):\n\t\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\tExample\n\tis_equal_to_sum_even(4) == False\n\tis_equal_to_sum_even(6) == False\n\tis_equal_to_sum_even(8) == True\n\t\"\"\"\n\n\n\tif n < 8:\n\t\treturn False\n\telse:\n\t\treturn True\n"}
{"task_id": "HumanEval/139", "completion": "\n\tfor i in range(n, 0, -1):\n\t\tfac *= i\n\t\tans *= fac\n\treturn ans\n", "solution": "\ndef special_factorial(n):\n\t\"\"\"The Brazilian factorial is defined as:\n\tbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\twhere n > 0\n\n\tFor example:\n\t>>> special_factorial(4)\n\t288\n\n\tThe function will receive an integer as input and should return the special\n\tfactorial of this integer.\n\t\"\"\"\n\n\n\tfac, ans = 1, 1\n\n\tfor i in range(n, 0, -1):\n\t\tfac *= i\n\t\tans *= fac\n\treturn ans\n"}
{"task_id": "HumanEval/140", "completion": ".replace(\"  \", \"-\").replace(\" \", \"_\")\n\treturn ans\n", "solution": "\ndef fix_spaces(text):\n\t\"\"\"\n\tGiven a string text, replace all spaces in it with underscores, \n\tand if a string has more than 2 consecutive spaces, \n\tthen replace all consecutive spaces with - \n    \n\tfix_spaces(\"Example\") == \"Example\"\n\tfix_spaces(\"Example 1\") == \"Example_1\"\n\tfix_spaces(\" Example 2\") == \"_Example_2\"\n\tfix_spaces(\" Example   3\") == \"_Example-3\"\n\t\"\"\"\n\n\tans = text\n.replace(\"  \", \"-\").replace(\" \", \"_\")\n\treturn ans\n"}
{"task_id": "HumanEval/141", "completion": "\n\tif len(f_list) != 2 or not f_list[0] or not f_list[1] in ['txt', 'exe', 'dll']:\n\t\treturn \"No\"\n\tif not f_list[0][0].isalpha():\n\t\treturn \"No\"\n\treturn \"Yes\"\n", "solution": "\ndef file_name_check(file_name):\n\t\"\"\"Create a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- There should not be more than three digits ('0'-'9') in the file's name.\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfile_name_check(\"example.txt\") # => 'Yes'\n\tfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t\"\"\"\n\n\tif len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n\t\treturn \"No\"\n\tf_list = file_name.split(\".\")\n\n\tif len(f_list) != 2 or not f_list[0] or not f_list[1] in ['txt', 'exe', 'dll']:\n\t\treturn \"No\"\n\tif not f_list[0][0].isalpha():\n\t\treturn \"No\"\n\treturn \"Yes\"\n"}
{"task_id": "HumanEval/142", "completion": "\n\t\telif i % 4 == 0:\n\t\t\tans += num ** 3\n\treturn ans\n", "solution": "\n\n\ndef sum_squares(lst):\n\t\"\"\"\"\n\tThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t\"\"\"\n\n\tans = 0\n\tfor i, num in enumerate(lst):\n\t\tif i % 3 == 0:\n\t\t\tans += num ** 2\n\n\t\telif i % 4 == 0:\n\t\t\tans += num ** 3\n\treturn ans\n"}
{"task_id": "HumanEval/143", "completion": "\n\tdef is_prime(n):\n\t\tif n < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(n**0.5) + 1):\n\t\t\tif n % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\twords = sentence.split()\n\tprime_words = [word for word in words if is_prime(len(word))]\n\treturn ' '.join(prime_words)\n", "solution": "\ndef words_in_sentence(sentence):\n\t\"\"\"\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\tInput: sentence = \"This is a test\"\n\t\tOutput: \"is\"\n\n\tExample 2:\n\t\tInput: sentence = \"lets go for swimming\"\n\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t* 1 <= len(sentence) <= 100\n\t\t* sentence contains only letters\n\t\"\"\"\n\n\n\n\tdef is_prime(n):\n\t\tif n < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(n**0.5) + 1):\n\t\t\tif n % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\twords = sentence.split()\n\tprime_words = [word for word in words if is_prime(len(word))]\n\treturn ' '.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n\tdef gcd(a, b):\n\t\t\"\"\"Compute the greatest common divisor of a and b.\"\"\"\n\t\twhile b != 0:\n\t\t\ta, b = b, a % b\n\t\treturn a\n\n\t# Parse the fractions\n\tx_num, x_den = map(int, x.split('/'))\n\tn_num, n_den = map(int, n.split('/'))\n\n\t#", "solution": "\ndef simplify(x, n):\n\t\"\"\"Your task is to implement a function that will simplify the expression\n\tx * n. The function returns True if x * n evaluates to a whole number and False\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = True\n\tsimplify(\"1/6\", \"2/1\") = False\n\tsimplify(\"7/10\", \"10/2\") = False\n\t\"\"\"\n\n\n\n\tdef gcd(a, b):\n\t\t\"\"\"Compute the greatest common divisor of a and b.\"\"\"\n\t\twhile b != 0:\n\t\t\ta, b = b, a % b\n\t\treturn a\n\n\t# Parse the fractions\n\tx_num, x_den = map(int, x.split('/'))\n\tn_num, n_den = map(int, n.split('/'))\n\n\t#"}
{"task_id": "HumanEval/145", "completion": "\n\t\treturn (sum(int(i) for i in x_list), x)\n\n\treturn sorted(nums, key=weight)\n", "solution": "\ndef order_by_points(nums):\n\t\"\"\"\n\tWrite a function which sorts the given list of integers\n\tin ascending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> order_by_points([]) == []\n\t\"\"\"\n\n\tdef weight(x):\n\t\tx_list = list(str(x))\n\t\tif x_list[0] == \"-\":\n\t\t\tx_list = x_list[1:]\n\n\t\treturn (sum(int(i) for i in x_list), x)\n\n\treturn sorted(nums, key=weight)\n"}
{"task_id": "HumanEval/146", "completion": "\n\t\tif num > 10:\n\t\t\tstr_num = str(abs(num))\n\t\t\tif str_num[0] in odd and str_num[-1] in odd:\n\t\t\t\tans += 1\n\treturn ans\n", "solution": "\ndef specialFilter(nums):\n\t\"\"\"Write a function that takes an array of numbers as input and returns \n\tthe number of elements in the array that are greater than 10 and both \n\tfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n\tFor example:\n\tspecialFilter([15, -73, 14, -15]) => 1 \n\tspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\t\"\"\"\n\n\tans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n\tfor num in nums:\n\n\t\tif num > 10:\n\t\t\tstr_num = str(abs(num))\n\t\t\tif str_num[0] in odd and str_num[-1] in odd:\n\t\t\t\tans += 1\n\treturn ans\n"}
{"task_id": "HumanEval/147", "completion": "\n\n\ta = [i * i - i + 1 for i in range(1, n + 1)]\n\tcount = 0\n\n\tfor i in range(n):\n\t\tfor j in range(i + 1, n):\n\t\t\tfor k in range(j + 1, n):\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0:\n\t\t\t\t\tcount += 1\n\n\treturn count\n", "solution": "\ndef get_max_triples(n):\n\t\"\"\"\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\tFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\tInput: n = 5\n\t\tOutput: 1\n\t\tExplanation: \n\t\ta = [1, 3, 7, 13, 21]\n\t\tThe only valid triple is (1, 7, 13).\n\t\"\"\"\n\n\n\tif n <= 2: return False\n\n\n\ta = [i * i - i + 1 for i in range(1, n + 1)]\n\tcount = 0\n\n\tfor i in range(n):\n\t\tfor j in range(i + 1, n):\n\t\t\tfor k in range(j + 1, n):\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0:\n\t\t\t\t\tcount += 1\n\n\treturn count\n"}
{"task_id": "HumanEval/148", "completion": "\n\n\tplanet1_index = planets.index(planet1)\n\tplanet2_index = planets.index(planet2)\n\n\tif planet1_index > planet2_index:\n\t\tplanet1_index, planet2_index = planet2_index, planet1_index\n\n\treturn tuple(planets[planet1_index+1:planet2_index])\n", "solution": "\ndef bf(planet1, planet2):\n\t'''\n\tThere are eight planets in our solar system: the closerst to the Sun \n\tis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\tUranus, Neptune.\n\tWrite a function that takes two planet names as strings planet1 and planet2. \n\tThe function should return a tuple containing all planets whose orbits are \n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by \n\tthe proximity to the sun. \n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names. \n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t'''\n\n\tplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\tif planet1 not in planets or planet2 not in planets: return tuple()\n\n\n\tplanet1_index = planets.index(planet1)\n\tplanet2_index = planets.index(planet2)\n\n\tif planet1_index > planet2_index:\n\t\tplanet1_index, planet2_index = planet2_index, planet1_index\n\n\treturn tuple(planets[planet1_index+1:planet2_index])\n"}
{"task_id": "HumanEval/149", "completion": "\n\t\tif len(s) != len(t):\n\t\t\treturn len(s) - len(t)\n\t\telse:\n\t\t\treturn (s > t) - (s < t)\n\n\teven_length_lst = [s for s in lst if len(s) % 2 == 0]\n\treturn sorted(even_length_lst, key=cmp_to_key(cmp))\n", "solution": "\ndef sorted_list_sum(lst):\n\t\"\"\"Write a function that accepts a list of strings as a parameter,\n\tdeletes the strings that have odd lengths from it,\n\tand returns the resulted list with a sorted order,\n\tThe list is always a list of strings and never an array of numbers,\n\tand it may contain duplicates.\n\tThe order of the list should be ascending by length of each word, and you\n\tshould return the list sorted by that rule.\n\tIf two words have the same length, sort the list alphabetically.\n\tThe function should return a list of strings in sorted order.\n\tYou may assume that all words will have the same length.\n\tFor example:\n\tassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n\tassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\t\"\"\"\n\n\tfrom functools import cmp_to_key\n\tdef cmp(s: str, t: str):\n\n\t\tif len(s) != len(t):\n\t\t\treturn len(s) - len(t)\n\t\telse:\n\t\t\treturn (s > t) - (s < t)\n\n\teven_length_lst = [s for s in lst if len(s) % 2 == 0]\n\treturn sorted(even_length_lst, key=cmp_to_key(cmp))\n"}
{"task_id": "HumanEval/150", "completion": "\n\t\tif a < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(a**0.5) + 1):\n\t\t\tif a % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tif is_prime(n):\n\t\treturn x\n\telse:\n\t\treturn y\n", "solution": "\ndef x_or_y(n, x, y):\n\t\"\"\"A simple program which should return the value of x if n is \n\ta prime number and should return the value of y otherwise.\n\n\tExamples:\n\tfor x_or_y(7, 34, 12) == 34\n\tfor x_or_y(15, 8, 5) == 5\n    \n\t\"\"\"\n\n\tdef is_prime(a):\n\n\t\tif a < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(a**0.5) + 1):\n\t\t\tif a % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tif is_prime(n):\n\t\treturn x\n\telse:\n\t\treturn y\n"}
{"task_id": "HumanEval/151", "completion": "\n\t\tif isinstance(num, int) and num > 0 and num % 2 != 0:\n\t\t\tans += num ** 2\n\treturn ans\n", "solution": "\ndef double_the_difference(lst):\n\t'''\n\tGiven a list of numbers, return the sum of squares of the numbers\n\tin the list that are odd. Ignore numbers that are negative or not integers.\n    \n\tdouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\tdouble_the_difference([-1, -2, 0]) == 0\n\tdouble_the_difference([9, -2]) == 81\n\tdouble_the_difference([0]) == 0  \n   \n\tIf the input list is empty, return 0.\n\t'''\n\n\tans = 0\n\tfor num in lst:\n\n\t\tif isinstance(num, int) and num > 0 and num % 2 != 0:\n\t\t\tans += num ** 2\n\treturn ans\n"}
{"task_id": "HumanEval/152", "completion": "\n\tresult = []\n\tfor i in range(len(game)):\n\t\tresult.append(abs(game[i] - guess[i]))\n\treturn result\n", "solution": "\ndef compare(game,guess):\n\t\"\"\"I think we all remember that feeling when the result of some long-awaited\n\tevent is finally known. The feelings and thoughts you have at that moment are\n\tdefinitely worth noting down and comparing.\n\tYour task is to determine if a person correctly guessed the results of a number of matches.\n\tYou are given two arrays of scores and guesses of equal length, where each index shows a match. \n\tReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\n\tthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n\texample:\n\n\tcompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\tcompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\t\"\"\"\n\n\n\tresult = []\n\tfor i in range(len(game)):\n\t\tresult.append(abs(game[i] - guess[i]))\n\treturn result\n"}
{"task_id": "HumanEval/153", "completion": "\n\t\t\tif ch.islower(): SM += 1\n\t\treturn CAP - SM\n\n\tstrongest_extension = None\n\tmax_strength = float('-inf')\n\tfor extension in extensions:\n\t\tstrength_value = strength(extension)\n\t\tif strength_value > max_strength:\n\t\t\tmax_strength = strength_value\n\t\t\tstrongest_extension = extension\n\treturn f\"{class_name}.{strongest", "solution": "\ndef Strongest_Extension(class_name, extensions):\n\t\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\tThe extensions are to be used to load additional classes to the class. The\n\tstrength of the extension is as follows: Let CAP be the number of the uppercase\n\tletters in the extension's name, and let SM be the number of lowercase letters \n\tin the extension's name, the strength is given by the fraction CAP - SM. \n\tYou should find the strongest extension and return a string in this \n\tformat: ClassName.StrongestExtensionName.\n\tIf there are two or more extensions with the same strength, you should\n\tchoose the one that comes first in the list.\n\tFor example, if you are given \"Slices\" as the class and a list of the\n\textensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\treturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n\t(its strength is -1).\n\tExample:\n\tfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\t\"\"\"\n\n\n\tdef strength(s: str) -> int:\n\t\tCAP, SM = 0, 0\n\t\tfor ch in s:\n\t\t\tif ch.isupper(): CAP += 1\n\n\t\t\tif ch.islower(): SM += 1\n\t\treturn CAP - SM\n\n\tstrongest_extension = None\n\tmax_strength = float('-inf')\n\tfor extension in extensions:\n\t\tstrength_value = strength(extension)\n\t\tif strength_value > max_strength:\n\t\t\tmax_strength = strength_value\n\t\t\tstrongest_extension = extension\n\treturn f\"{class_name}.{strongest"}
{"task_id": "HumanEval/154", "completion": "\n\t\treturn False\n\n\trotations = [b[i:] + b[:i] for i in range(len(b))]\n\tfor rotation in rotations:\n\t\tif rotation in a:\n\t\t\treturn True\n\treturn False\n", "solution": "\ndef cycpattern_check(a , b):\n\t\"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n\tcycpattern_check(\"abcd\",\"abd\") => False\n\tcycpattern_check(\"hello\",\"ell\") => True\n\tcycpattern_check(\"whassup\",\"psus\") => False\n\tcycpattern_check(\"abab\",\"baa\") => True\n\tcycpattern_check(\"efef\",\"eeff\") => False\n\tcycpattern_check(\"himenss\",\"simen\") => True\n\n\t\"\"\"\n\n\tif a == b:\n\t\treturn True\n\tif b == \"\":\n\n\t\treturn False\n\n\trotations = [b[i:] + b[:i] for i in range(len(b))]\n\tfor rotation in rotations:\n\t\tif rotation in a:\n\t\t\treturn True\n\treturn False\n"}
{"task_id": "HumanEval/155", "completion": "\n\t\tif ch != '-':\n\t\t\tif int(ch) % 2 == 0:\n\t\t\t\teven += 1\n\t\t\telse:\n\t\t\t\todd += 1\n\treturn (even, odd)\n", "solution": "\ndef even_odd_count(num):\n\t\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n\t Example:\n\t\teven_odd_count(-12) ==> (1, 1)\n\t\teven_odd_count(123) ==> (1, 2)\n\t\"\"\"\n\n\teven, odd = 0, 0\n\tfor ch in str(num):\n\n\t\tif ch != '-':\n\t\t\tif int(ch) % 2 == 0:\n\t\t\t\teven += 1\n\t\t\telse:\n\t\t\t\todd += 1\n\treturn (even, odd)\n"}
{"task_id": "HumanEval/156", "completion": "\n\ti = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n\n\tthousands = m[number // 1000]\n\thundreds = c[(number // 100) % 10]\n\ttens = x[(number // 10) % 10]\n\tones = i[number % 10]", "solution": "\ndef int_to_mini_roman(number):\n\t\"\"\"\n\tGiven a positive integer, obtain its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 1000\n\n\tExamples:\n\t>>> int_to_mini_roman(19) == 'xix'\n\t>>> int_to_mini_roman(152) == 'clii'\n\t>>> int_to_mini_roman(426) == 'cdxxvi'\n\t\"\"\"\n\n\n\tm = [\"\", \"m\"]\n\tc = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n\tx = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n\n\ti = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n\n\tthousands = m[number // 1000]\n\thundreds = c[(number // 100) % 10]\n\ttens = x[(number // 10) % 10]\n\tones = i[number % 10]"}
{"task_id": "HumanEval/157", "completion": "\n\t# Sort the sides\n\tsides = sorted([a, b, c])\n\t# Check if the square of the largest side is equal to the sum of the squares of the other two sides\n\treturn sides[2]**2 == sides[0]**2 + sides[1]**2\n", "solution": "\ndef right_angle_triangle(a, b, c):\n\t'''\n\tGiven the lengths of the three sides of a triangle. Return True if the three\n\tsides form a right-angled triangle, False otherwise.\n\tA right-angled triangle is a triangle in which one angle is right angle or \n\t90 degree.\n\tExample:\n\tright_angle_triangle(3, 4, 5) == True\n\tright_angle_triangle(1, 2, 3) == False\n\t'''\n\n\n\t# Sort the sides\n\tsides = sorted([a, b, c])\n\t# Check if the square of the largest side is equal to the sum of the squares of the other two sides\n\treturn sides[2]**2 == sides[0]**2 + sides[1]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n\t\tunique_chars = len(set(word))\n\t\tif unique_chars > mx_ch_cnt:\n\t\t\tmx_ch_cnt = unique_chars\n\t\t\tans = word\n\t\telif unique_chars == mx_ch_cnt:\n\t\t\tans = min(ans, word)\n\treturn ans\n", "solution": "\ndef find_max(words):\n\t\"\"\"Write a function that accepts a list of strings.\n\tThe list contains different words. Return the word with maximum number\n\tof unique characters. If multiple strings have maximum number of unique\n\tcharacters, return the one which comes first in lexicographical order.\n\n\tfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n\tfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n\tfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\t\"\"\"\n\n\n\tmx_ch_cnt, ans = 0, \"\"\n\tfor word in words:\n\n\t\tunique_chars = len(set(word))\n\t\tif unique_chars > mx_ch_cnt:\n\t\t\tmx_ch_cnt = unique_chars\n\t\t\tans = word\n\t\telif unique_chars == mx_ch_cnt:\n\t\t\tans = min(ans, word)\n\treturn ans\n"}
{"task_id": "HumanEval/159", "completion": "\n\t\treturn [number + need, remaining - need]\n\telse:\n\t\treturn [number + remaining, 0]\n", "solution": "\ndef eat(number, need, remaining):\n\t\"\"\"\n\tYou're a hungry rabbit, and you already have eaten a certain number of carrots,\n\tbut now you need to eat more carrots to complete the day's meals.\n\tyou should return an array of [ total number of eaten carrots after your meals,\n\t\t\t\t\t\t\t\t\tthe number of carrots left after your meals ]\n\tif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n\tExample:\n\t* eat(5, 6, 10) -> [11, 4]\n\t* eat(4, 8, 9) -> [12, 1]\n\t* eat(1, 10, 10) -> [11, 0]\n\t* eat(2, 11, 5) -> [7, 0]\n    \n\tVariables:\n\t@number : integer\n\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\tthe number of remaining carrots thet exist in stock\n    \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t\"\"\"\n\n\n\tif need <= remaining:\n\n\t\treturn [number + need, remaining - need]\n\telse:\n\t\treturn [number + remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\n\tfor i in range(len(operand)-1):\n\t\texp += str(operand[i]) + operator[i]\n\texp += str(operand[-1])\n\n\treturn eval(exp)\n", "solution": "\ndef do_algebra(operator, operand):\n\t\"\"\"\n\tGiven two lists operator, and operand. The first list has basic algebra operations, and \n\tthe second list is a list of integers. Use the two given lists to build the algebric \n\texpression and return the evaluation of this expression.\n\n\tThe basic algebra operations:\n\tAddition ( + ) \n\tSubtraction ( - ) \n\tMultiplication ( * ) \n\tFloor division ( // ) \n\tExponentiation ( ** ) \n\n\tExample:\n\toperator['+', '*', '-']\n\tarray = [2, 3, 4, 5]\n\tresult = 2 + 3 * 4 - 5\n\t=> result = 9\n\n\tNote:\n\t\tThe length of operator list is equal to the length of operand list minus one.\n\t\tOperand is a list of of non-negative integers.\n\t\tOperator list has at least one operator, and operand list has at least two operands.\n\n\t\"\"\"\n\n\n\texp = \"\"\n\n\tfor i in range(len(operand)-1):\n\t\texp += str(operand[i]) + operator[i]\n\texp += str(operand[-1])\n\n\treturn eval(exp)\n"}
{"task_id": "HumanEval/161", "completion": "\n\t\t\thas_letter = True\n\t\t\tif ch.islower():\n\t\t\t\tans += ch.upper()\n\t\t\telse:\n\t\t\t\tans += ch.lower()\n\t\telse:\n\t\t\tans += ch\n\n\tif not has_letter:\n\t\treturn s[::-1]\n\n\treturn ans\n", "solution": "\ndef solve(s):\n\t\"\"\"You are given a string s.\n\tif s[i] is a letter, reverse its case from lower to upper or vise versa, \n\totherwise keep it as it is.\n\tIf the string contains no letters, reverse the string.\n\tThe function should return the resulted string.\n\tExamples\n\tsolve(\"1234\") = \"4321\"\n\tsolve(\"ab\") = \"AB\"\n\tsolve(\"#a@C\") = \"#A@c\"\n\t\"\"\"\n\n\tans, has_letter = \"\", False\n\tfor ch in s:\n\t\tif ch.isalpha():\n\n\t\t\thas_letter = True\n\t\t\tif ch.islower():\n\t\t\t\tans += ch.upper()\n\t\t\telse:\n\t\t\t\tans += ch.lower()\n\t\telse:\n\t\t\tans += ch\n\n\tif not has_letter:\n\t\treturn s[::-1]\n\n\treturn ans\n"}
{"task_id": "HumanEval/162", "completion": "\n\treturn hashlib.md5(text.encode()).hexdigest()\n", "solution": "\ndef string_to_md5(text):\n\t\"\"\"\n\tGiven a string 'text', return its md5 hash equivalent string.\n\tIf 'text' is an empty string, return None.\n\n\t>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t\"\"\"\n\n\tif text == \"\": return None\n\timport hashlib\n\n\treturn hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n\t# Ensure a and b are in ascending order\n\ta, b = min(a, b), max(a, b)\n\n\t# Generate even numbers between a and b\n\teven_numbers = [i for i in range(a, b + 1) if i % 2 == 0]\n\n\treturn even_numbers\n", "solution": "\ndef generate_integers(a, b):\n\t\"\"\"\n\tGiven two positive integers a and b, return the even digits between a\n\tand b, in ascending order.\n\n\tFor example:\n\tgenerate_integers(2, 8) => [2, 4, 6, 8]\n\tgenerate_integers(8, 2) => [2, 4, 6, 8]\n\tgenerate_integers(10, 14) => []\n\t\"\"\"\n\n\n\n\t# Ensure a and b are in ascending order\n\ta, b = min(a, b), max(a, b)\n\n\t# Generate even numbers between a and b\n\teven_numbers = [i for i in range(a, b + 1) if i % 2 == 0]\n\n\treturn even_numbers\n"}
