{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Check if in given list of numbers, are any two numbers closer to each other than\n    # given threshold.\n    # >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    # False\n    # >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    # True\n\n\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    # separate those group into separate strings and return the list of those.\n    # Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    # Ignore any spaces in the input string.\n    # >>> separate_paren_groups('( ) (( )) (( )( ))')\n    # ['()', '(())', '(()())']\n\n\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        elif ch == \")\": cnt -= 1\n        group += ch\n        if cnt == 0:\n            results.append(group)\n            group = \"\"\n    return results"}
{"task_id": "HumanEval/2", "solution": "    # Given a positive floating point number, it can be decomposed into\n    # and integer part (largest integer smaller than given number) and decimals\n    # (leftover part always smaller than 1).\n\n    # Return the decimal part of the number.\n    # >>> truncate_number(3.5)\n    # 0.5\n    # >>> truncate_number(3.14159)\n    # 0.14159\n    # >>> truncate_number(100)\n    # 0.0\n    # >>> truncate_number(0.0)\n    # 0.0\n    # >>> truncate_number(0.1)\n    # 0.1\n    # >>> truncate_number(0.9)\n    # 0.9\n    # >>> truncate_number(1.0)\n    # 0.0\n    # >>> truncate_number(1.1)\n    # 0.1\n    # >>> truncate_number(1.9)\n    # 0.9\n    # >>> truncate_number(2.0)\n    # 0.0\n    # >>> truncate_number(2.1)\n    # 0.1\n    # >>> truncate_number(2.9)\n    # 0.9\n    # >>> truncate_number(3.0)\n    # 0.0\n    # >>> truncate_number(3.1)\n    # 0.1\n    # >>> truncate_number(3.9)\n    # 0.9\n    # >>> truncate_number(4.0)\n    # 0.0\n    # >>> truncate_number(4.1)\n    # 0.1\n    # >>> truncate_number(4.9)\n    # 0.9\n    # >>> truncate_number(5.0)\n    # 0.0\n    # >>> truncate_number(5.1)\n    # 0.1\n    # >>> truncate_number(5.9)\n    # 0.9\n    # >>> truncate_number(6.0)\n    # 0.0\n    # >>> truncate_number(6.1)\n    # 0.1\n    # >>> truncate_number(6.9)\n    # 0.9\n    # >>> truncate_number(7.0)\n    # 0.0\n    # >>> truncate_number(7.1)\n    # 0.1\n    # >>> truncate_number(7.9)\n    # 0.9\n    # >>> truncate_number(8.0)\n    # 0.0\n    # >>> truncate_number(8.1)\n    # 0.1\n    # >>> truncate_number(8.9)\n    # 0.9\n    # >>> truncate_number(9.0)\n    # 0.0\n    # >>> truncate_number(9.1)\n    # 0.1\n    # >>> truncate_number(9.9)\n    # 0.9\n    # >>> truncate_number(10.0)\n    # 0.0\n    # >>> truncate_number(10.1)\n    # 0.1\n    # >>> truncate_number(10.9)\n    # 0.9\n    # >>> truncate_number(11.0)\n    # 0.0"}
{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    # You're given a list of deposit and withdrawal operations on a bank account that starts with\n    # zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    # at that point function should return True. Otherwise it should return False.\n    # >>> below_zero([1, 2, 3])\n    # False\n    # >>> below_zero([1, 2, -4, 5])\n    # True\n\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "    # For a given list of input numbers, calculate Mean Absolute Deviation\n    # around the mean of this dataset.\n    # Mean Absolute Deviation is the average absolute difference between each\n    # element and a centerpoint (mean in this case):\n    # MAD = average | x - x_mean |\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    # 1.0\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n    # 1.2\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n    # 1.2\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n    # 1.2909944487358056\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n    # 1.3552631578947367\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n    # 1.403212697813315\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n    # 1.4378213795593084\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n    # 1.4626060115206532\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n    # 1.480144209653172\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n    # 1.492422986355332\n    # >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0,"}
{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    # >>> intersperse([], 4)\n    # []\n    # >>> intersperse([1, 2, 3], 4)\n    # [1, 4, 2, 4, 3]\n\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i < len(numbers) - 1:\n            res.append(delimeter)\n    return res"}
{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    # For each of the group, output the deepest level of nesting of parentheses.\n    # E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    # >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    # [2, 3, 1, 3]\n\n    \n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == '(':\n                cnt += 1\n                max_depth = max(max_depth, cnt)\n            elif ch == ')':\n                cnt -= 1\n        return max_depth\n\n    return [count_depth(s) for s in paren_string.split()]"}
{"task_id": "HumanEval/7", "solution": "    # Filter an input list of strings only for ones that contain given substring\n    # >>> filter_by_substring([], 'a')\n    # []\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    # ['abc', 'bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], '')\n    # ['abc', 'bacd', 'cde', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'xyz')\n    # []\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['bacd', 'cde']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e')\n    # ['cde']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'r')\n    # ['array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    # ['abc', 'bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n    # ['bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['bacd', 'cde']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e')\n    # ['cde']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'r')\n    # ['array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    # ['abc', 'bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n    # ['bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n    # ['bacd', 'cde']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n    # ['bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e')\n    # ['cde']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'r')\n    # ['array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    # ['abc', 'bacd', 'array']\n    # >>> filter_by_substring(['abc', 'bacd', 'cde', '"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    # Empty sum should be equal to 0 and empty product should be equal to 1.\n    # >>> sum_product([])\n    # (0, 1)\n    # >>> sum_product([1, 2, 3, 4])\n    # (10, 24)\n\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p"}
{"task_id": "HumanEval/9", "solution": "    # From a given list of integers, generate a list of rolling maximum element found until given moment\n    # in the sequence.\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    # [1, 2, 3, 3, 3, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2, 1])\n    # [1, 2, 3, 3, 3, 4, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2, 1, 1])\n    # [1, 2, 3, 3, 3, 4, 4, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2, 1, 1, 1])\n    # [1, 2, 3, 3, 3, 4, 4, 4, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2, 1, 1, 1, 1])\n    # [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2, 1, 1, 1, 1, 1])\n    # [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2, 1, 1, 1, 1, 1, 1])\n    # [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2, 1, 1, 1, 1, 1, 1, 1])\n    # [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1])\n    # [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    # [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\n    # >>> rolling_max([1, 2, 3, 2, 3"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    # Find the shortest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome('')\n    # ''\n    # >>> make_palindrome('cat')\n    # 'catac'\n    # >>> make_palindrome('cata')\n    # 'catac'\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n\n    return string + string[0]"}
{"task_id": "HumanEval/11", "solution": "    # Input are two strings a and b consisting only of 1s and 0s.\n    # Perform binary XOR on these inputs and return result also as a string.\n    # >>> string_xor('010', '110')\n    # '100'\n    # >>> string_xor('010', '001')\n    # '011'\n    # >>> string_xor('110', '110')\n    # '000'\n    # >>> string_xor('110', '001')\n    # '111'\n    # >>> string_xor('110', '0011')\n    # '1111'\n    # >>> string_xor('110', '00110')\n    # '11110'\n    # >>> string_xor('110', '001100')\n    # '111100'\n    # >>> string_xor('110', '0011001')\n    # '1111001'\n    # >>> string_xor('110', '00110011')\n    # '11110011'\n    # >>> string_xor('110', '001100110')\n    # '111100110'\n    # >>> string_xor('110', '0011001100')\n    # '1111001100'\n    # >>> string_xor('110', '00110011001')\n    # '11110011001'\n    # >>> string_xor('110', '001100110011')\n    # '111100110011'\n    # >>> string_xor('110', '0011001100110')\n    # '1111001100110'\n    # >>> string_xor('110', '00110011001100')\n    # '11110011001100'\n    # >>> string_xor('110', '001100110011001')\n    # '111100110011001'\n    # >>> string_xor('110', '0011001100110011')\n    # '1111001100110011'\n    # >>> string_xor('110', '00110011001100110')\n    # '11110011001100110'\n    # >>> string_xor('110', '001100110011001100')\n    # '111100110011001100'\n    # >>> string_xor('110', '0011001100110011001')\n    # '1111"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    # Out of list of strings, return the longest one. Return the first one in case of multiple\n    # strings of the same length. Return None in case the input list is empty.\n    # >>> longest([])\n\n    # >>> longest(['a', 'b', 'c'])\n    # 'a'\n    # >>> longest(['a', 'bb', 'ccc'])\n    # 'ccc'\n\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/13", "solution": "    # Return a greatest common divisor of two integers a and b\n    # >>> greatest_common_divisor(3, 5)\n    # 1\n    # >>> greatest_common_divisor(25, 15)\n    # 5\n    # >>> greatest_common_divisor(100, 10)\n    # 10\n    # >>> greatest_common_divisor(100, 100)\n    # 100\n    # >>> greatest_common_divisor(100, 101)\n    # 1\n    # >>> greatest_common_divisor(100, 1000)\n    # 100\n    # >>> greatest_common_divisor(100, 1001)\n    # 1\n    # >>> greatest_common_divisor(100, 10000)\n    # 100\n    # >>> greatest_common_divisor(100, 10001)\n    # 1\n    # >>> greatest_common_divisor(100, 100000)\n    # 100\n    # >>> greatest_common_divisor(100, 100001)\n    # 1\n    # >>> greatest_common_divisor(100, 1000000)\n    # 100\n    # >>> greatest_common_divisor(100, 1000001)\n    # 1\n    # >>> greatest_common_divisor(100, 10000000)\n    # 100\n    # >>> greatest_common_divisor(100, 100000000)\n    # 100\n    # >>> greatest_common_divisor(100, 1000000000)\n    # 100\n    # >>> greatest_common_divisor(100, 10000000000)\n    # 100\n    # >>> greatest_common_divisor(100, 100000000000)\n    # 100\n    # >>> greatest_common_divisor(100, 1000000000000)\n    # 100\n    # >>> greatest_common_divisor(100, 10000000000000)\n    # 100\n    # >>> greatest_common_divisor(100, 100000000000000)\n    # 100\n    # >>> greatest_common_divisor(100, 1000000000000000)\n    # 100\n    # >>> greatest_common_divisor(100, 10000000000000000)\n    # 100\n    # >>> greatest_common_divisor(100, 100000000000000000)\n    # 100\n    # >>> greatest_common_divisor(100, 100000000000000000"}
{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    # Return list of all prefixes from shortest to longest of the input string\n    # >>> all_prefixes('abc')\n    # ['a', 'ab', 'abc']\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "solution": "    # Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    # >>> string_sequence(0)\n    # '0'\n    # >>> string_sequence(5)\n    # '0 1 2 3 4 5'\n    # >>> string_sequence(10)\n    # '0 1 2 3 4 5 6 7 8 9 10'\n    # >>> string_sequence(15)\n    # '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n    # >>> string_sequence(20)\n    # '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\n    # >>> string_sequence(25)\n    # '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'\n    # >>> string_sequence(30)\n    # '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30'\n    # >>> string_sequence(35)\n    # '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35'\n    # >>> string_sequence(40)\n    # '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40'\n    # >>> string_sequence(45)\n    # '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45'\n    # >>> string_sequence(50)\n    # '0 1 2 3 4 5 6 7 8 9 1"}
{"task_id": "HumanEval/16", "solution": "    # Given a string, find out how many distinct characters (regardless of case) does it consist of\n    # >>> count_distinct_characters('xyzXYZ')\n    # 3\n    # >>> count_distinct_characters('Jerry')\n    # 4\n    # >>> count_distinct_characters('')\n    # 0\n    # >>> count_distinct_characters('aAaAaA')\n    # 1\n    # >>> count_distinct_characters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    # 52\n    # >>> count_distinct_characters('aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa"}
{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    # Input to this function is a string representing musical notes in a special ASCII format.\n    # Your task is to parse this string and return list of integers corresponding to how many beats does each\n    # not last.\n\n    # Here is a legend:\n    # 'o' - whole note, lasts four beats\n    # 'o|' - half note, lasts two beats\n    # '.|' - quater note, lasts one beat\n\n    # >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    # [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n        else: return 0\n\n    return [count_beats(note) for note in music_string.split()]"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    # Find how many times a given substring can be found in the original string. Count overlaping cases.\n    # >>> how_many_times('', 'a')\n    # 0\n    # >>> how_many_times('aaa', 'a')\n    # 3\n    # >>> how_many_times('aaaa', 'aa')\n    # 3\n\n\n    occurences = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        occurences += 1\n        index += 1\n    return occurences"}
{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    # Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    # Return the string with numbers sorted from smallest to largest\n    # >>> sort_numbers('three one five')\n    # 'one three five'\n\n    \n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    to_str = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\n\n    numbers_list = numbers.split()\n    numbers_list = [to_int[num] for num in numbers_list]\n    numbers_list.sort()\n    numbers_list = [to_str[num] for num in numbers_list]\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    # other and return them in order (smaller number, larger number).\n    # >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    # (2.0, 2.2)\n    # >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    # (2.0, 2.0)\n\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair"}
{"task_id": "HumanEval/21", "solution": "    # Given list of numbers (of at least two elements), apply a linear transform to that list,\n    # such that the smallest number will become 0 and the largest will become 1\n    # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    # [0.0, 0.25, 0.5, 0.75, 1.0]\n    # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n    # [0.0, 0.16666666666666666, 0.3333333333333333, 0.5, 0.6666666666666666, 1.0]\n    # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n    # [0.0, 0.14285714285714285, 0.2857142857142857, 0.42857142857142855, 0.5714285714285714, 0.7142857142857143, 1.0]\n    # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n    # [0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1.0]\n    # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n    # [0.0, 0.1111111111111111, 0.2222222222222222, 0.3333333333333333, 0.4444444444444444, 0.5555555555555556, 0.6666666666666666, 0.7777777777777778, 1.0]\n    # >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n    # [0.0, 0.09090909090909091, 0.18181818181818182, 0.2727272727272727, 0.36363636363636365, 0.45454545454545453, 0."}
{"task_id": "HumanEval/22", "solution": "    # Filter given list of any python values only for integers\n    # >>> filter_integers(['a', 3.14, 5])\n    # [5]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    # [1, 2, 3]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0])\n    # [1, 2, 3, 1]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0, 1.0])\n    # [1, 2, 3, 1, 1]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0, 1.0, 1.0])\n    # [1, 2, 3, 1, 1, 1]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0, 1.0, 1.0, 1.0])\n    # [1, 2, 3, 1, 1, 1, 1]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0, 1.0, 1.0, 1.0, 1.0])\n    # [1, 2, 3, 1, 1, 1, 1, 1]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])\n    # [1, 2, 3, 1, 1, 1, 1, 1, 1]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])\n    # [1, 2, 3, 1, 1, 1, 1, 1, 1, 1]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])\n    # [1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])\n    # [1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # >>> filter_integers([1, 2, 3, 'abc', {}, [], 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])\n    # [1, 2, 3, 1, 1, 1,"}
{"task_id": "HumanEval/23", "solution": "    # Return length of given string\n    # >>> strlen('')\n    # 0\n    # >>> strlen('abc')\n    # 3\n    # >>> strlen('abcdefghijklmnopqrstuvwxyz')\n    # 26\n    # >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n    # 52\n    # >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n    # 63\n    # >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n    # 74\n    # >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n    # 85\n    # >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n    # 96\n    # >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n    # 107\n    # >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n    # 118\n    # >>> strlen('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n    # 129"}
{"task_id": "HumanEval/24", "solution": "    # For a given number n, find the largest number that divides n evenly, smaller than n\n    # >>> largest_divisor(15)\n    # 5\n    # >>> largest_divisor(12)\n    # 6\n    # >>> largest_divisor(11)\n    # 1\n    # >>> largest_divisor(10)\n    # 5\n    # >>> largest_divisor(9)\n    # 3\n    # >>> largest_divisor(8)\n    # 4\n    # >>> largest_divisor(7)\n    # 1\n    # >>> largest_divisor(6)\n    # 3\n    # >>> largest_divisor(5)\n    # 1\n    # >>> largest_divisor(4)\n    # 2\n    # >>> largest_divisor(3)\n    # 1\n    # >>> largest_divisor(2)\n    # 1\n    # >>> largest_divisor(1)\n    # 1\n    # >>> largest_divisor(0)\n    # 0\n    # >>> largest_divisor(-1)\n    # 0\n    # >>> largest_divisor(-2)\n    # 0\n    # >>> largest_divisor(-3)\n    # 0\n    # >>> largest_divisor(-4)\n    # 0\n    # >>> largest_divisor(-5)\n    # 0\n    # >>> largest_divisor(-6)\n    # 0\n    # >>> largest_divisor(-7)\n    # 0\n    # >>> largest_divisor(-8)\n    # 0\n    # >>> largest_divisor(-9)\n    # 0\n    # >>> largest_divisor(-10)\n    # 0\n    # >>> largest_divisor(-11)\n    # 0\n    # >>> largest_divisor(-12)\n    # 0\n    # >>> largest_divisor(-13)\n    # 0\n    # >>> largest_divisor(-14)\n    # 0\n    # >>> largest_divisor(-15)\n    # 0\n    # >>> largest_divisor(-16)\n    # 0\n    # >>> largest_divisor(-17)\n    # 0\n    # >>> largest_divisor(-18)\n    # 0\n    # >>> largest_divisor(-19)\n    # 0\n    # >>> largest_divisor(-20)\n    # 0\n    # >>> largest_divisor(-21)\n    # 0\n    # >>> largest_divisor(-22)\n    # 0\n    # >>> largest_divisor(-23)\n    # 0\n    # >>> largest_divisor(-24)\n    # 0\n    # >>> largest_divisor(-25)\n    # 0\n    # >>> largest_divisor(-26)\n    # 0\n    # >>> largest_divisor(-27)\n    # 0\n    # >>> largest_divisor(-28)\n    # 0\n    # >>> largest_divisor(-29)\n    # 0\n    # >>> largest_divisor(-30)\n    # 0\n    # >>> largest_divisor(-31)"}
{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    # Return list of prime factors of given integer in the order from smallest to largest.\n    # Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    # Input number should be equal to the product of all factors\n    # >>> factorize(8)\n    # [2, 2, 2]\n    # >>> factorize(25)\n    # [5, 5]\n    # >>> factorize(70)\n    # [2, 5, 7]\n\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        fact.append(n)\n    return fact"}
{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # From a list of integers, remove all elements that occur more than once.\n    # Keep order of elements left the same as in the input.\n    # >>> remove_duplicates([1, 2, 3, 2, 4])\n    # [1, 3, 4]\n\n    num_cnt = dict()\n    for number in numbers:\n        if number in num_cnt:\n            num_cnt[number] += 1\n        else:\n            num_cnt[number] = 1\n\n    result = []\n    for number in numbers:\n        if num_cnt[number] == 1:\n            result.append(number)\n\n    return result"}
{"task_id": "HumanEval/27", "solution": "    # For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    # >>> flip_case('Hello')\n    # 'hELLO'\n    # >>> flip_case('Hello World')\n    # 'hELLO wORLD'\n    # >>> flip_case('12345')\n    # '12345'\n    # >>> flip_case('')\n    # ''\n    # >>> flip_case('A')\n    # 'a'\n    # >>> flip_case('a')\n    # 'A'\n    # >>> flip_case('AaAa')\n    # 'aAaA'\n    # >>> flip_case('AaAaBbBb')\n    # 'aAaAbBbB'\n    # >>> flip_case('AaAaBbBbCcCc')\n    # 'aAaAbBbBcCcC'\n    # >>> flip_case('AaAaBbBbCcCcDdDd')\n    # 'aAaAbBbBcCcCdDdD'\n    # >>> flip_case('AaAaBbBbCcCcDdDdEeEe')\n    # 'aAaAbBbBcCcCdDdDeEeE'\n    # >>> flip_case('AaAaBbBbCcCcDdDdEeEeFfFf')\n    # 'aAaAbBbBcCcCdDdDeEeEfFfF'\n    # >>> flip_case('AaAaBbBbCcCcDdDdEeEeFfFfGgGg')\n    # 'aAaAbBbBcCcCdDdDeEeEfFfFgGgG'\n    # >>> flip_case('AaAaBbBbCcCcDdDdEeEeFfFfGgGgHhHh')\n    # 'aAaAbBbBcCcCdDdDeEeEfFfFgGgGhHhH'\n    # >>> flip_case('AaAaBbBbCcCcDdDdEeEeFfFfGgGgHhHhIiIi')\n    # 'aAaAbBbBcCcCdDdDeEeEfFfFgGgGhHhHiIiI'\n    # >>> flip_case('AaAaBbBbCcCcDdDdEeEeFfFfGgGgHhHhIiIiJjJj')\n    # 'aAaAbBbBcCcCdDdDeEeEfFfFgGgGhHhHiIiIjJjJ'\n    # >>> flip_case('AaAaBbBbCcCcDdDdEeEeFfFfGgGgHhHhIiIiJjJjKkKk')\n    # 'aAaAbBbBcCcCdDdDeEeEfFfFgGgGhHhHiIiIjJjJkKkK"}
{"task_id": "HumanEval/28", "solution": "    # Concatenate list of strings into a single string\n    # >>> concatenate([])\n    # ''\n    # >>> concatenate(['a', 'b', 'c'])\n    # 'abc'\n    # >>> concatenate(['a', 'b', 'c', 'd'])\n    # 'abcd'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e'])\n    # 'abcde'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f'])\n    # 'abcdef'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n    # 'abcdefg'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n    # 'abcdefgh'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n    # 'abcdefghi'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n    # 'abcdefghij'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n    # 'abcdefghijk'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n    # 'abcdefghijkl'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'])\n    # 'abcdefghijklm'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'])\n    # 'abcdefghijklmn'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'])\n    # 'abcdefghijklmno'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'])\n    # 'abcdefghijklmnop'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'])\n    # 'abcdefghijklmnopq'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r'])\n    # 'abcdefghijklmnopqr'\n    # >>> concatenate(['a', 'b', 'c', 'd', 'e"}
{"task_id": "HumanEval/29", "solution": "    # Filter an input list of strings only for ones that start with a given prefix.\n    # >>> filter_by_prefix([], 'a')\n    # []\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    # ['abc', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n    # ['bcd']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c')\n    # ['cde']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd')\n    # []\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'ar')\n    # ['array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'arr')\n    # []\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '')\n    # ['abc', 'bcd', 'cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'ab')\n    # ['abc']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n    # ['bcd']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c')\n    # ['cde']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd')\n    # []\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'ar')\n    # ['array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'arr')\n    # []\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '')\n    # ['abc', 'bcd', 'cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'ab')\n    # ['abc']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n    # ['bcd']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c')\n    # ['cde']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd')\n    # []\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'ar')\n    # ['array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'arr')\n    # []\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '')\n    # ['abc', 'bcd', 'cde', 'array']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'ab')\n    # ['abc']\n    # >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n    # ['bcd']\n    # >>> filter_by_prefix(['abc', 'bcd', '"}
{"task_id": "HumanEval/30", "solution": "    # Return only positive numbers in the list.\n    # >>> get_positive([-1, 2, -4, 5, 6])\n    # [2, 5, 6]\n    # >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    # [5, 3, 2, 3, 9, 123, 1]\n    # >>> get_positive([-1, -2, -3, -4, -5])\n    # []\n    # >>> get_positive([0, 0, 0, 0, 0])\n    # [0, 0, 0, 0, 0]\n    # >>> get_positive([1, 2, 3, 4, 5])\n    # [1, 2, 3, 4, 5]\n    # >>> get_positive([-1, -2, -3, -4, -5])\n    # []\n    # >>> get_positive([0, 0, 0, 0, 0])\n    # [0, 0, 0, 0, 0]\n    # >>> get_positive([1, 2, 3, 4, 5])\n    # [1, 2, 3, 4, 5]\n    # >>> get_positive([-1, -2, -3, -4, -5])\n    # []\n    # >>> get_positive([0, 0, 0, 0, 0])\n    # [0, 0, 0, 0, 0]\n    # >>> get_positive([1, 2, 3, 4, 5])\n    # [1, 2, 3, 4, 5]\n    # >>> get_positive([-1, -2, -3, -4, -5])\n    # []\n    # >>> get_positive([0, 0, 0, 0, 0])\n    # [0, 0, 0, 0, 0]\n    # >>> get_positive([1, 2, 3, 4, 5])\n    # [1, 2, 3, 4, 5]\n    # >>> get_positive([-1, -2, -3, -4, -5])\n    # []\n    # >>> get_positive([0, 0, 0, 0, 0])\n    # [0, 0, 0, 0, 0]\n    # >>> get_positive([1, 2, 3, 4, 5])\n    # [1, 2, 3, 4, 5]\n    # >>> get_positive([-1, -2, -3, -4, -5])\n    # []\n    # >>> get_positive([0, 0, 0, 0, 0])\n    # [0, 0, 0, 0, 0]\n    # >>> get_positive([1, 2, 3, 4, 5])\n    # [1, 2, 3, 4, 5]\n    # >>> get_positive([-1, -2, -3, -4, -5])\n    # []\n    # >>> get_positive([0, 0, 0, 0, 0])\n    # [0, 0, 0, 0, 0]\n    # >>> get_positive([1, 2, 3, 4, 5])\n    # [1, 2, 3, 4, 5"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    # Return true if a given number is prime, and false otherwise.\n    # >>> is_prime(6)\n    # False\n    # >>> is_prime(101)\n    # True\n    # >>> is_prime(11)\n    # True\n    # >>> is_prime(13441)\n    # True\n    # >>> is_prime(61)\n    # True\n    # >>> is_prime(4)\n    # False\n    # >>> is_prime(1)\n    # False\n\n    if n <= 1: return False\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: n_sqrt += 1\n    for i in range(2, n_sqrt + 1):\n        if n % i == 0: return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    # >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    # -0.5\n    # >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    # 1.0\n\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n\n    # Newton's method\n    x = -1\n    while abs(func(x)) > 1e-10:\n        x = x - func(x) / derivative(x)\n    return x"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    # This function takes a list l and returns a list l' such that\n    # l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    # to the values of the corresponding indicies of l, but sorted.\n    # >>> sort_third([1, 2, 3])\n    # [1, 2, 3]\n    # >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    # [2, 6, 3, 4, 8, 9, 5]\n\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(third[i // 3])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    # Return sorted unique elements in a list\n    # >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    # [0, 2, 3, 5, 9, 123]\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "    # Return maximum element in the list.\n    # >>> max_element([1, 2, 3])\n    # 3\n    # >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    # 123\n    # >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # 10\n    # >>> max_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    # 10\n    # >>> max_element([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    # 1\n    # >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    # 20\n    # >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n    # 30\n    # >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])\n    # 50\n    # >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 5"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    # Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    # >>> fizz_buzz(50)\n    # 0\n    # >>> fizz_buzz(78)\n    # 2\n    # >>> fizz_buzz(79)\n    # 3\n\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    # This function takes a list l and returns a list l' such that\n    # l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    # to the values of the even indicies of l, but sorted.\n    # >>> sort_even([1, 2, 3])\n    # [1, 2, 3]\n    # >>> sort_even([5, 6, 3, 4])\n    # [3, 6, 5, 4]\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    odd = [l[i] for i in range(len(l)) if i % 2 == 1]\n    even.sort()\n    return even + odd"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    # takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    # prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    # >>> prime_fib(1)\n    # 2\n    # >>> prime_fib(2)\n    # 3\n    # >>> prime_fib(3)\n    # 5\n    # >>> prime_fib(4)\n    # 13\n    # >>> prime_fib(5)\n    # 89\n\n\n    import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 1)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    i = 1\n    while True:\n        fib = fibonacci(i)\n        if miller_rabin(fib):\n            if n == 1:\n                return fib\n            n -= 1\n        i += 1"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    # triples_sum_to_zero takes a list of integers as an input.\n    # it returns True if there are three distinct elements in the list that\n    # sum to zero, and False otherwise.\n\n    # >>> triples_sum_to_zero([1, 3, 5, 0])\n    # False\n    # >>> triples_sum_to_zero([1, 3, -2, 1])\n    # True\n    # >>> triples_sum_to_zero([1, 2, 3, 7])\n    # False\n    # >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    # True\n    # >>> triples_sum_to_zero([1])\n    # False\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "solution": "    # Imagine a road that's a perfectly straight infinitely long line.\n    # n cars are driving left to right;  simultaneously, a different set of n cars\n    # are driving right to left.   The two sets of cars start out being very far from\n    # each other.  All cars move in the same speed.  Two cars are said to collide\n    # when a car that's moving left to right hits a car that's moving right to left.\n    # However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    # in their trajectory as if they did not collide.\n\n    # This function outputs the number of such collisions.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n-1.\n    # The cars are initially moving to the right.\n\n    # The cars are initially at positions 0, 1, 2, ..., n-1, and n, n+1, n+2, ..., 2n"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    # Return list with elements incremented by 1.\n    # >>> incr_list([1, 2, 3])\n    # [2, 3, 4]\n    # >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    # [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    # pairs_sum_to_zero takes a list of integers as an input.\n    # it returns True if there are two distinct elements in the list that\n    # sum to zero, and False otherwise.\n    # >>> pairs_sum_to_zero([1, 3, 5, 0])\n    # False\n    # >>> pairs_sum_to_zero([1, 3, -2, 1])\n    # False\n    # >>> pairs_sum_to_zero([1, 2, 3, 7])\n    # False\n    # >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    # True\n    # >>> pairs_sum_to_zero([1])\n    # False\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    # Change numerical base of input number x to base.\n    # return string representation after the conversion.\n    # base numbers are less than 10.\n    # >>> change_base(8, 3)\n    # '22'\n    # >>> change_base(8, 2)\n    # '1000'\n    # >>> change_base(7, 2)\n    # '111'\n\n\n    if x == 0: return \"0\"\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret"}
{"task_id": "HumanEval/45", "solution": "    # Given length of a side and high return area for a triangle.\n    # >>> triangle_area(5, 3)\n    # 7.5\n    # >>> triangle_area(10, 10)\n    # 50.0\n    # >>> triangle_area(10, 100)\n    # 500.0\n    # >>> triangle_area(10, 1000)\n    # 5000.0\n    # >>> triangle_area(10, 10000)\n    # 50000.0\n    # >>> triangle_area(10, 100000)\n    # 500000.0\n    # >>> triangle_area(10, 1000000)\n    # 5000000.0\n    # >>> triangle_area(10, 10000000)\n    # 50000000.0\n    # >>> triangle_area(10, 100000000)\n    # 500000000.0\n    # >>> triangle_area(10, 1000000000)\n    # 5000000000.0\n    # >>> triangle_area(10, 10000000000)\n    # 50000000000.0\n    # >>> triangle_area(10, 100000000000)\n    # 500000000000.0\n    # >>> triangle_area(10, 1000000000000)\n    # 5000000000000.0\n    # >>> triangle_area(10, 10000000000000)\n    # 50000000000000.0\n    # >>> triangle_area(10, 100000000000000)\n    # 500000000000000.0\n    # >>> triangle_area(10, 1000000000000000)\n    # 5000000000000000.0\n    # >>> triangle_area(10, 10000000000000000)\n    # 50000000000000000.0\n    # >>> triangle_area(10, 100000000000000000)\n    # 500000000000000000.0\n    # >>> triangle_area(10, 1000000000000000000)\n    # 5000000000000000000.0\n    # >>> triangle_area(10, 100000000000000000"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    # The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    # fib4(0) -> 0\n    # fib4(1) -> 0\n    # fib4(2) -> 2\n    # fib4(3) -> 0\n    # fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    # Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    # >>> fib4(5)\n    # 4\n    # >>> fib4(6)\n    # 8\n    # >>> fib4(7)\n    # 14\n\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_0 = 0\n        fib4_1 = 0\n        fib4_2 = 2\n        fib4_3 = 0\n        for i in range(4, n+1):\n            fib4_n = fib4_0 + fib4_1 + fib4_2 + fib4_3\n            fib4_0 = fib4_1\n            fib4_1 = fib4_2\n            fib4_2 = fib4_3\n            fib4_3 = fib4_n\n        return fib4_n"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    # Return median of elements in the list l.\n    # >>> median([3, 1, 2, 4, 5])\n    # 3\n    # >>> median([-10, 4, 6, 1000, 10, 20])\n    # 15.0\n\n\n    sorted_l = sorted(l)\n    if len(l) % 2 == 0:\n        return (sorted_l[len(l)//2] + sorted_l[len(l)//2 - 1]) / 2\n    else:\n        return sorted_l[len(l)//2]"}
{"task_id": "HumanEval/48", "solution": "    # Checks if given string is a palindrome\n    # >>> is_palindrome('')\n    # True\n    # >>> is_palindrome('aba')\n    # True\n    # >>> is_palindrome('aaaaa')\n    # True\n    # >>> is_palindrome('zbcd')\n    # False\n    # >>> is_palindrome('abba')\n    # True\n    # >>> is_palindrome('abb')\n    # False\n    # >>> is_palindrome('ab')\n    # False\n    # >>> is_palindrome('a')\n    # True\n    # >>> is_palindrome('')\n    # True\n    # >>> is_palindrome('abcd')\n    # False\n    # >>> is_palindrome('abbab')\n    # False\n    # >>> is_palindrome('abba')\n    # True\n    # >>> is_palindrome('abb')\n    # False\n    # >>> is_palindrome('ab')\n    # False\n    # >>> is_palindrome('a')\n    # True\n    # >>> is_palindrome('')\n    # True\n    # >>> is_palindrome('abcd')\n    # False\n    # >>> is_palindrome('abbab')\n    # False\n    # >>> is_palindrome('abba')\n    # True\n    # >>> is_palindrome('abb')\n    # False\n    # >>> is_palindrome('ab')\n    # False\n    # >>> is_palindrome('a')\n    # True\n    # >>> is_palindrome('')\n    # True\n    # >>> is_palindrome('abcd')\n    # False\n    # >>> is_palindrome('abbab')\n    # False\n    # >>> is_palindrome('abba')\n    # True\n    # >>> is_palindrome('abb')\n    # False\n    # >>> is_palindrome('ab')\n    # False\n    # >>> is_palindrome('a')\n    # True\n    # >>> is_palindrome('')\n    # True\n    # >>> is_palindrome('abcd')\n    # False\n    # >>> is_palindrome('abbab')\n    # False\n    # >>> is_palindrome('abba')\n    # True\n    # >>> is_palindrome('abb')\n    # False\n    # >>> is_palindrome('ab')\n    # False\n    # >>> is_palindrome('a')\n    # True\n    # >>> is_palindrome('')\n    # True\n    # >>> is_palindrome('abcd')\n    # False\n    # >>> is_palindrome('abbab')\n    # False\n    # >>> is_palindrome('abba')\n    # True\n    # >>> is_palindrome('abb')\n    # False\n    # >>> is_palindrome('ab')\n    # False\n    # >>> is_palindrome('a')\n    # True\n    # >>> is_palindrome('')\n    # True\n    # >>> is_palindrome('abcd')\n    # False\n    # >>> is_palindrome('abbab')\n    # False\n    # >>> is_palindrome('abba')\n    # True\n    # >>> is_palindrome('abb"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    # Return 2^n modulo p (be aware of numerics).\n    # >>> modp(3, 5)\n    # 3\n    # >>> modp(1101, 101)\n    # 2\n    # >>> modp(0, 101)\n    # 1\n    # >>> modp(3, 11)\n    # 8\n    # >>> modp(100, 101)\n    # 1\n\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = (res * x) % p\n        x = (x * x) % p\n        n //= 2\n    return res"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    # takes as input string encoded with encode_shift function. Returns decoded string.\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "    # remove_vowels is a function that takes string and returns string without vowels.\n    # >>> remove_vowels('')\n    # ''\n    # >>> remove_vowels(\"abcdef\\nghijklm\")\n    # 'bcdf\\nghjklm'\n    # >>> remove_vowels('abcdef')\n    # 'bcdf'\n    # >>> remove_vowels('aaaaa')\n    # ''\n    # >>> remove_vowels('aaBAA')\n    # 'B'\n    # >>> remove_vowels('zbcd')\n    # 'zbcd'\n    # >>> remove_vowels('zbcd\\n')\n    # 'zbcd\\n'\n    # >>> remove_vowels('zbcd\\n\\n')\n    # 'zbcd\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n')\n    # 'zbcd\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    # 'zbcd\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n    # >>> remove_vowels('zbcd\\n\\n\\n\\n\\n\\n\\"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    # Return True if all numbers in the list l are below threshold t.\n    # >>> below_threshold([1, 2, 4, 10], 100)\n    # True\n    # >>> below_threshold([1, 20, 4, 10], 5)\n    # False\n    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    # Add two numbers x and y\n    # >>> add(2, 3)\n    # 5\n    # >>> add(5, 7)\n    # 12\n    return x+y"}
{"task_id": "HumanEval/54", "solution": "    # Check if two words have the same characters.\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('abcd', 'dddddddabc')\n    # True\n    # >>> same_chars('dddddddabc', 'abcd')\n    # True\n    # >>> same_chars('eabcd', 'dddddddabc')\n    # False\n    # >>> same_chars('abcd', 'dddddddabce')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    # Return n-th Fibonacci number.\n    # >>> fib(10)\n    # 55\n    # >>> fib(1)\n    # 1\n    # >>> fib(8)\n    # 21\n\n\n    if n == 0: return 0\n    if n <= 2: return 1\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    # brackets is a string of \"<\" and \">\".\n    # return True if every opening bracket has a corresponding closing bracket.\n\n    # >>> correct_bracketing(\"<\")\n    # False\n    # >>> correct_bracketing(\"<>\")\n    # True\n    # >>> correct_bracketing(\"<<><>>\")\n    # True\n    # >>> correct_bracketing(\"><<>\")\n    # False\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\":\n            cnt += 1\n        elif x == \">\":\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    # Return True is list elements are monotonically increasing or decreasing.\n    # >>> monotonic([1, 2, 4, 20])\n    # True\n    # >>> monotonic([1, 20, 4, 10])\n    # False\n    # >>> monotonic([4, 1, 0, -10])\n    # True\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec"}
{"task_id": "HumanEval/58", "solution": "    # Return sorted unique common elements for two lists.\n    # >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    # [1, 5, 653]\n    # >>> common([5, 3, 2, 8], [3, 2])\n    # [2, 3]\n    # >>> common([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n    # []\n    # >>> common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n    # [1, 2, 3, 4, 5]\n    # >>> common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    # [1, 2, 3, 4, 5]\n    # >>> common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5])\n    # [1, 2, 3, 4, 5]\n    # >>> common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # >>> common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # >>> common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # >>> common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # >>> common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # >>> common([1, 2, 3, 4, 5,"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    # Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    # >>> largest_prime_factor(13195)\n    # 29\n    # >>> largest_prime_factor(2048)\n    # 2\n\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i * i, n + 1, i):\n                isprime[j] = False\n\n    for i in range(n, 1, -1):\n        if isprime[i] and n % i == 0:\n            return i"}
{"task_id": "HumanEval/60", "solution": "    # sum_to_n is a function that sums numbers from 1 to n.\n    # >>> sum_to_n(30)\n    # 465\n    # >>> sum_to_n(100)\n    # 5050\n    # >>> sum_to_n(5)\n    # 15\n    # >>> sum_to_n(10)\n    # 55\n    # >>> sum_to_n(1)\n    # 1\n    # >>> sum_to_n(0)\n    # 0\n    # >>> sum_to_n(-1)\n    # 0\n    # >>> sum_to_n}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    # brackets is a string of \"(\" and \")\".\n    # return True if every opening bracket has a corresponding closing bracket.\n\n    # >>> correct_bracketing(\"(\")\n    # False\n    # >>> correct_bracketing(\"()\")\n    # True\n    # >>> correct_bracketing(\"(()())\")\n    # True\n    # >>> correct_bracketing(\")(()\")\n    # False\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\":\n            cnt += 1\n        elif x == \")\":\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0"}
{"task_id": "HumanEval/62", "solution": "    # xs represent coefficients of a polynomial.\n    # xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    #  Return derivative of this polynomial in the same form.\n    # >>> derivative([3, 1, 2, 4, 5])\n    # [1, 4, 12, 20]\n    # >>> derivative([1, 2, 3])\n    # [2, 6]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    # [2, 6, 12, 20, 30, 42, 56, 72, 90]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    # [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 210, 240, 272, 306, 342, 380]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n    # [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 210, 240, 272, 306, 342, 380, 420, 462, 506, 552, 600, 650, 702, 756, 812, 870]\n    # >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])\n    # [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 210, 240, 272, 306, 34"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    # The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    # fibfib(0) == 0\n    # fibfib(1) == 0\n    # fibfib(2) == 1\n    # fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    # Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    # >>> fibfib(1)\n    # 0\n    # >>> fibfib(5)\n    # 4\n    # >>> fibfib(8)\n    # 24\n\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    # Write a function vowels_count which takes a string representing\n    # a word as input and returns the number of vowels in the string.\n    # Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    # vowel, but only when it is at the end of the given word.\n\n    # Example:\n    # >>> vowels_count(\"abcde\")\n    # 2\n    # >>> vowels_count(\"ACEDY\")\n    # 3\n\n    if s == \"\": return 0\n    if s[-1] == \"y\": s = s[:-1] + \"a\"\n    return sum(1 for c in s if c in \"aeiou\")"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    # Circular shift the digits of the integer x, shift the digits right by shift\n    # and return the result as a string.\n    # If shift > number of digits, return digits reversed.\n    # >>> circular_shift(12, 1)\n    # \"21\"\n    # >>> circular_shift(12, 2)\n    # \"12\"\n\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    return s[shift:] + s[:shift]"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    # Task\n    # Write a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n\n    # Examples:\n    #     digitSum(\"\") => 0\n    #     digitSum(\"abAB\") => 131\n    #     digitSum(\"abcCd\") => 67\n    #     digitSum(\"helloE\") => 69\n    #     digitSum(\"woArBld\") => 131\n    #     digitSum(\"aAaaaXa\") => 153\n\n    # Hint:\n    #     ord() function returns the ASCII code of a character.\n    #     chr() function returns the character of an ASCII code.\n\n    # Solution\n    # 1. Create a variable to store the sum of the upper characters only'\n    # 2. Loop through the string\n    # 3. If the character is uppercase, add its ASCII code to the sum\n    # 4. Return the sum\n\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n\n    # Code\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    # In this task, you will be given a string that represents a number of apples and oranges \n    # that are distributed in a basket of fruit this basket contains \n    # apples, oranges, and mango fruits. Given the string that represents the total number of \n    # the oranges and apples and an integer that represent the total number of the fruits \n    # in the basket return the number of the mango fruits in the basket.\n    # for examble:\n    # fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    # fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    # fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    # fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\n\n    words = s.split(\" \")\n    apples = int(words[0])\n    oranges = int(words[4])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    # \"Given an array representing a branch of a tree that has non-negative integer nodes\n    # your task is to pluck one of the nodes and return it.\n    # The plucked node should be the node with the smallest even value.\n    # If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    # The plucked node should be returned in a list, [ smalest_value, its index ],\n    # If there are no even values or the given array is empty, return [].\n\n    # Example 1:\n    #     Input: [4,2,3]\n    #     Output: [2, 1]\n    #     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    # Example 2:\n    #     Input: [1,2,3]\n    #     Output: [2, 1]\n    #     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    # Example 3:\n    #     Input: []\n    #     Output: []\n    #  \n    # Example 4:\n    #     Input: [5, 0, 3, 0, 4, 2]\n    #     Output: [0, 1]\n    #     Explanation: 0 is the smallest value, but  there are two zeros,\n    #                  so we will choose the first zero, which has the smallest index.\n\n    # Constraints:\n    #     * 1 <= nodes.length <= 10000\n    #     * 0 <= node.value\n\n\n    if all(val % 2 == 1 for val in arr): return []\n\n    min_even = min(val for val in arr if val % 2 == 0)\n    min_even_index = arr.index(min_even)\n\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    # You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    # zero, and has a frequency greater than or equal to the value of the integer itself. \n    # The frequency of an integer is the number of times it appears in the list.\n    # If no such a value exist, return -1.\n    # Examples:\n    #     search([4, 1, 2, 2, 3, 1]) == 2\n    #     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    #     search([5, 5, 4, 4, 4]) == -1\n\n\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n\n    for num in sorted(count.keys(), reverse=True):\n        if count[num] >= num:\n            return num\n\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    # Given list of integers, return list in strange order.\n    # Strange sorting, is when you start with the minimum value,\n    # then maximum of the remaining integers, then minimum and so on.\n\n    # Examples:\n    # strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    # strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    # strange_sort_list([]) == []\n\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j:\n        ans.append(sorted_list[i])\n    return ans"}
{"task_id": "HumanEval/71", "solution": "    # Given the lengths of the three sides of a triangle. Return the area of\n    # the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    # Otherwise return -1\n    # Three sides make a valid triangle when the sum of any two sides is greater \n    # than the third side.\n    # Example:\n    # triangle_area(3, 4, 5) == 6.00\n    # triangle_area(1, 2, 10) == -1\n    # triangle_area(1, 1, 1) == 0.43\n    # triangle_area(10, 10, 10) == 43.30\n    # triangle_area(10, 10, 100) == -1\n    # triangle_area(10, 100, 10) == -1\n    # triangle_area(100, 10, 10) == -1\n    # triangle_area(100, 100, 100) == 4330.67\n    # triangle_area(100, 100, 1000) == -1\n    # triangle_area(1000, 100, 100) == -1\n    # triangle_area(1000, 1000, 1000) == 433066.67\n    # triangle_area(10000, 1000, 1000) == -1\n    # triangle_area(10000, 10000, 10000) == 4330666.67\n    # triangle_area(100000, 10000, 10000) == -1\n    # triangle_area(100000, 100000, 100000) == 43306666.67\n    # triangle_area(1000000, 100000, 100000) == -1\n    # triangle_area(1000000, 1000000, 1000000) == 433066666.67\n    # triangle_area(10000000, 1000000, 1000000) == -1\n    # triangle_area(10000000, 10000000, 10000000) == 4330666666.67\n    # triangle_area(100000000, 10000000, 10000000) == -1\n    # triangle_area(100000000, 100000000, 100000000) == 43306666666.67\n    # triangle_area(1000000000, 100000000, 100000000) == -1\n    # triangle_area(1000000000, 1000000000, 1000000000) == 433066666666.67\n    # triangle_area(10000000000, 1000000000, 1000000000) == -"}
{"task_id": "HumanEval/72", "solution": "    # Write a function that returns True if the object q will fly, and False otherwise.\n    # The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    # Example:\n    # will_it_fly([1, 2], 5) \u279e False \n    # # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    # will_it_fly([3, 2, 3], 1) \u279e False\n    # # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    # will_it_fly([3, 2, 3], 9) \u279e True\n    # # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    # will_it_fly([3], 5) \u279e True\n    # # 3 is less than the maximum possible weight, and it's balanced.\n\n    # will_it_fly([3], 3) \u279e False\n    # # 3 is more than the maximum possible weight, and it's balanced.\n\n    # will_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 100) \u279e False\n    # # it's balanced, but 1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40+41+42+43+44+45+46+47+48+49+50+51+52+53+54+55+56+57+58+59+60+61+62+63+64+65+66+67+68+69+70+71+72+73+74+75+76+77+78+79+80+81+82+83+84+85+86+87+88+89+90+91+92+93+94+95+96+97+98+99+100 is more than the maximum possible weight.\n\n    # will_it_"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    # Given an array arr of integers, find the minimum number of elements that\n    # need to be changed to make the array palindromic. A palindromic array is an array that\n    # is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    # For example:\n    # smallest_change([1,2,3,5,4,7,9,6]) == 4\n    # smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    # smallest_change([1, 2, 3, 2, 1]) == 0\n\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    # Write a function that accepts two lists of strings and returns the list that has \n    # total number of chars in the all strings of the list less than the other list.\n\n    # if the two lists have the same number of chars, return the first list.\n\n    # Examples\n    # total_match([], []) \u279e []\n    # total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    # total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    # total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    # total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\n    # Notes\n    # The two lists will have different lengths.\n    # The two lists will contain different strings.\n    # The two lists will contain different chars.\n\n    # My Solution\n    # return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2\n\n    # Alternate Solution\n    return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    # Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    # and false otherwise.\n    # Knowing that (a) is less then 100. \n    # Example:\n    # is_multiply_prime(30) == True\n    # 30 = 2 * 3 * 5\n\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    for i in range(2, a + 1):\n        if isprime[i] and a % i == 0:\n            if is_multiply_prime(a // i):\n                return True\n    return False"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    # Your task is to write a function that returns true if a number x is a simple\n    # power of n and false in other cases.\n    # x is a simple power of n if n**int=x\n    # For example:\n    # is_simple_power(1, 4) => true\n    # is_simple_power(2, 2) => true\n    # is_simple_power(8, 2) => true\n    # is_simple_power(3, 2) => false\n    # is_simple_power(3, 1) => false\n    # is_simple_power(5, 3) => false\n\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    if n == 2: return x >= 0 and x**0.5 == x\n    if n == 3: return x >= 0 and x**(1/3) == x\n    if n == 4: return x >= 0 and x**0.25 == x\n    if n == 5: return x >= 0 and x**(1/5) == x\n    if n == 6: return x >= 0 and x**(1/6) == x\n    if n == 7: return x >= 0 and x**(1/7) == x\n    if n == 8: return x >= 0 and x**0.125 == x\n    if n == 9: return x >= 0 and x**(1/9) == x\n    if n == 10: return x >= 0 and x**0.01 == x\n    if n == 11: return x >= 0 and x**(1/11) == x\n    if n == 12: return x >= 0 and x}
{"task_id": "HumanEval/77", "solution": "    # Write a function that takes an integer a and returns True \n    # if this ingeger is a cube of some integer number.\n    # Note: you may assume the input is always valid.\n    # Examples:\n    # iscube(1) ==> True\n    # iscube(2) ==> False\n    # iscube(-1) ==> True\n    # iscube(64) ==> True\n    # iscube(0) ==> True\n    # iscube(180) ==> False\n    # iscube(125) ==> True\n    # iscube(126) ==> False\n    # iscube(127) ==> False\n    # iscube(128) ==> True\n    # iscube(129) ==> False\n    # iscube(130) ==> False\n    # iscube(131) ==> False\n    # iscube(132) ==> False\n    # iscube(133) ==> False\n    # iscube(134) ==> False\n    # iscube(135) ==> False\n    # iscube(136) ==> False\n    # iscube(137) ==> False\n    # iscube(138) ==> False\n    # iscube(139) ==> False\n    # iscube(140) ==> False\n    # iscube(141) ==> False\n    # iscube(142) ==> False\n    # iscube(143) ==> False\n    # iscube(144) ==> True\n    # iscube(145) ==> False\n    # iscube(146) ==> False\n    # iscube(147) ==> False\n    # iscube(148) ==> False\n    # iscube(149) ==> False\n    # iscube(150) ==> False\n    # iscube(151) ==> False\n    # iscube(152) ==> False\n    # iscube(153) ==> False\n    # iscube(154) ==> False\n    # iscube(155) ==> False\n    # iscube(156) ==> False\n    # iscube(157) ==> False\n    # iscube(158) ==> False\n    # iscube(159) ==> False\n    # iscube(160) ==> True\n    # iscube(161) ==> False\n    # iscube(162) ==> False\n    # iscube(163) ==> False\n    # iscube(164) ==> False\n    # iscube(165) ==> False\n    # iscube(166) ==> False\n    # iscube(167) ==> False\n    # iscube(168) ==> False\n    # iscube(169) ==> False\n    # iscube(170) ==> False\n    # iscube(171) ==> False\n    # iscube(172) ==> False\n    # iscube(173) ==> False\n    # iscube(174) ==> False\n    # iscube(175) ==> False\n    # iscube(176) ==> True\n    # iscube(177) ==> False\n    # iscube(178) ==> False\n    # iscube(179) ==>"}
{"task_id": "HumanEval/78", "solution": "    # You have been tasked to write a function that receives \n    # a hexadecimal number as a string and counts the number of hexadecimal \n    # digits that are primes (prime number, or a prime, is a natural number \n    # greater than 1 that is not a product of two smaller natural numbers).\n    # Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    # Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    # So you have to determine a number of the following digits: 2, 3, 5, 7, \n    # B (=decimal 11), D (=decimal 13).\n    # Note: you may assume the input is always correct or empty string, \n    # and symbols A,B,C,D,E,F are always uppercase.\n    # Examples:\n    # For num = \"AB\" the output should be 1.\n    # For num = \"1077E\" the output should be 2.\n    # For num = \"ABED1A33\" the output should be 4.\n    # For num = \"123456789ABCDEF0\" the output should be 6.\n    # For num = \"2020\" the output should be 2.\n    # For num}
{"task_id": "HumanEval/79", "solution": "    # You will be given a number in decimal form and your task is to convert it to\n    # binary format. The function should return a string, with each character representing a binary\n    # number. Each character in the string will be '0' or '1'.\n\n    # There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    # The extra characters are there to help with the format.\n\n    # Examples:\n    # decimal_to_binary(15)   # returns \"db1111db\"\n    # decimal_to_binary(32)   # returns \"db100000db\"\n    # decimal_to_binary(100)  # returns \"db1100100db\"\n\n    # The 'db' characters are there to help with the formatting.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The 'db' characters are not part of the binary number.\n    # The"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    # You are given a string s.\n    # Your task is to check if the string is happy or not.\n    # A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    # For example:\n    # is_happy(a) => False\n    # is_happy(aa) => False\n    # is_happy(abcd) => True\n    # is_happy(aabb) => False\n    # is_happy(adb) => True\n    # is_happy(xyy) => False\n\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    # It is the last week of the semester and the teacher has to give the grades\n    # to students. The teacher has been making her own algorithm for grading.\n    # The only problem is, she has lost the code she used for grading.\n    # She has given you a list of GPAs for some students and you have to write \n    # a function that can output a list of letter grades using the following table:\n    #          GPA       |    Letter grade\n    #           4.0                A+\n    #         > 3.7                A \n    #         > 3.3                A- \n    #         > 3.0                B+\n    #         > 2.7                B \n    #         > 2.3                B-\n    #         > 2.0                C+\n    #         > 1.7                C\n    #         > 1.3                C-\n    #         > 1.0                D+ \n    #         > 0.7                D \n    #         > 0.0                D-\n    #           0.0                E\n    #  \n\n    # Example:\n    # grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n\n    return [to_letter_grade(grade) for grade in grades]"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    # Write a function that takes a string and returns True if the string\n    # length is a prime number or False otherwise\n    # Examples\n    # prime_length('Hello') == True\n    # prime_length('abcdcba') == True\n    # prime_length('kittens') == True\n    # prime_length('orange') == False\n\n    def is_prime(a):\n        if a == 1:\n            return False\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    # Given a positive integer n, return the count of the numbers of n-digit\n    # positive integers that start or end with 1.\n    #\n    # For example, given n = 2, return 9. Because the numbers 10, 11, 12, 13,\n    # 14, 15, 16, 17, and 18 all have 2 digits and end with 1.\n    #\n    # Constraints:\n    #\n    # n will be between 1 and 9.\n\n    # 10^n - 1 - 9 * 10^(n-1)\n    return 10**n - 9 * 10**(n-1)"}
{"task_id": "HumanEval/84", "solution": "    # Given a positive integer N, return the total sum of its digits in binary.\n    #  \n    # Example\n    #     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    #     For N = 150, the sum of digits will be 6 the output should be \"110\".\n    #     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    #  \n    # Variables:\n    #     @N integer\n    #          Constraints: 0 \u2264 N \u2264 10000.\n    # Output:\n    #      a string of binary number\n    #  \n    # Example:\n    #     Input: 1000\n    #     Output: \"1\"\n    #  \n    #     Input: 150\n    #     Output: \"110\"\n    #  \n    #     Input: 147\n    #     Output: \"1100\"\n    #  \n    #     Input}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    # Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    # Examples:\n    #     add([4, 2, 6, 7]) ==> 2 \n\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    # Write a function that takes a string and returns an ordered version of it.\n    # Ordered version of string, is a string where all words (separated by space)\n    # are replaced by a new word where all the characters arranged in\n    # ascending order based on ascii value.\n    # Note: You should keep the order of words and blank spaces in the sentence.\n\n    # For example:\n    # anti_shuffle('Hi') returns 'Hi'\n    # anti_shuffle('hello') returns 'ehllo'\n    # anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    # anti_shuffle('Hi there') returns 'Hi ereht'\n    # anti_shuffle('Hi there  ') returns 'Hi ereht  '\n    # anti_shuffle('abc') returns 'abc'\n    # anti_shuffle('') returns ''\n\n    # Hint: You can use the built-in function sorted()\n\n    # YOUR CODE HERE\n    return s"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    # You are given a 2 dimensional data, as a nested lists,\n    # which is similar to matrix, however, unlike matrices,\n    # each row may contain a different number of columns.\n    # Given lst, and integer x, find integers x in the list,\n    # and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    #  \n    # Examples:\n    # get_row([\n    #   [1,2,3,4,5,6],\n    #   [1,2,3,4,1,6],\n    #   [1,2,3,4,5,1]\n    # ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    # get_row([], 1) == []\n    # get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    res = []\n    for i, l in enumerate(lst):\n        for j, n in enumerate(l):\n            if n == x:\n                res.append((i, j))\n    return sorted(res, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    # Given an array of non-negative integers, return a copy of the given array after sorting,\n    # you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    # or sort it in descending order if the sum( first index value, last index value) is even.\n\n    # Note:\n    # * don't change the given array.\n\n    # Examples:\n    # * sort_array([]) => []\n    # * sort_array([5]) => [5]\n    # * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    # * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\n    # Hint:\n    # * You can use the sum() function to get the sum of the first and last index values.\n    # * You can use the sorted() function to sort the array in ascending order.\n    # * You can use the sorted() function with the reverse=True argument to sort the array in descending order.\n\n    # Your code here\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if sum(array[0], array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "    # Create a function encrypt that takes a string as an argument and\n    # returns a string encrypted with the alphabet being rotated. \n    # The alphabet should be rotated in a manner such that the letters \n    # shift down by two multiplied to two places.\n    # For example:\n    # encrypt('hi') returns 'lm'\n    # encrypt('asdfghjkl') returns 'ewhjklnop'\n    # encrypt('gf') returns 'kj'\n    # encrypt('et') returns 'ix'\n    # encrypt('z') returns 'b'\n    # encrypt('zx') returns 'by'\n    # encrypt('zxy') returns 'byz'\n    # encrypt('zxyz') returns 'byzb'\n    # encrypt('zxyzx') returns 'byzby'\n    # encrypt('zxyzxy') returns 'byzbyz'\n    # encrypt('zxyzxyz') returns 'byzbyzb'\n    # encrypt('zxyzxyzx') returns 'byzbyzby'\n    # encrypt('zxyzxyzxy') returns 'byzbyzbyz'\n    # encrypt('zxyzxyzxyz') returns 'byzbyzbyzb'\n    # encrypt('zxyzxyzxyzx') returns 'byzbyzbyzby'\n    # encrypt('zxyzxyzxyzxy') returns 'byzbyzbyzbyz'\n    # encrypt('zxyzxyzxyzxyz') returns 'byzbyzbyzbyzb'\n    # encrypt('zxyzxyzxyzxyzx') returns 'byzbyzbyzbyzby'\n    # encrypt('zxyzxyzxyzxyzxy') returns 'byzbyzbyzbyzbyz'\n    # encrypt('zxyzxyzxyzxyzxyz') returns 'byzbyzbyzbyzbyzb'\n    # encrypt('zxyzxyzxyzxyzxyzx') returns 'byzbyzbyzbyzbyzby'\n    # encrypt('zxyzxyzxyzxyzxyzxy') returns 'byzbyzbyzbyzbyzbyz'\n    # encrypt('zxyzxyzxyzxyzxyzxyz') returns 'byzbyzbyzbyzbyzbyzb'\n    # encrypt('zxyzxyzxyzxyzxyzxyzx') returns 'byzbyzbyzbyzbyzbyzby'\n    # encrypt('zxyzxyzxyzxyzxyzxyzxy') returns 'byzbyzbyzbyzbyzbyzbyz'\n    # encrypt('zxyzxyzxyzxyzxyzxyzxyz') returns 'byzbyzbyzbyzbyzbyzbyzb'\n    # encrypt('zxyzxyzxyzxyzxyzxyzxyzx') returns 'byzbyzbyzbyzbyzbyzbyzby'\n    # encrypt('zxyzxyzxyzxyzxyzxyzxyzxy') returns 'byzbyzbyzbyzbyzbyzbyzbyz'\n    # encrypt('zxyzxyzxyzxyzxyzxyzxyzxyz') returns 'byzbyzbyzbyzbyzbyzbyzbyzb'\n    # encrypt('zxyzxyzxyzxyzxyzxyzxyzxyzx') returns 'byzbyzbyzbyzbyzbyzbyzbyzby'\n    # encrypt('zxyzxyzxyzxyzxyzxyzxyzxyzxy') returns 'byzbyzby"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    # You are given a list of integers.\n    # Write a function next_smallest() that returns the 2nd smallest element of the list.\n    # Return None if there is no such element.\n    #  \n    # next_smallest([1, 2, 3, 4, 5]) == 2\n    # next_smallest([5, 1, 4, 3, 2]) == 2\n    # next_smallest([]) == None\n    # next_smallest([1, 1]) == None\n\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    return sorted_list[1]"}
{"task_id": "HumanEval/91", "solution": "    # You'll be given a string of words, and your task is to count the number\n    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n    # Sentences are delimited by '.', '?' or '!'.\n   \n    # For example:\n    # >>> is_bored(\"Hello world\")\n    # 0\n    # >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    # 1\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am not bored. I am not bored. I am not bored. I am not bored.\")\n    # 0\n    # >>> is_bored(\"I am not bored. I am not bored. I am not bored. I am bored.\")\n    # 1\n    # >>> is_bored(\"I am not bored. I am not bored. I am bored. I am not bored.\")\n    # 1\n    # >>> is_bored(\"I am not bored. I am not bored. I am bored. I am bored.\")\n    # 2\n    # >>> is_bored(\"I am not bored. I am bored. I am not bored. I am bored.\")\n    # 2\n    # >>> is_bored(\"I am bored. I am not bored. I am not bored. I am bored.\")\n    # 2\n    # >>> is_bored(\"I am bored. I am not bored. I am bored. I am not bored.\")\n    # 2\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_bored(\"I am bored. I am bored. I am bored. I am bored.\")\n    # 4\n    # >>> is_"}
{"task_id": "HumanEval/92", "solution": "    # Create a function that takes 3 numbers.\n    # Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    # Returns false in any other cases.\n    #  \n    # Examples\n    # any_int(5, 2, 7) \u279e True\n    #  \n    # any_int(3, 2, 2) \u279e False\n\n    # any_int(3, -2, 1) \u279e True\n    #  \n    # any_int(3.6, -2.2, 2) \u279e False\n  \n\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    # Write a function that takes a message, and encodes in such a \n    # way that it swaps case of all letters, replaces all vowels in \n    # the message with the letter that appears 2 places ahead of that \n    # vowel in the english alphabet. \n    # Assume only letters. \n    #  \n    # Examples:\n    # >>> encode('test')\n    # 'TGST'\n    # >>> encode('This is a message')\n    # 'tHKS KS C MGSSCGG'\n\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n\n    def replace_vowel(ch):\n        if ch in \"aeiou\":\n            return chr(ord(ch) + 2)\n        else:\n            return ch\n\n    return \"\".join(map(switch_case, map(replace_vowel, message)))"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    # You are given a list of integers.\n    # You need to find the largest prime value and return the sum of its digits.\n\n    # Examples:\n    # For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    # For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    # For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    # For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    # For lst = [0,81,12,3,1,21] the output should be 3\n    # For lst = [0,8,1,2,1,7] the output should be 7\n\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    def sum_of_digits(a):\n        return sum(int(i) for i in str(a))\n\n    return sum_of_digits(max(filter(is_prime, lst)))"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    # Given a dictionary, return True if all keys are strings in lower \n    # case or all keys are strings in upper case, else return False.\n    # The function should return False is the given dictionary is empty.\n    # Examples:\n    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    # check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    # check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    # check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str: return False\n        if k.islower(): lower = False\n        if k.isupper(): upper = False\n    return lower or upper"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    # Implement a function that takes an non-negative integer and returns an array of the first n\n    # integers that are prime numbers and less than n.\n    # for example:\n    # count_up_to(5) => [2,3]\n    # count_up_to(11) => [2,3,5,7]\n    # count_up_to(0) => []\n    # count_up_to(20) => [2,3,5,7,11,13,17,19]\n    # count_up_to(1) => []\n    # count_up_to(18) => [2,3,5,7,11,13,17]\n\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i * i, n, i):\n                isprime[j] = False\n    return ans"}
{"task_id": "HumanEval/97", "solution": "    # Complete the function that takes two integers and returns \n    # the product of their unit digits.\n    # Assume the input is always valid.\n    # Examples:\n    # multiply(148, 412) should return 16.\n    # multiply(19, 28) should return 72.\n    # multiply(2020, 1851) should return 0.\n    # multiply(14,-15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14, 15) should return 20.\n    # multiply(14,"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    # Given a string s, count the number of uppercase vowels in even indices.\n    #  \n    # For example:\n    # count_upper('aBCdEf') returns 1\n    # count_upper('abcdefg') returns 0\n    # count_upper('dBBE') returns 0\n\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            cnt += 1\n    return cnt"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    # Create a function that takes a value (string) representing a number\n    # and returns the closest integer to it. If the number is equidistant\n    # from two integers, round it away from zero.\n\n    # Examples\n    # >>> closest_integer(\"10\")\n    # 10\n    # >>> closest_integer(\"15.3\")\n    # 15\n\n    # Note:\n    # Rounding away from zero means that if the given number is equidistant\n    # from two integers, the one you should return is the one that is the\n    # farthest from zero. For example closest_integer(\"14.5\") should\n    # return 15 and closest_integer(\"-14.5\") should return -15.\n\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n        else:\n            if val > 0:\n                return int(val) + 1\n            else:\n                return int(val) - 1\n\n    if \".\" in value:\n        val = float(value)\n        return rounding(val)\n    else:\n        return int(value)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    # Given a positive integer n, you have to make a pile of n levels of stones.\n    # The first level has n stones.\n    # The number of stones in the next level is:\n    #     - the next odd number if n is odd.\n    #     - the next even number if n is even.\n    # Return the number of stones in each level in a list, where element at index\n    # i represents the number of stones in the level (i+1).\n\n    # Examples:\n    # >>> make_a_pile(3)\n    # [3, 5, 7]\n\n\n    ans, num = [], n\n    while num > 0:\n        ans.append(num)\n        num = num + 2 if num % 2 == 0 else num + 1\n    return ans"}
{"task_id": "HumanEval/101", "solution": "    # You will be given a string of words separated by commas or spaces. Your task is\n    # to split the string into words and return an array of the words.\n    #  \n    # For example:\n    # words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    # words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    # words_string(\"One, two, three, four, five, six, seven, eight, nine, ten\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\n    # words_string(\"One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n    # words_string(\"One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty-one, twenty-two, twenty-three, twenty-four, twenty-five, twenty-six, twenty-seven, twenty-eight, twenty-nine, thirty\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\", \"twenty-one\", \"twenty-two\", \"twenty-three\", \"twenty-four\", \"twenty-five\", \"twenty-six\", \"twenty-seven\", \"twenty-eight\", \"twenty-nine\", \"thirty\"]\n    # words_string(\"One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty-one, twenty-two, twenty-three, twenty-four, twenty-five, twenty-six, twenty-seven, twenty-eight, twenty-nine, thirty, thirty-one, thirty-two, thirty-three, thirty-four, thirty-five, thirty-six, thirty-seven, thirty-eight, thirty-nine, forty\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\", \"twenty-one\", \"twenty-two\", \"twenty-three\", \"twenty-four\", \"twenty-five\", \"twenty-six\", \"twenty-seven\", \"twenty-eight\", \"twenty-nine\", \"thirty\", \"thirty-one\", \"thirty-two\", \"thirty-three\", \"thirty-four\", \"thirty-five\", \"thirty-six\", \"thirty-seven\", \"thirty-eight\", \"thirty-nine\", \"forty\"]\n    # words_string(\"One, two, three,"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    # This function takes two positive numbers x and y and returns the\n    # biggest even integer number that is in the range [x, y] inclusive. If \n    # there's no such number, then the function should return -1.\n\n    # For example:\n    # choose_num(12, 15) = 14\n    # choose_num(13, 12) = -1\n\n    # Your code here\n    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "solution": "    # You are given two positive integers n and m, and your task is to compute the\n    # average of the integers from n through m (including n and m). \n    # Round the answer to the nearest integer and convert that to binary.\n    # If n is greater than m, return -1.\n    # Example:\n    # rounded_avg(1, 5) => \"0b11\"\n    # rounded_avg(7, 5) => -1\n    # rounded_avg(10, 20) => \"0b1111\"\n    # rounded_avg(20, 33) => \"0b11010\"\n    # rounded_avg(100, 100) => \"0b1100100\"\n    # rounded_avg(100, 1000) => \"0b111110100\"\n    # rounded_avg(1000, 100) => -1\n    # rounded_avg(1000, 1000) => \"0b1111111110\"\n    # rounded_avg(10000, 10000) => \"0b}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    # Given a list of positive integers x. return a sorted list of all \n    # elements that hasn't any even digit.\n\n    # Note: Returned list should be sorted in increasing order.\n    #  \n    # For example:\n    # >>> unique_digits([15, 33, 1422, 1])\n    # [1, 15, 33]\n    # >>> unique_digits([152, 323, 1422, 10])\n    # []\n\n\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n\n    return sorted([x for x in x if judge(x)])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    # reverse the resulting array, and then replace each digit by its corresponding name from\n    # \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    # For example:\n    #   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    #         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    #         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    #   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    #  \n    #   If the array is empty, return an empty array:\n    #   arr = []\n    #   return []\n    #  \n    #   If the array has any strange number ignore it:\n    #   arr = [1, -1 , 55] \n    #         -> sort arr -> [-1, 1, 55]\n    #         -> reverse arr -> [55, 1, -1]\n    #   return = ['One']\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      elif x == 9:\n        return \"Nine\"\n      else:\n        return \"\"\n\n    def to_num(x: str) -> int:\n      if x == \"One\":\n        return 1\n      elif x == \"Two\":\n        return 2\n      elif x == \"Three\":\n        return 3\n      elif x == \"Four\":\n        return 4\n      elif x == \"Five\":\n        return 5\n      elif x == \"Six\":\n        return 6\n      elif x == \"Seven\":\n        return 7\n      elif x == \"Eight\":\n        return 8\n      elif x == \"Nine\":\n        return 9\n      else:\n        return 0\n\n    if len(arr) == 0:\n      return []\n\n    arr = sorted(arr)\n    arr = [x for x in arr if x >= 1 and x <= 9]\n    arr = arr[::-1]\n    return [to_word(x) for x in arr]"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    # Implement the function f that takes n as a parameter,\n    # and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    # or the sum of numbers from 1 to i otherwise.\n    # i starts from 1.\n    # the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    # Example:\n    # f(5) == [1, 2, 6, 24, 15]\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    result = [1, 2]\n    for i in range(2, n):\n        if i % 2 == 0:\n            result.append(result[i - 1] * (i + 1))\n        else:\n            result.append(result[i - 1] + (i + 1))\n\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    # Given a positive integer n, return a tuple that has the number of even and odd\n    # integer palindromes that fall within the range(1, n), inclusive.\n\n    # Example 1:\n\n    #     Input: 3\n    #     Output: (1, 2)\n    #     Explanation:\n    #     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    # Example 2:\n\n    #     Input: 12\n    #     Output: (4, 6)\n    #     Explanation:\n    #     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    # Note:\n    #     1. 1 <= n <= 10^3\n    #     2. returned tuple has the number of even and odd integer palindromes respectively.\n\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_cnt += 1\n            else:\n                odd_cnt += 1\n    return (even_cnt, odd_cnt)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    # Write a function count_nums which takes an array of integers and returns\n    # the number of elements which has a sum of digits > 0.\n    # If a number is negative, then its first signed digit will be negative:\n    # e.g. -123 has signed digits -1, 2, and 3.\n    # >>> count_nums([]) == 0\n    # >>> count_nums([-1, 11, -11]) == 1\n    # >>> count_nums([1, 1, 2]) == 3\n\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n        return sum(map(int, l))\n\n    return sum(map(judge, arr))"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    # We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    # numbers in the array will be randomly ordered. Your task is to determine if\n    # it is possible to get an array sorted in non-decreasing order by performing \n    # the following operation on the given array:\n    #     You are allowed to perform right shift operation any number of times.\n    #  \n    # One right shift operation means shifting all elements of the array by one\n    # position in the right direction. The last element of the array will be moved to\n    # the starting position in the array i.e. 0th index. \n\n    # If it is possible to obtain the sorted array by performing the above operation\n    # then return True else return False.\n    # If the given array is empty then return True.\n\n    # Note: The given list is guaranteed to have unique elements.\n\n    # For Example:\n    #  \n    # move_one_ball([3, 4, 5, 1, 2])==>True\n    # Explanation: By performin 2 right shift operations, non-decreasing order can\n    #              be achieved for the given array.\n    # move_one_ball([3, 5, 4, 1, 2])==>False\n    # Explanation:It is not possible to get non-decreasing order for the given\n    #             array by performing any number of right shift operations.\n    #              \n\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    if len(arr) == 0: return True\n\n    for i in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if arr == sorted_arr: return True\n    return False"}
{"task_id": "HumanEval/110", "solution": "    # In this problem, you will implement a function that takes two lists of numbers,\n    # and determines whether it is possible to perform an exchange of elements\n    # between them to make lst1 a list of only even numbers.\n    # There is no limit on the number of exchanged elements between lst1 and lst2.\n    # If it is possible to exchange elements between the lst1 and lst2 to make\n    # all the elements of lst1 to be even, return \"YES\".\n    # Otherwise, return \"NO\".\n    # For example:\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    # exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    # It is assumed that the input lists will be non-empty.\n    # The input lists will contain only integers.\n    # The input lists will not contain any duplicates.\n    # The input lists will not contain any negative numbers.\n    # The input lists will not contain any zeroes.\n    # The input lists will not contain any floats.\n    # The input lists will not contain any strings.\n    # The input lists will not contain any lists.\n    # The input lists will not contain any tuples.\n    # The input lists will not contain any sets.\n    # The input lists will not contain any dictionaries.\n    # The input lists will not contain any functions.\n    # The input lists will not contain any classes.\n    # The input lists will not contain any modules.\n    # The input lists will not contain any packages.\n    # The input lists will not contain any files.\n    # The input lists will not contain any directories.\n    # The input lists will not contain any databases.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will not contain any servers.\n    # The input lists will not contain any clients.\n    # The input lists will"}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Given a string representing a space separated lowercase letters, return a dictionary\n    # of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    #  \n    # Example:\n    # histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    # histogram('a b b a') == {'a': 2, 'b': 2}\n    # histogram('a b c a b') == {'a': 2, 'b': 2}\n    # histogram('b b b b a') == {'b': 4}\n    # histogram('') == {}\n\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word in count:\n                count[word] += 1\n            else:\n                count[word] = 1\n    for key, value in count.items():\n        if value == max(count.values()):\n            ans[key] = value\n    return ans"}
{"task_id": "HumanEval/112", "solution": "    # Task\n    # We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    # then check if the result string is palindrome.\n    # A string is called palindrome if it reads the same backward as forward.\n    # You should return a tuple containing the result string and True/False for the check.\n    # Example\n    # For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    # For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    # For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    # For s = \"abcdef\", c = \"b\", the result should be"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    # Given a list of strings, where each string consists of only digits, return a list.\n    # Each element i of the output should be \"the number of odd elements in the\n    # string i of the input.\" where all the i's should be replaced by the number\n    # of odd digits in the i'th string of the input.\n\n    # >>> odd_count(['1234567'])\n    # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    # >>> odd_count(['3',\"11111111\"])\n    # [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    #  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for i in lst:\n        ans.append(template.replace(\"i\", str(len([j for j in i if int(j) % 2 == 1]))))\n    return ans"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    # Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    # of nums.\n    # Example\n    # minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for i in range(len(nums)):\n        s += nums[i]\n        if s < 0:\n            ans += s\n            s = 0\n    return ans"}
{"task_id": "HumanEval/115", "solution": "import math\ndef max_fill(grid, capacity):\n    # You are given a rectangular grid of wells. Each row represents a single well,\n    # and each 1 in a row represents a single unit of water.\n    # Each well has a corresponding bucket that can be used to extract water from it, \n    # and all buckets have the same capacity.\n    # Your task is to use the buckets to empty the wells.\n    # Output the number of times you need to lower the buckets.\n\n    # Example 1:\n    #     Input: \n    #         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    #         bucket_capacity : 1\n    #     Output: 6\n\n    # Example 2:\n    #     Input: \n    #         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    #         bucket_capacity : 2\n    #     Output: 5\n    #  \n    # Example 3:\n    #     Input: \n    #         grid : [[0,0,0], [0,0,0]]\n    #         bucket_capacity : 5\n    #     Output: 0\n\n    # Constraints:\n    #     * all wells have the same length\n    #     * 1 <= grid.length <= 10^2\n    #     * 1 <= grid[:,1].length <= 10^2\n    #     * grid[i][j] -> 0 | 1\n    #     * 1 <= capacity <= 10\n\n\n    ans = 0\n    for row in grid:\n        for cell in row:\n            ans += cell\n    return math.ceil(ans / capacity)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    # In this Kata, you have to sort an array of non-negative integers according to\n    # number of ones in their binary representation in ascending order.\n    # For similar number of ones, sort based on decimal value.\n\n    # It must be implemented like this:\n    # >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    # >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    # >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        if x1 == y1:\n            return x - y\n        return x1 - y1\n\n    return sorted(arr, key=cmp_to_key(cmp))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    # Given a string s and a natural number n, you have been tasked to implement \n    # a function that returns a list of all words from string s that contain exactly \n    # n consonants, in order these words appear in the string s.\n    # If the string s is empty then the function should return an empty list.\n    # Note: you may assume the input string contains only letters and spaces.\n    # Examples:\n    # select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    # select_words(\"simple white space\", 2) ==> []\n    # select_words(\"Hello world\", 4) ==> [\"world\"]\n    # select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n\n    ans = []\n    for word in s.split(\" \"):\n        count = 0\n        for char in word:\n            if char.lower() not in \"aeiou\":\n                count += 1\n        if count == n:\n            ans.append(word)\n    return ans"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    # You are given a word. Your task is to find the closest vowel that stands between \n    # two consonants from the right side of the word (case sensitive).\n    #  \n    # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    # find any vowel met the above condition. \n\n    # You may assume that the given string contains English letter only.\n\n    # Example:\n    # get_closest_vowel(\"yogurt\") ==> \"u\"\n    # get_closest_vowel(\"FULL\") ==> \"U\"\n    # get_closest_vowel(\"quick\") ==> \"\"\n    # get_closest_vowel(\"ab\") ==> \"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n\n    def is_consonant(ch: str) -> bool:\n        return ch not in \"aeiouAEIOU\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n\n    def get_closest_vowel(word: str) -> str:\n        vowels = \"aeiouAEIOU\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # You are given a list of two strings, both strings consist of open\n    # parentheses '(' or close parentheses ')' only.\n    # Your job is to check if it is possible to concatenate the two strings in\n    # some order, that the resulting string will be good.\n    # A string S is considered to be good if and only if all parentheses in S\n    # are balanced. For example: the string '(())()' is good, while the string\n    # '())' is not.\n    # Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    # Examples:\n    # match_parens(['()(', ')']) == 'Yes'\n    # match_parens([')', ')']) == 'No'\n\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for c in s:\n            if c == '(':\n                cnt += 1\n            else:\n                cnt -= 1\n            if cnt < 0:\n                return False\n        return cnt == 0\n\n    if not valid_parens(lst[0]) or not valid_parens(lst[1]):\n        return 'No'\n\n    def check(s1: str, s2: str) -> bool:\n        if len(s1) == 0:\n            return valid_parens(s2)\n        if len(s2) == 0:\n            return valid_parens(s1)\n        if s1[-1] == '(' and s2[0] == ')':\n            return check(s1[:-1], s2[1:])\n        if s1[-1] == ')' and s2[0] == '(':\n            return check(s1[:-1], s2[1:])\n        return check(s1, s2[1:]) or check(s1[:-1], s2)\n\n    return 'Yes' if check(lst[0], lst[1]) else 'No'"}
{"task_id": "HumanEval/120", "solution": "    # Given an array arr of integers and a positive integer k, return a sorted list \n    # of length k with the maximum k numbers in arr.\n\n    # Example 1:\n\n    #     Input: arr = [-3, -4, 5], k = 3\n    #     Output: [-4, -3, 5]\n\n    # Example 2:\n\n    #     Input: arr = [4, -4, 4], k = 2\n    #     Output: [4, 4]\n\n    # Example 3:\n\n    #     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    #     Output: [2]\n\n    # Note:\n    #     1. The length of the array will be in the range of [1, 1000].\n    #     2. The elements in the array will be in the range of [-1000, 1000].\n    #     3. 0 <= k <= len(arr)\n\n    # Solution:\n    #     Use a heap to store the k largest elements in the array.\n    #     Time complexity: O(n log k)\n    #     Space complexity: O(k)\n\n    #     The heap is a binary tree that is partially sorted.\n    #     The root of the heap is the largest element in the heap.\n    #     The heap is a complete binary tree, which means that all levels of the tree are filled,\n    #     except possibly the last level, which is filled from left to right.\n    #     The heap is a min-heap, which means that the root is the smallest element in the heap.\n    #     The heap is a max-heap, which means that the root is the largest element in the heap.\n    #     The heap is a binary search tree, which means that the left subtree of any node contains only nodes with keys less than the node's key,\n    #     and the right subtree of any node contains only nodes with keys greater than the node's key.\n    #     The heap is a balanced binary tree, which means that the height of the tree is O(log n) for any size n.\n    #     The heap is a complete binary tree, which means that all levels of the tree are filled,\n    #     except possibly the last level, which is filled from left to right.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a heap, which means that the root is the largest element in the heap.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children.\n    #     The heap is a binary tree, which means that each node has at most two children."}
{"task_id": "HumanEval/121", "solution": "    # Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    #  \n\n    # Examples\n    # solution([5, 8, 7, 1]) ==> 12\n    # solution([3, 3, 3, 3, 3]) ==> 9\n    # solution([30, 13, 24, 321]) ==>0\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==> 25\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==> 30\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 36\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ==> 45\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ==> 54\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ==> 63\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ==> 72\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ==> 81\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ==> 90\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ==> 99\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ==> 108\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ==> 117\n    # solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    # Given a non-empty array of integers arr and an integer k, return\n    # the sum of the elements with at most two digits from the first k elements of arr.\n\n    # Example:\n\n    #     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    #     Output: 24 # sum of 21 + 3\n\n    # Constraints:\n    #     1. 1 <= len(arr) <= 100\n    #     2. 1 <= k <= len(arr)\n\n\n    def digits(x: int) -> int:\n        return len(str(x))\n\n    return sum(x for x in arr[:k] if digits(x) <= 2)"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    # Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    # The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    # as follows: start with any positive integer n. Then each term is obtained from the \n    # previous term as follows: if the previous term is even, the next term is one half of \n    # the previous term. If the previous term is odd, the next term is 3 times the previous\n    # term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    # Note: \n    #     1. Collatz(1) is [1].\n    #     2. returned list sorted in increasing order.\n\n    # For example:\n    # get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\n\n    ans, x = [], n\n    while x != 1:\n        ans.append(x)\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = 3 * x + 1\n    ans.append(1)\n    return sorted(list(set([i for i in ans if i % 2 != 0])))"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    # You have to write a function which validates a given date string and\n    # returns True if the date is valid otherwise False.\n    # The date is valid if all of the following rules are satisfied:\n    # 1. The date string is not empty.\n    # 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    # 3. The months should not be less than 1 or higher than 12.\n    # 4. The date should be in the format: mm-dd-yyyy\n\n    # for example: \n    # valid_date('03-11-2000') => True\n\n    # valid_date('15-01-2012') => False\n\n    # valid_date('04-0-2040') => False\n\n    # valid_date('06-04-2020') => True\n\n    # valid_date('06/04/2020') => False\n\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if int(m) < 1 or int(m) > 12: return False\n    if int(d) < 1 or int(d) > days[int(m)-1]: return False\n    if int(y) < 1: return False\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    # Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    # should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    # Examples\n    # split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"abcdef\") == 3 \n\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    return sum([1 for x in txt if ord(x) % 2 == 1])"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    # Given a list of numbers, return whether or not they are sorted\n    # in ascending order. If list has more than 1 duplicate of the same\n    # number, return False. Assume no negative numbers and only integers.\n\n    # Examples\n    # is_sorted([5]) \u279e True\n    # is_sorted([1, 2, 3, 4, 5]) \u279e True\n    # is_sorted([1, 3, 2, 4, 5]) \u279e False\n    # is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    # is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    # is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    # is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    # is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n\n\n    count = dict()\n    for x in lst:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n\n    for x in count:\n        if count[x] > 1:\n            return False\n\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # You are given two intervals,\n    # where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    # The given intervals are closed which means that the interval (start, end)\n    # includes both start and end.\n    # For each given interval, it is assumed that its start is less or equal its end.\n    # Your task is to determine whether the length of intersection of these two \n    # intervals is a prime number.\n    # Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    # which its length is 1, which not a prime number.\n    # If the length of the intersection is a prime number, return \"YES\",\n    # otherwise, return \"NO\".\n    # If the two intervals don't intersect, return \"NO\".\n\n\n    # [input/output] samples:\n    # intersection((1, 2), (2, 3)) ==> \"NO\"\n    # intersection((-1, 1), (0, 4)) ==> \"NO\"\n    # intersection((-3, -1), (-5, 5)) ==> \"YES\"\n\n\n    def is_prime(a):\n        if a < 2:\n            return False\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n\n    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\" if is_prime(interval1[1] - interval2[0]) else \"NO\"\n\n    if interval2[0] <= interval1[0] and interval2[1] >= interval1[1]:\n        return \"YES\" if is_prime(interval2[1] - interval1[0]) else \"NO\"\n\n    if interval1[0] <= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\" if is_prime(interval1[1] - interval2[0]) else \"NO\"\n\n    if interval2[0] <= interval1[0] and interval2[1] <= interval1[1]:\n        return \"YES\" if is_prime(interval2[1] - interval1[0]) else \"NO\"\n\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\" if is_prime(interval2[1] - interval1[0]) else \"NO\"\n\n    if interval2[0] <= interval1[0] and interval2[1] >= interval1[1]:\n        return \"YES\" if is_prime(interval1[1] - interval2[0]) else \"NO\"\n\n    return \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    # You are given an array arr of integers and you need to return\n    # sum of magnitudes of integers multiplied by product of all signs\n    # of each number in the array, represented by 1, -1 or 0.\n    # Note: return None for empty arr.\n\n    # Example:\n    # >>> prod_signs([1, 2, 2, -4]) == -9\n    # >>> prod_signs([0, 1]) == 0\n    # >>> prod_signs([]) == None\n\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for i in arr:\n        sgn *= i / abs(i)\n        s += abs(i)\n    return s * sgn"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    # Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    # each cell of the grid contains a value. Every integer in the range [1, N * N]\n    # inclusive appears exactly once on the cells of the grid.\n\n    # You have to find the minimum path of length k in the grid. You can start\n    # from any cell, and in each step you can move to any of the neighbor cells,\n    # in other words, you can go to cells which share an edge with you current\n    # cell.\n    # Please note that a path of length k means visiting exactly k cells (not\n    # necessarily distinct).\n    # You CANNOT go off the grid.\n    # A path A (of length k) is considered less than a path B (of length k) if\n    # after making the ordered lists of the values on the cells that A and B go\n    # through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    # than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    # such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    # lst_A[j] = lst_B[j].\n    # It is guaranteed that the answer is unique.\n    # Return an ordered list of the values on the cells that the minimum path go through.\n\n    # Examples:\n\n    #     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    #     Output: [1, 2, 1]\n\n    #     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    #     Output: [1]\n\n\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n                break\n\n    # print(x, y)\n\n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= N or y < 0 or y >= N:\n            return None\n        if grid[x][y] == 0:\n            return None\n        val = grid[x][y]\n        grid[x][y] = 0\n        path.append(val)\n        res = None\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            res = dfs(x + dx, y + dy, k - 1, path)\n            if res:\n                break\n        grid[x][y] = val\n        return res\n\n    res = dfs(x, y, k, [])\n    return res"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    # Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    # the last couple centuries. However, what people don't know is Tribonacci sequence.\n    # Tribonacci sequence is defined by the recurrence:\n    # tri(1) = 3\n    # tri(n) = 1 + n / 2, if n is even.\n    # tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    # For example:\n    # tri(2) = 1 + (2 / 2) = 2\n    # tri(4) = 3\n    # tri(3) = tri(2) + tri(1) + tri(4)\n    #        = 2 + 3 + 3 = 8 \n    # You are given a non-negative integer number n, you have to a return a list of the \n    # first n + 1 numbers of the Tribonacci sequence.\n    # Examples:\n    # tri(3) = [1, 3, 2, 8]\n\n\n    if n == 0: return [1]\n    if n == 1: return [1, 3]\n    ans = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            ans.append(1 + i // 2)\n        else:\n            ans.append(ans[i - 1] + ans[i - 2] + ans[i])\n    return ans"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    # Given a positive integer n, return the product of the odd digits.\n    # Return 0 if all digits are even.\n    # For example:\n    # digits(1)  == 1\n    # digits(4)  == 0\n    # digits(235) == 15\n\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        digit = int(ch)\n        if digit % 2 == 1:\n            has_odd = True\n            prod *= digit\n    return prod if has_odd else 0"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    # Create a function that takes a string as input which contains only square brackets.\n    # The function should return True if and only if there is a valid subsequence of brackets \n    # where at least one bracket in the subsequence is nested.\n\n    # is_nested('[[]]') \u279e True\n    # is_nested('[]]]]]]][[[[[]') \u279e False\n    # is_nested('[][]') \u279e False\n    # is_nested('[]') \u279e False\n    # is_nested('[[][]]') \u279e True\n    # is_nested('[[]][[') \u279e True\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt < 0: break\n        if max_nest > 0: return True\n    return False"}
{"task_id": "HumanEval/133", "solution": "    # You are given a list of numbers.\n    # You need to return the sum of squared numbers in the given list,\n    # round each element in the list to the upper int(Ceiling) first.\n    # Examples:\n    # For lst = [1,2,3] the output should be 14\n    # For lst = [1,4,9] the output should be 98\n    # For lst = [1,3,5,7] the output should be 84\n    # For lst = [1.4,4.2,0] the output should be 29\n    # For lst = [-2.4,1,1] the output should be 6\n    #\n    # Input/Output\n    # [input] list of float lst\n    #\n    # A list of floats.\n    #\n    # 0 \u2264 lst.length \u2264 100\n    #\n    # -100 \u2264 lst[i] \u2264 100\n    #\n    # [output] an integer\n    #\n    # The sum of squared numbers in the given list,\n    # rounded each element in the list to the upper int(Ceiling) first.\n    #\n    # 0 \u2264 output \u2264 10000\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    # Create a function that returns True if the last character\n    # of a given string is an alphabetical character and is not\n    # a part of a word, and False otherwise.\n    # Note: \"word\" is a group of characters separated by space.\n\n    # Examples:\n    # check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    # check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    # check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    # check_if_last_char_is_a_letter(\"\") \u279e False \n\n    if len(txt) == 0: return False\n    if txt[-1] == \" \": return False\n    if txt[-1].isalpha(): return True\n    return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    # Create a function which returns the largest index of an element which\n    # is not greater than or equal to the element immediately preceding it. If\n    # no such element exists then return -1. The given array will not contain\n    # duplicate values.\n\n    # Examples:\n    # can_arrange([1,2,4,3,5]) = 3\n    # can_arrange([1,2,3]) = -1\n\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] > arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    # Create a function that returns a tuple (a, b), where 'a' is\n    # the largest of negative integers, and 'b' is the smallest\n    # of positive integers in a list.\n    # If there is no negative or positive integers, return them as None.\n\n    # Examples:\n    # largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    # largest_smallest_integers([]) == (None, None)\n    # largest_smallest_integers([0]) == (None, None)\n\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n\n    if len(neg) == 0:\n        neg = None\n    else:\n        neg = max(neg)\n\n    if len(pos) == 0:\n        pos = None\n    else:\n        pos = min(pos)\n\n    return (neg, pos)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Create a function that takes integers, floats, or strings representing\n    # real numbers, and returns the larger variable in its given variable type.\n    # Return None if the values are equal.\n    # Note: If a real number is represented as a string, the floating point might be . or ,\n\n    # compare_one(1, 2.5) \u279e 2.5\n    # compare_one(1, \"2,3\") \u279e \"2,3\"\n    # compare_one(\"5,1\", \"6\") \u279e \"6\"\n    # compare_one(\"1\", 1) \u279e None\n\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n\n    if num_a > num_b:\n        return num_a\n    elif num_a < num_b:\n        return num_b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "    # Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    # Example\n    # is_equal_to_sum_even(4) == False\n    # is_equal_to_sum_even(6) == False\n    # is_equal_to_sum_even(8) == True\n    # is_equal_to_sum_even(10) == True\n    # is_equal_to_sum_even(12) == True\n    # is_equal_to_sum_even(14) == True\n    # is_equal_to_sum_even(16) == True\n    # is_equal_to_sum_even(18) == True\n    # is_equal_to_sum_even(20) == True\n    # is_equal_to_sum_even(22) == True\n    # is_equal_to_sum_even(24) == True\n    # is_equal_to_sum_even(26) == True\n    # is_equal_to_sum_even(28) == True\n    # is_equal_to_sum_even(30) == True\n    # is_equal_to_sum_even(32) == True\n    # is_equal_to_sum_even(34) == True\n    # is_equal_to_sum_even(36) == True\n    # is_equal_to_sum_even(38) == True\n    # is_equal_to_sum_even(40) == True\n    # is_equal_to_sum_even(42) == True\n    # is_equal_to_sum_even(44) == True\n    # is_equal_to_sum_even(46) == True\n    # is_equal_to_sum_even(48) == True\n    # is_equal_to_sum_even(50) == True\n    # is_equal_to_sum_even(52) == True\n    # is_equal_to_sum_even(54) == True\n    # is_equal_to_sum_even(56) == True\n    # is_equal_to_sum_even(58) == True\n    # is_equal_to_sum_even(60) == True\n    # is_equal_to_sum_even(62) == True\n    # is_equal_to_sum_even(64) == True\n    # is_equal_to_sum_even(66) == True\n    # is_equal_to_sum_even(68) == True\n    # is_equal_to_sum_even(70) == True\n    # is_equal_to_sum_even(72) == True\n    # is_equal_to_sum_even(74) == True\n    # is_equal_to_sum_even(76) == True\n    # is_equal_to_sum_even(78) == True\n    # is_equal_to_sum_even(80) == True\n    # is_equal_to_sum_even(82) == True\n    # is_equal_to_sum_even(84) == True\n    # is_equal_to_sum_even(86) == True\n    # is_equal_to_sum_even(88) == True\n    # is_equal_to_sum_even(90) == True\n    # is_equal_to_sum_even(92) == True\n    # is_equal_to_sum_even("}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    # The Brazilian factorial is defined as:\n    # brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    # where n > 0\n\n    # For example:\n    # >>> special_factorial(4)\n    # 288\n\n    # The function will receive an integer as input and should return the special\n    # factorial of this integer.\n\n\n    fac, ans = 1, 1\n    for i in range(1, n+1):\n        fac *= i\n        ans *= fac\n    return ans"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    # Given a string text, replace all spaces in it with underscores, \n    # and if a string has more than 2 consecutive spaces, \n    # then replace all consecutive spaces with - \n    #  \n    # fix_spaces(\"Example\") == \"Example\"\n    # fix_spaces(\"Example 1\") == \"Example_1\"\n    # fix_spaces(\" Example 2\") == \"_Example_2\"\n    # fix_spaces(\" Example   3\") == \"_Example-3\"\n\n    ans = text\n    ans = ans.replace(\"  \", \"-\")\n    ans = ans.replace(\" \", \"_\")\n    return ans"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    # Create a function which takes a string representing a file's name, and returns\n    # 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    # A file's name is considered to be valid if and only if all the following conditions \n    # are met:\n    # - There should not be more than three digits ('0'-'9') in the file's name.\n    # - The file's name contains exactly one dot '.'\n    # - The substring before the dot should not be empty, and it starts with a letter from \n    # the latin alphapet ('a'-'z' and 'A'-'Z').\n    # - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    # Examples:\n    # file_name_check(\"example.txt\") # => 'Yes'\n    # file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2:\n        return \"No\"\n    if not f_list[0].isalpha():\n        return \"No\"\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    # \"\n    # This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    # multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    # change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    #  \n    # Examples:\n    # For lst = [1,2,3] the output should be 6\n    # For lst = []  the output should be 0\n    # For lst = [-1,-5,2,-1,-5]  the output should be -126\n\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n    return ans"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    # You are given a string representing a sentence,\n    # the sentence contains some words separated by a space,\n    # and you have to return a string that contains the words from the original sentence,\n    # whose lengths are prime numbers,\n    # the order of the words in the new string should be the same as the original one.\n\n    # Example 1:\n    #     Input: sentence = \"This is a test\"\n    #     Output: \"is\"\n\n    # Example 2:\n    #     Input: sentence = \"lets go for swimming\"\n    #     Output: \"go for\"\n\n    # Constraints:\n    #     * 1 <= len(sentence) <= 100\n    #     * sentence contains only letters\n    #     * sentence contains at least one word\n\n    # Solution:\n    #     * Split the sentence into words\n    #     * Check if the length of each word is prime\n    #     * If it is, add it to the result\n    #     * Return the result\n\n    # Time Complexity: O(n * m)\n    #     * n is the number of words in the sentence\n    #     * m is the length of the longest word\n\n    # Space Complexity: O(n)\n    #     * n is the number of words in the sentence\n\n    # Code:\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Your task is to implement a function that will simplify the expression\n    # x * n. The function returns True if x * n evaluates to a whole number and False\n    # otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    # <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    # You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    # simplify(\"1/5\", \"5/1\") = True\n    # simplify(\"1/6\", \"2/1\") = False\n    # simplify(\"7/10\", \"10/2\") = False\n    # simplify(\"1/5\", \"1/5\") = True\n\n    # x = \"1/5\"\n    # n = \"5/1\"\n    # x = \"1/6\"\n    # n = \"2/1\"\n    # x = \"7/10\"\n    # n = \"10/2\"\n    # x = \"1/5\"\n    # n = \"1/5\"\n\n    x_num, x_den = x.split(\"/\")\n    n_num, n_den = n.split(\"/\")\n\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n\n    if x_den == n_den:\n        if x_num * n_num == x_den * n_num:\n            return True\n        else:\n            return False\n    else:\n        if x_num * n_den == x_den * n_num:\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    # Write a function which sorts the given list of integers\n    # in ascending order according to the sum of their digits.\n    # Note: if there are several items with similar sum of their digits,\n    # order them based on their index in original list.\n\n    # For example:\n    # >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    # >>> order_by_points([]) == []\n\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n        return sum(map(int, x_list))\n\n    return sorted(nums, key=lambda x: (weight(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    # Write a function that takes an array of numbers as input and returns \n    # the number of elements in the array that are greater than 10 and both \n    # first and last digits of a number are odd (1, 3, 5, 7, 9).\n    # For example:\n    # specialFilter([15, -73, 14, -15]) => 1 \n    # specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and num % 10 in odd and num // 10 in odd:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    # You are given a positive integer n. You have to create an integer array a of length n.\n    #     For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    #     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    # and a[i] + a[j] + a[k] is a multiple of 3.\n\n    # Example :\n    #     Input: n = 5\n    #     Output: 1\n    #     Explanation: \n    #     a = [1, 3, 7, 13, 21]\n    #     The only valid triple is (1, 7, 13).\n\n\n    if n <= 2: return False\n    if n == 3: return 1\n\n    # 1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307, 343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123, 1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981, 2071, 2163, 2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307, 3423, 3541, 3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971, 5113, 5257, 5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973, 7141, 7311, 7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313, 9507, 9703, 9901, 10101, 10303, 10507, 10713, 10921, 11131, 11343, 11557, 11773, 11991, 12211, 12433, 12657, 12883, 13111, 13341, 13573, 13807, 14043, 14281, 14521, 14763, 15007, 15253, 15501, 15751, 16003, 16257, 165"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    # There are eight planets in our solar system: the closerst to the Sun \n    # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    # Uranus, Neptune.\n    # Write a function that takes two planet names as strings planet1 and planet2. \n    # The function should return a tuple containing all planets whose orbits are \n    # located between the orbit of planet1 and the orbit of planet2, sorted by \n    # the proximity to the sun. \n    # The function should return an empty tuple if planet1 or planet2\n    # are not correct planet names. \n    # Examples\n    # bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    # bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    # bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n    if planet1 == planet2: return tuple()\n    if planet1 == \"Sun\" or planet2 == \"Sun\": return tuple()\n    if planet1 == \"Mercury\" and planet2 == \"Venus\": return (\"Earth\",)\n    if planet1 == \"Mercury\" and planet2 == \"Earth\": return (\"Venus\", \"Mars\")\n    if planet1 == \"Mercury\" and planet2 == \"Mars\": return (\"Venus\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Mercury\" and planet2 == \"Jupiter\": return (\"Venus\", \"Earth\", \"Mars\", \"Saturn\")\n    if planet1 == \"Mercury\" and planet2 == \"Saturn\": return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\": return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Neptune\")\n    if planet1 == \"Mercury\" and planet2 == \"Neptune\": return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    if planet1 == \"Venus\" and planet2 == \"Earth\": return (\"Mars\",)\n    if planet1 == \"Venus\" and planet2 == \"Mars\": return (\"Earth\", \"Jupiter\")\n    if planet1 == \"Venus\" and planet2 == \"Jupiter\": return (\"Earth\", \"Mars\", \"Saturn\")\n    if planet1 == \"Venus\" and planet2 == \"Saturn\": return (\"Earth\", \"Mars\", \"Jupiter\", \"Uranus\")\n    if planet1 == \"Venus\" and planet2 == \"Uranus\": return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Neptune\")\n    if planet1 == \"Venus\" and planet2 == \"Neptune\": return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    if planet1 == \"Earth\" and planet2 == \"Mars\": return (\"Jupiter\",)\n    if planet1 == \"Earth\" and planet2 == \"Jupiter\": return (\"Mars\", \"Saturn\")\n    if planet1 == \"Earth\" and planet2 == \"Saturn\": return (\"Mars\", \"Jupiter\", \"Uranus\")\n    if planet1 == \"Earth\" and planet2 == \"Uranus\": return (\"Mars\", \"Jupiter\", \"Saturn\", \"Neptune\")\n    if planet1 == \"Earth\" and planet2 == \"Neptune\": return (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    if planet1 == \"Mars\" and planet2 == \"Jupiter\": return (\"Saturn\",)\n    if planet1 == \"Mars\" and planet2 == \"Saturn\": return (\"Jupiter\", \"Uranus\")\n    if planet1 == \"Mars\" and planet2 == \"Uranus\": return (\"Jupiter\", \"Saturn\", \"Neptune\")\n    if planet1 == \"Mars\" and planet2 == \"Neptune\": return (\"Jupiter\", \"Saturn\", \"Uranus\")"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Write a function that accepts a list of strings as a parameter,\n    # deletes the strings that have odd lengths from it,\n    # and returns the resulted list with a sorted order,\n    # The list is always a list of strings and never an array of numbers,\n    # and it may contain duplicates.\n    # The order of the list should be ascending by length of each word, and you\n    # should return the list sorted by that rule.\n    # If two words have the same length, sort the list alphabetically.\n    # The function should return a list of strings in sorted order.\n    # You may assume that all words will have the same length.\n    # For example:\n    # assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    # assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n        if len(s) == len(t):\n            return 0 if s == t else 1\n        return 1 if len(s) > len(t) else -1\n\n    return sorted(lst, key=cmp_to_key(cmp))"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    # A simple program which should return the value of x if n is \n    # a prime number and should return the value of y otherwise.\n\n    # Examples:\n    # for x_or_y(7, 34, 12) == 34\n    # for x_or_y(15, 8, 5) == 5\n    #  \n\n    def is_prime(a):\n        if a == 1:\n            return False\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    # Given a list of numbers, return the sum of squares of the numbers\n    # in the list that are odd. Ignore numbers that are negative or not integers.\n    #  \n    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    # double_the_difference([-1, -2, 0]) == 0\n    # double_the_difference([9, -2]) == 81\n    # double_the_difference([0]) == 0  \n   \n    # If the input list is empty, return 0.\n\n    ans = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            ans += num * num\n    return ans * 2"}
{"task_id": "HumanEval/152", "solution": "    # I think we all remember that feeling when the result of some long-awaited\n    # event is finally known. The feelings and thoughts you have at that moment are\n    # definitely worth noting down and comparing.\n    # Your task is to determine if a person correctly guessed the results of a number of matches.\n    # You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    # Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    # the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    #  \n    #  \n    # example:\n\n    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    # compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare([0,0,0,0,0,0],[0,0,0,0,0,0]) -> [0,0,0,0,0,0]\n    # compare"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    # You will be given the name of a class (a string) and a list of extensions.\n    # The extensions are to be used to load additional classes to the class. The\n    # strength of the extension is as follows: Let CAP be the number of the uppercase\n    # letters in the extension's name, and let SM be the number of lowercase letters \n    # in the extension's name, the strength is given by the fraction CAP - SM. \n    # You should find the strongest extension and return a string in this \n    # format: ClassName.StrongestExtensionName.\n    # If there are two or more extensions with the same strength, you should\n    # choose the one that comes first in the list.\n    # For example, if you are given \"Slices\" as the class and a list of the\n    # extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    # (its strength is -1).\n    # Example:\n    # for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            elif ch.islower(): SM += 1\n        return CAP - SM\n\n    return class_name + '.' + max(extensions, key=strength)"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    # You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    # cycpattern_check(\"abcd\",\"abd\") => False\n    # cycpattern_check(\"hello\",\"ell\") => True\n    # cycpattern_check(\"whassup\",\"psus\") => False\n    # cycpattern_check(\"abab\",\"baa\") => True\n    # cycpattern_check(\"efef\",\"eeff\") => False\n    # cycpattern_check(\"himenss\",\"simen\") => True\n\n\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    if a == \"\":\n        return False\n\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            if a[i:] + a[:i] == b:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    # Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    #  Example:\n    #     even_odd_count(-12) ==> (1, 1)\n    #     even_odd_count(123) ==> (1, 2)\n\n    even, odd = 0, 0\n    for ch in str(num):\n        if int(ch) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    # Given a positive integer, obtain its roman numeral equivalent as a string,\n    # and return it in lowercase.\n    # Restrictions: 1 <= num <= 1000\n\n    # Examples:\n    # >>> int_to_mini_roman(19) == 'xix'\n    # >>> int_to_mini_roman(152) == 'clii'\n    # >>> int_to_mini_roman(426) == 'cdxxvi'\n\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n\n    return m[number // 1000] + c[(number % 1000) // 100] + x[(number % 100) // 10] + i[number % 10]"}
{"task_id": "HumanEval/157", "solution": "    # Given the lengths of the three sides of a triangle. Return True if the three\n    # sides form a right-angled triangle, False otherwise.\n    # A right-angled triangle is a triangle in which one angle is right angle or \n    # 90 degree.\n    # Example:\n    # right_angle_triangle(3, 4, 5) == True\n    # right_angle_triangle(1, 2, 3) == False\n    # right_angle_triangle(1, 1, 1) == False\n    # right_angle_triangle(1, 1, 2) == False\n    # right_angle_triangle(1, 2, 2) == True\n    # right_angle_triangle(2, 2, 2) == False\n    # right_angle_triangle(2, 2, 3) == True\n    # right_angle_triangle(2, 3, 2) == True\n    # right_angle_triangle(3, 2, 2) == True\n    # right_angle_triangle(3, 3, 3) == False\n    # right_angle_triangle(3, 3, 4) == True\n    # right_angle_triangle(3, 4, 3) == True\n    # right_angle_triangle(4, 3, 3) == True\n    # right_angle_triangle(4, 4, 4) == False\n    # right_angle_triangle(4, 4, 5) == True\n    # right_angle_triangle(4, 5, 4) == True\n    # right_angle_triangle(5, 4, 4) == True\n    # right_angle_triangle(5, 5, 5) == False\n    # right_angle_triangle(5, 5, 6) == True\n    # right_angle_triangle(5, 6, 5) == True\n    # right_angle_triangle(6, 5, 5) == True\n    # right_angle_triangle(6, 6, 6) == False\n    # right_angle_triangle(6, 6, 7) == True\n    # right_angle_triangle(6, 7, 6) == True\n    # right_angle_triangle(7, 6, 6) == True\n    # right_angle_triangle(7, 7, 7) == False\n    # right_angle_triangle(7, 7, 8) == True\n    # right_angle_triangle(7, 8, 7) == True\n    # right_angle_triangle(8, 7, 7) == True\n    # right_angle_triangle(8, 8, 8) == False\n    # right_angle_triangle(8, 8, 9) == True\n    # right_angle_triangle(8, 9, 8) == True\n    # right_angle_triangle(9, 8, 8) == True\n    # right_angle_triangle(9, 9, 9) == False\n    # right_angle_triangle(9, 9, 10) == True\n    # right_angle_triangle(9, 10, 9) == True\n    # right_angle_triangle(10, 9, 9) == True\n    # right_angle_triangle(10, 10, 10) == False\n    # right_angle_triangle(10, 10, 11) == True\n    # right_angle_triangle(10, 11, 10) == True\n    # right_angle_triangle(11, 10, 10) == True\n    # right_angle_triangle(11, "}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    # Write a function that accepts a list of strings.\n    # The list contains different words. Return the word with maximum number\n    # of unique characters. If multiple strings have maximum number of unique\n    # characters, return the one which comes first in lexicographical order.\n\n    # find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    # find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    # find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word))\n        if ch_cnt > mx_ch_cnt:\n            mx_ch_cnt = ch_cnt\n            ans = word\n        elif ch_cnt == mx_ch_cnt:\n            ans = min(ans, word)\n    return ans"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    # You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    # but now you need to eat more carrots to complete the day's meals.\n    # you should return an array of [ total number of eaten carrots after your meals,\n    #                                 the number of carrots left after your meals ]\n    # if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    #  \n    # Example:\n    # * eat(5, 6, 10) -> [11, 4]\n    # * eat(4, 8, 9) -> [12, 1]\n    # * eat(1, 10, 10) -> [11, 0]\n    # * eat(2, 11, 5) -> [7, 0]\n    #  \n    # Variables:\n    # @number : integer\n    #     the number of carrots that you have eaten.\n    # @need : integer\n    #     the number of carrots that you need to eat.\n    # @remaining : integer\n    #     the number of remaining carrots thet exist in stock\n    #  \n    # Constrain:\n    # * 0 <= number <= 1000\n    # * 0 <= need <= 1000\n    # * 0 <= remaining <= 1000\n\n    # Have fun :)\n\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Given two lists operator, and operand. The first list has basic algebra operations, and \n    # the second list is a list of integers. Use the two given lists to build the algebric \n    # expression and return the evaluation of this expression.\n\n    # The basic algebra operations:\n    # Addition ( + ) \n    # Subtraction ( - ) \n    # Multiplication ( * ) \n    # Floor division ( // ) \n    # Exponentiation ( ** ) \n\n    # Example:\n    # operator['+', '*', '-']\n    # array = [2, 3, 4, 5]\n    # result = 2 + 3 * 4 - 5\n    # => result = 9\n\n    # Note:\n    #     The length of operator list is equal to the length of operand list minus one.\n    #     Operand is a list of of non-negative integers.\n    #     Operator list has at least one operator, and operand list has at least two operands.\n\n\n\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    # You are given a string s.\n    # if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    # otherwise keep it as it is.\n    # If the string contains no letters, reverse the string.\n    # The function should return the resulted string.\n    # Examples\n    # solve(\"1234\") = \"4321\"\n    # solve(\"ab\") = \"AB\"\n    # solve(\"#a@C\") = \"#A@c\"\n\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    if not has_letter:\n        ans = ans[::-1]\n    return ans"}
{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    # Given a string 'text', return its md5 hash equivalent string.\n    # If 'text' is an empty string, return None.\n\n    # >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\n    if text == \"\": return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "    # Given two positive integers a and b, return the even digits between a\n    # and b, in ascending order.\n\n    # For example:\n    # generate_integers(2, 8) => [2, 4, 6, 8]\n    # generate_integers(8, 2) => [2, 4, 6, 8]\n    # generate_integers(10, 14) => []\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 15) => [10, 12, 14]\n    # generate_integers(10, 1"}
