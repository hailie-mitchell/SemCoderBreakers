{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, a re an y two numbers closer to each otherthan\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n    separate  thos e group into se parate st rings and return the list of  th ose.\n    Separ ate groups ar e balanced (each open brac e is properly closed) a n d notnested with in each  other\n   Ignore any spaces in thei nput string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point numb er, i t can be decomposed into\n    and integer part (largest integer smaller t han g iven nu m ber) an d decimal s\n    (leftover part alwayssma ller than 1).\n    Return t he decimal part of the num ber.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1\n\n"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n    zero balance. You r tas k is to detectif at any  point thebalance of accoun t f allls below ze ro, and\n    a t that point function shou ldreturn True. Otherwi s e it s hould retur n False .\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, c alcul ate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mea n Abs olute D e viation  is the a verage absolute difference b etw een each\n    e lement and acenterpoint (meanin thiscase):\n    MAD = averag e  | x -  x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n    Fo r eac h of th e  group,  output t he deepestlevel of nestingofparentheses.\n   E.g. (()() ) has maximum twolevels o f nesting while ((()))h as thr ee.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only  forones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n   Empt y sum s h ould be  equal to  0 and empty product shouldbeequal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n    in the seq uence .\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i, number in enumerate(numbers):\n        if i == 0:\n            result.append(number)\n        else:\n            result.append(max(result[i - 1], number))\n    return result\n\n"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that be ginswith a supplied string.\n    Algorithm idea is simple:\n   - Find the lon gestpostfix of supp lied stri ng that isa palindrome.\n   -Append to theend of the st ring reverse of astring p refix that comes before the pa lindromic s uffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[i:] + string[:i][::-1]\n\n"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consis tingonly of 1s and 0s.\n    Perform binary XOR on these inputs and return res ult a lso asa  string .\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the l onges t one. Return the first one in case of multiple\n    strings of the samelengt h. Retu r n Nonein case t he input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    longest_string = None\n    for string in strings:\n        if longest_string is None or len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor oftwo i ntegers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n\n"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from sho rtest  to longestof the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n\n"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string r epres enting musical notes in a special ASCII format.\n    Yourtask is to pars e thi s strin g  and re turn list  of integers corresponding t o h ow many beatsdoes each\n   not last.\n\n    Here is alegend:\n   'o' - whole note,lasts fourbeats\n   'o|' -  half note, lasts two beats    '.|' - quater note,  lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split()\n    result = []\n    for i in music_list:\n        if i == 'o':\n            result.append(4)\n        elif i == 'o|':\n            result.append(2)\n        elif i == '.|':\n            result.append(1)\n    return result\n\n"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    if len(substring) == len(string):\n        return 1 if substring == string else 0\n    if len(substring) == 1:\n        return string.count(substring)\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two',  'thr ee', 'f o ur', 'f ive', 'si x', 'seven', 'eight' and 'ni ne' .\n    Return t he string wit h numbers sorted from smal lest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: x.replace('zero', '0').replace('one', '1').replace('two', '2').replace('three', '3').replace('four', '4').replace('five', '5').replace('six', '6').replace('seven', '7').replace('eight', '8').replace('nine', '9'))\n    return ' '.join(numbers)\n\n"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n    o therand ret u rn them  in order  (smaller number, larger num ber ).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < min_diff:\n            min_diff = numbers[i + 1] - numbers[i]\n            closest_elements = (numbers[i], numbers[i + 1])\n    return closest_elements\n\n"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n    suchthat the smalle st nu mber wi l l becom e 0 and t he largestwill become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python valu es on ly for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the large st nu mber that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of give n int eger in theorder from smallest tolargest.\n    Each of the factors shou ld be  listed numberof timescorresponding to how many ti mes  it appeares i n factorizati on.\n    Input number shoul d be equal to the produ c t of a ll factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove alleleme nts that occur more than once.\n   Keep order of elements left the sameas in  the in p ut.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))\n\n"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n\n"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a s ingle  string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only  forones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the l ist.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prim e, an d false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial. \n   find_zero find x such that poly(x)= 0.\n    find_zero returns only onlyzeropoint,e ven ifthere are  many.\n   Moreover, find_ze roonly takes lis t xs having e ven number of coefficients \n   and largest non ze r o coef ficient asit guar antees\n   a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return 0\n    if n == 2:\n        return -xs[0] / xs[1]\n    if n == 3:\n        a, b, c = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 4:\n        a, b, c, d = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 5:\n        a, b, c, d, e = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 6:\n        a, b, c, d, e, f = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 7:\n        a, b, c, d, e, f, g = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 8:\n        a, b, c, d, e, f, g, h = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 9:\n        a, b, c, d, e, f, g, h, i = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 10:\n        a, b, c, d, e, f, g, h, i, j = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 11:\n        a, b, c, d, e, f, g, h, i, j, k = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 12:\n        a, b, c, d, e, f, g, h, i, j, k, l = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 13:\n        a, b, c, d, e, f, g, h, i, j, k, l, m = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 14:\n        a, b, c, d, e, f, g, h, i, j, k, l, m, n = xs\n        return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    if n == 15:\n        a, b, c, d, e, f, g, h, i, j, k, l, m, n, o = xs\n        return (-b + math.sqrt(b * b - 4 * a * c))"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and retu rns a  list l' such that\n    l' is identical to l in the indicies that are not  divi sible b y  three,  while it s values at the indicies tha t a re divisible b y three are e qual\n    to the values ofthe corresponding indic i es ofl, but sort ed.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    l1.extend(l2)\n    return l1\n\n"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a li st\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n\n"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and retu rns a  list l' such that\n    l' is identical to l in the odd indicies, while i ts va lues at the eve n indicie s are equal\n    to the value s o f the even ind icies of l, b ut sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    l_even.sort()\n    l_odd.sort()\n    l_even.reverse()\n    l_odd.reverse()\n    l_even.extend(l_odd)\n    return l_even\n\n"}
{"task_id": "HumanEval/38", "solution": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with e ncode _cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that i s a F ibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n == 6:\n        return 233\n    if n == 7:\n        return 1597\n    if n == 8:\n        return 28657\n    if n == 9:\n        return 514229\n    if n == 10:\n        return 433494437\n    if n == 11:\n        return 2971215073\n    if n == 12:\n        return 99194853094755497\n    if n == 13:\n        return 10610209857723\n    if n == 14:\n        return 17556970260412307092571\n    if n == 15:\n        return 19740274219868223167\n    if n == 16:\n        return 1298475421386050888169879132132870167\n    if n == 17:\n        return 135301852344706746049\n    if n == 18:\n        return 28057117299251014003761193241303867718761761130331698291509338731801047681898699369861\n    if n == 19:\n        return 102334155\n    if n == 20:\n        return 112589990684262399999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list ofinteg ers as an input.\n    it returns True if there are three distinct element s inthe lis t  that\n   sum to  zero, andFalse otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly st raigh t infinitely long line.\n    n carsare driving left to right;  simultane ously , a dif f erent s et of n c ars\n    are driving right to  le ft.   The twosets of carsstart out being very far f rom\n    each other.  Al l  carsmove in the  same s peed.  Tw o carsare said to collide   when a carthat's mo ving left to right hits a c ar that's m ov i ng right to left.\n    Howeve r, the cars areinfinitelystu rdy and strong; as a result, theycontinue moving\n    in t hei r traje ct ory as ifth ey did not collide.\n\n    Thi sfunctionoutputs the number of such col lis ions.\n    \"\"\"\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented  by 1 .\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of in teger s as an input.\n    it returns Trueif there are two distinct elements in  thelist th a t\n    s um to zer o, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number  x to  base.\n    return string representation after the conversion.\n    base n umber s are l e ss than  10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result\n\n"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high retur n are a for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n\n"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n    fib4(0) - > 0\n   fib4 ( 1) -> 0 \n    fib4 (2) -> 2\n   fib4(3) -> 0\n   f ib4(n) -> fib4 (n-1) + fib4( n-2) + fib4(n-3) + fib4(n- 4).\n    Please write af unctio n to effici ently c ompute th e n-thelement of the fib4n umber sequence.  Do not  use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list  l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindro me\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of nume rics) .\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n // 2, p) ** 2 % p\n\n"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with e ncode _shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that tak es st ring and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the lis t l a re below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x+y\n\n"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same cha racte rs.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    if len(s0) == 0:\n        return True\n    if s0[0] not in s1:\n        return False\n    return same_chars(s0[1:], s1.replace(s0[0], '', 1))\n\n"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\". \n   return Trueif every opening bracket has a correspondingclosing bracket .\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True is list elements are mono tonic ally increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elementsfor t wo lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\n"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n\n"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numb ers f rom 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n\n"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\". \n   return Trueif every opening bracket has a correspondingclosing bracket .\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polyn omial .\n    xs[0]+ xs[1] * x + xs[2] * x^2 + ....\n     Returnderivative of t his p olynomi a l in th e same fo rm.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n    fibfib( 0) ==  0\n   f ibfib(1 ) == 0\n   fibfib(2) == 1\n    fibfib( n)== fibfib(n-1)  + fibfib(n-2 ) + fibfib(n-3).\n   Pleas e write a function to e f ficien tly compute  the n- th elemen t of the fibfib number seque nce.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n"}
{"task_id": "HumanEval/64", "solution": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which t akesa string representing\n    a word as input and returns the number of vowe ls in  the st r ing.\n   Vowelsin this case are 'a', 'e', ' i',  'o', 'u'. Her e, 'y' is als o a\n    vowel, but only wh enit is atthe end oft he giv en word.\n\n   Exam ple:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the inte ger x , shift thedigits right by shift\n   and return the result as a string. \n   If shif t  > numb er of dig its, return digits reversed. \n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n\n"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takesa str ing as input and returns the sum of the upper charactersonly'\n    ASCII  code s.\n\n  Example s:\n       digitSum(\"\") => 0\n       dig itSum(\"abAB\")=> 131\n       digitSum(\"abcCd\") => 67       digitSum(\"hello E \") =>69\n       digitSu m(\"woArBl d\") =>131\n        digitSum( \"aAaaaXa\") =>153\n    \" \"\"\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\n"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a st ringthat represents a number of applesand oranges \n    thatare distributed  in a  basket of frui t this ba sket contains \n    apples, o ran ges, and mango  fruits. Give n the string thatrepresen tsthe total number of    th e oranges a nd appl es and an  integer that representthetotal number of the fru its \n    in the basket retu rn the numb er of the mango fruits in the b asket.\n   fore xamble:\n   fr uit_distribution(\"5 apples and 6o ranges\", 19) ->19 - 5 -6 =  8\n fr uit_distri bu tion(\"0 apples and 1 oranges \", 3) -> 3 - 0 - 1 = 2\n    fruit_distribut ion (\"2 apples and 3  oranges\",100) -> 100 - 2 - 3 = 95\n    fruit_distr ibu tion(\"1 0 0 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n    \"\" \"\n    \"\"\"\n    # your code here\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    mangoes = int(s[4])\n    return n - apples - oranges - mangoes\n"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n    your taskis to pluck one  of t he node s  and re turn it.    The plucked node shouldbethe node withthe smallesteven value.\n    If multipl e nodes with the same s m allest  even value  are fo und retur n the node that has smallest  index.\n\n    The plucke d node should be returned i n a list, [  s m alest_value, its index ],\n   If there aren o even valu esor the given array is empty, retur n [].\n\n   Example 1:\n      Inpu t:  [4,2,3]\n      Output: [2, 1]\n       Ex planation: 2has the smallest even valu e,and 2 has the sm allest inde x.\n\n    Example 2:\n        Input: [1,2,3 ]\n     O utput: [2, 1]\n        Explanat ion:2 has the smallest eve nvalue, and 2 has the smallestindex . \n\n  Example  3:\n        Input: []\n        Output: []\n    \n   Example 4:\n        Input : [5, 0, 3, 0,4 , 2]\n        O ut p ut:[0, 1]\n        Exp lana tion: 0 is  the smallest va lu e, but  there are two z er os,\n                    so we wil lchoose the first zero, which has the smallest i ndex.\n\n    Constraints:\n     * 1 <= n odes.l eng th<= 1 0000\n       * 0 <=  n ode.value\n    \"\"\"\n    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = None\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num <= min_even:\n            min_even = num\n            min_index = i\n    return [min_even, min_index]\n\n"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    '''\n    You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than \n    zero,and h as a fr e quencygreater t han or equal to the value of  th e integer itse lf. \n    Thefrequency of an integer is  the numberof times it appear s in the li st.\n   If no su cha value exist, return-1. \n    Examples:\n       search([4, 1, 2, 2, 3, 1])== 2\n    s earch([1, 2, 2, 3, 3, 3, 4,4, 4]) ==3\n      search( [5,  5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if lst.count(lst[i]) >= lst[i]:\n                return lst[i]\n    return -1\n\n"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return listin st range order.\n    Strange sorting, is when you start withthe minimum val ue,\n   then maximum  of the r emaining integers, then mini mum  and so on.\n\n   Examples:    strange_sort_list([1,2,3, 4]) == [1, 4, 2,3 ]\n   strange_sor t_list( [5, 5, 5,  5]) == [5, 5, 5, 5]\n  str ange_sort_list([]) == [ ]\n    '''\n    lst.sort()\n    new_lst = []\n    while len(lst) > 0:\n        new_lst.append(lst[0])\n        new_lst.append(lst[-1])\n        lst.pop(0)\n        lst.pop(-1)\n    return new_lst\n\n"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides  of a  triangle. Return the area of\n    the triangle rounded to 2 decimal poin ts if  the th r ee side s form avalid triangle. \n    Otherwi sereturn -1\n   Three sides m ake a valid triangle whenthe sum of any two side s  is gr eater \n   than th e third s ide.\n   Example:\n    triang le_area(3, 4,5) == 6.0 0\n    triangle_area(1, 2, 1 0) == -1  ' ''\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True i f the  object q will fly, and False otherwise.\n    The object q will fly if it 's ba lanced( it is a  palindro mic list) and the sum of its  el ements is less  than or equa l the maximum possible wei ght w.\n\n   Example:\n  will_ it_fly([1,2], 5)\u279e False    # 1+2 is less than them aximum possible weight,  but it's unbalanced.\n\n   will_it_fly ([ 3 , 2, 3], 1) \u279e False\n    # it 's balanced, but  3+2+3 is m ore  than the maximum possible weight. \n\n    will_it_fly([3, 2,  3] , 9)\u279eTr ue    # 3 +2 +3 is less than the maximumpo ssible weight, and it's balanced.\n\n   wil l_it_fly([3], 5)  \u279e True\n   # 3 is less than the maximum possible w eig ht, and it's balanced.\n    '''\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find  theminimum number of elements that\n   need to be changed to make the array  pali ndromic .  A pali ndromic a rray is anarray that\n    is  re ad the same ba ckwards and f orwards. In one change, yo u can change one elemen t  to an y other ele ment.\n    For e xample:\n    smallest_change( [1,2,3,5,4,7,9,6]) == 4 \n    smallest_change([1, 2,  3, 4, 3, 2 ,2 ]) == 1\n    smallest_change( [1,2, 3,2, 1])  == 0\n    \" \"\"\n    \"\"\"\n    # Write your code here\n    pass\n\n"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two li sts o f strings and returns the list that has \n    total number of chars in th e all  string s  of the  list les s than theother list.\n\n   ifthe two listshave the same  number of chars,return t hefirst list.\n\n    Exa m ples\n   total_ma tch([],  []) \u279e [] \n   total_match(['hi','adm in'], ['hI', 'Hi']) \u279e [ 'hI', 'Hi']\n    total_match (['hi','ad mi n '], ['hi', 'hi', 'admin', 'p roject'])\u279e ['hi ', 'admin'] \n   total_match(['hi', 'admin'], ['h I', 'hi', 'hi']) \u279e ['hI' , ' hi','h i' ]\n   tota l_ match(['4'], ['1', '2', '3',  ' 4', '5']) \u279e ['4']\n    '''\n    lst1 = [i.lower() for i in lst1]\n    lst2 = [i.lower() for i in lst2]\n    lst1_len = sum([len(i) for i in lst1])\n    lst2_len = sum([len(i) for i in lst2])\n    if lst1_len < lst2_len:\n        return lst1\n    elif lst1_len > lst2_len:\n        return lst2\n    else:\n        return lst1\n\n"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n   and false othe rwise .\n    K n owing t hat (a) i s less then 100. \n    Exampl e:    is_multipl y_prime(30) = = True\n    30 = 2* 3 * 5   \"\"\"\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return True\n            else:\n                return False\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that  retu rns true ifa number x is a simple    power of n and false in other cas es.\n   x is a simpl e power o f n if n**int=x\n    For exam ple :\n    is_simpl e_power(1, 4)  => true\n    is_simple_pow er(2, 2) =>true\n    is _ simple _power(8, 2 ) => tr ue\n    is _simple_power(3, 2) => false \n    is_simple_power(3,  1) => false\n    is_simple_ power(5,3)  = >  false\n    \"\"\"\n    if n == 1:\n        return True\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    if x % n != 0:\n        return False\n    if x == n:\n        return True\n    return is_simple_power(x / n, n)\n\n"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Write a function that takes an integ er aand returnsTrue \n    if this ingeger is a cube of some integer number.    N ote: yo u  may as sume theinput is always valid.\n    E xam ples:\n    iscu be(1) ==> Tru e\n    iscube(2) ==> False   iscube(-1) ==> True     is cube(64) == > True    iscub e(0) ==> True\n    iscube(180 ) ==> False\n   '''\n    x=a**(1/3)\n    if x.is_integer():\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    \"\"\"You have been tasked to write a funct ion t hat receives \n    a hexadecimal number as a string and counts the number  of h exadeci m al \n   digits t hat are primes (prime number , o r a prime, isa natural num ber \n    greater than 1 th atis not aproduct oft wo sma ller natura l numbe rs).\n   Hexadecimal digits are 0, 1,  2, 3, 4, 5, 6, 7, 8, 9 , A, B, C, D, E, F.\n    Pri me numbersar e  2, 3, 5, 7, 11, 13, 17,...   So you haveto determin e a  number of the following digits:2 , 3, 5,7, \n    B (=deci mal  11), D  ( =decimal 1 3) .\n    Note: you may assume t he input is always correct or empty strin g,\n    and symbols  A,B,C,D,E, F are always uppercase.\n    Examples:   F or num=  \"AB\" the output should be 1.   For num = \"1077E\" the o ut put should be 2.     For num =  \"ABE D1A33\" theoutp ut should be 4.\n   For num = \"123456789ABCDEF0\" t he output should be 6.\n   For num = \"20 20\" the output  s h ould be 2.\n    \"\"\"\n    num = num.replace(\" \", \"\")\n    num = num.upper()\n    count = 0\n    for i in num:\n        if i in \"2357BDF\":\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal  form  and your task is to convert it to    binary format. The function shoul d ret urn a s t ring, w ith eachcharacter representing a bin ary \n    number. E ach character  in the string will be '0'  or '1'.\n\n   There wil l  be an  extra coup le of c haracters  'db' at the beginning anda t the end of the string .\n    The extra charactersare there t oh elp with the format.\n\n    Ex amples:\n   deci mal_to_bina ry( 15)   # returns \"db1111db\"\n    dec imal_to_binary(32)  # r etu rns\"db 10 0000db\"\n  \"\"\"\n  # your code here\n  binary = \"\"\n  while decimal > 0:\n    binary = str(decimal % 2) + binary\n    decimal = decimal // 2\n  return \"db\" + binary + \"db\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your ta sk is  to check if the string is happy or not.\n    A string ishappy if its le ngthis at l e ast 3 a nd every3 consecutive letters are di sti nct\n    For ex ample:\n    is _happy(a) => False\n    is_ happy(aa) => False\n   i s_happ y(abcd) =>True\n   is_happ y(aabb) => False\n    is_happ y(adb) => True\n    is_h appy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester a nd th e teacher has to give the grades\n   to students. The teacher has been m aking  her ow n  algori thm for g rading.\n   The only problem  is , she has lost  the code she  used for grading.\n    She  has given you a list o f  GPAsfor some st udentsand you h ave towrite \n    a function  that can output a list  of letter grades using the  followingta b le:\n             GPA       |    Letter grade \n            4.0                A+\n          > 3.7              A\n       >3.3              A- \n            >3. 0             B+\n            > 2.7              B \n           >  2.3                B-\n           > 2.0             C+\n            > 1.7             C\n            >1. 3              C-\n          > 1 .0            D+ \n            > 0.7                D \n          > 0.0               D-\n            0.0           E\n    \n\n    Examp le:    grade_ equation([4.0, 3 ,1.7, 2, 3.5]) ==> ['A+' ,'B', 'C-', 'C', 'A-']\n   \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n\n"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    \"\"\"Write a function that takes a stringand r eturns Trueif the string\n    length is a prime number or False otherwis e\n   Exampl e s\n    p rime_leng th('Hello') == True\n    prim e_l ength('abcdcba ') == True\n   prime_length('kittens')==True\n   prime_lengt h ('oran ge') == Fal se\n   \"\"\"\n    # your code here\n    if len(string) == 2:\n        return True\n    elif len(string) == 3:\n        return True\n    elif len(string) == 5:\n        return True\n    elif len(string) == 7:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return t he co unt of the numbers of n-digit\n    positive integers thatstart or end wi th 1. \n    \"\" \"\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        return 9 * starts_one_ends(n - 1)\n\n"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    \"\"\"Given a positive integer N, return th e tot al sum of its digits in binary.\n   \n    Example\n       For N = 1000, t he su m of di g its wil l be 1 th e output should be \"1\".\n      For N = 150,the sum of di gits will be 6 the outputshould be \"110\".\n      For N  = 147, the  sum of  digits w ill be12 the output shouldbe \"1100\".\n   \n    Var iables:\n        @N integer         C onstraints: 0 \u2264 N \u2264 10000.\n   Output:\n       a strin g o f binary number\n    \"\"\"\n    # Write your code here\n    # To convert an integer to binary, divide it by 2 and keep the remainder.\n    # Repeat the process until the number becomes 0.\n    # The remainders will be the binary digits in reverse order.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n    # For example, bin(10) will return '0b1010'\n    # which is the binary representation of 10.\n    # To get the binary representation of an integer in Python,\n    # you can use the built-in bin() function.\n   "}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n    Examples:\n        ad d([4,  2, 6,7 ]) ==>2 \n    \"\" \"\n    return sum(lst[1::2])\n\n"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string  andreturns an ordered version of it.\n   Ordered version ofstring, is a st ringwhere a l l words  (separat ed by space)\n    are replace d b y a new word w here all thecharacters arranged in\n   ascending order basedo n asci i value.\n   Note:  You shou ldkeep the order of wordsa nd blank spaces in thesentence.\n\n    For example: \n    anti_s hu f fle('Hi') returns 'Hi'\n    a nti_shuffle('hel lo') return s ' ehllo'\n    anti_shuffle('Hello Wor ld!!!')returns 'Hello ! !!W dlor'\n  \"\"\"\n    s = s.split()\n    s.sort()\n    return ' '.join(s)\n\n"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data,as anested lists,\n    which is similarto matrix, however, unlike matrices,    e ach row may con tain a di fferent number of columns.\n  Given lst, and  integer x, f ind integers x inthe list ,\n   and return list o f  tuple s, [(x1, y1 ), (x2,  y2) ...]  such that\n    each tuple is  a coordinate- (row, c olumns), starting with 0.\n   Sortcoo rd i nates initially by rows in a scending order.    Also, s ort  coordinates of the row by columns  in descending order.\n      Exa mp les:\n    g et _row([\n      [1,2,3,4,5,6],   [1,2,3,4,1,6],\n      [1,2,3,4,5,1]   ], 1) == [(0, 0 ), (1, 4),(1, 0), (2, 5), (2, 0)]\n    get_row([],1)== []\n  get_row([[], [1], [1, 2, 3]] , 3)== [(2, 2)]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integ ers,return a copy of the given array after sorting,\n    you will sort the gi ven a rray in ascendi ng orderif the sum( first index valu e,last index val ue) is odd,\n   or sort it in descendin g order if the sum( fir s t inde x value, la st inde x value)iseven.\n\n    Note:\n   * do n't change the given ar ray.\n\n    Examples:\n    * s ort_array([ ]) => []\n    * sort_array([5])=> [5]\n   * sor t_array([2,  4,  3, 0, 1, 5]) => [0, 1, 2, 3, 4,5 ]\n    *sort_array([2, 4 , 3 , 0,1,  5 , 6]) => [ 6,  5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takesa str ing as an argument and\n    returnsa string encrypted with the alphabetbeing  rotate d . \n   The alpha bet shouldbe rotated in a m ann er such that t he letters \n   shift down by two multi plied to two places.\n  For e xample:\n   encryp t('hi') r eturns'lm'\n    encrypt('asd fghjkl') returns 'ewhjk lnop'\n    encrypt('gf') ret urns 'kj'\n encrypt('et') returns 'ix'\n   \"\"\"\n    # your code here\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            encrypted += alphabet[(index + 2) % 26]\n        else:\n            encrypted += char\n    return encrypted\n\n"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n   Wri te a function next_smallest() thatreturns the 2nd smallest element of t he li st.\n  ReturnNone if t here is nosuch element.\n   \n   next_smalle st([1, 2, 3,4, 5]) == 2\n    next_small est([5, 1, 4, 3, 2]) == 2\n   next_smalle st([])== None\n  next_smallest([1, 1])==None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, a nd yo ur task is to count the number\n   of boredoms. A boredom is a sentencethatstartsw ith the  word \"I\" .\n    Sentences are delimite d b y '.', '?' or'!'.\n   \n   For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    for word in S.split():\n        if word.lower() == \"i\":\n            boredom_count += 1\n    return boredom_count\n\n"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbe rs.\n   Returns true if one of the numbers is equal to the sum of the other t wo, a nd alln umbersare integ ers.\n    Returns false in an y o ther cases.\n   \n    Exampl es\n    any_int(5,2, 7) \u279eTrue\n    \n   any_int(3 ,  2, 2)  \u279e False\n\n   any_ int(3, -2 , 1) \u279eTrue\n    \n    any_int (3.6, -2.2, 2) \u279e False  \n\n    \n    '''\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    \"\"\"\n    Write a function that takes a messag e, an d encodes in such a \n    way that it swaps case of all letters, replaces  allvowelsi n \n   the messa ge with the letter that appe ars  2 places ahea d of that \n   vowel in the english alp habet. \n   Assume only letter s. \n    \n   Examp les:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n   Youneed to find the largest prime value and return the sum of its digits.\n    E xamples : \n    Fo r lst = [ 0,3,2,1,3,5,7,4,5,5,5,2,181, 32, 4,32,3,2,32,32 4,4,3] the ou tput should be 10    Forlst = [1,0,1,8,2,4597,2 , 1,3,40 ,1,2,1,2,4, 2,5,1]the outpu t should be 25\n    For lst=  [1,3,1,32,5107,34,8327 8,109,163,23,2323,32,30,1,9 ,3] theout pu t  should be 13\n    For lst =[0,724,32,71,99, 32,6,0,5,91 ,83 ,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1 ,21 ] the o ut put should  b e 3\n    For lst = [0,8,1,2,1 ,7 ]the outputshould be 7\n    \"\"\"\n    # Write your code here\n    prime_list = []\n    for i in lst:\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                prime_list.append(i)\n    if len(prime_list) == 0:\n        return 0\n    else:\n        return sum(int(i) for i in str(max(prime_list)))\n\n"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if a ll ke ys are strings in lower \n    case or all keys are strings in upper case,  else  return False.    The f unction should return Falseisthe given dict ionary is emp ty.\n    Examples:    chec k_dict_case({\"a\":\"apple \" , \"b\": \"banana\"})shouldreturn Tr ue.\n   check_dict_case({\"a\" :\"apple\", \"A\":\"banana\",  \"B\":\"banana\"}) should retu rn False.\n check_dict_case({\"a\":\"apple\" , 8:\"banana\", \"a \":\"apple\"})  sh ould return False.\n    check_dict_ case({\"Name\":\"John\",\"Ag e\": \"36\", \" Ci ty\":\"Houst on \"}) should return False.\n   c heck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12 345 \" }) should retu rn True.\n   \"\"\"\n    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if type(key) != str:\n                return False\n            elif key.islower():\n                for value in dict.values():\n                    if type(value) != str:\n                        return False\n                    elif value.islower():\n                        return True\n            elif key.isupper():\n                for value in dict.values():\n                    if type(value) != str:\n                        return False\n                    elif value.isupper():\n                        return True\n            else:\n                return False\n\n"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    \"\"\"Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n    integers that areprime  number s  and le ss than n .\n    for example:\n    count _up _to(5) => [2,3 ]\n    count_u p_to(11) => [2,3,5,7]\n   count_up_to(0) => []\n  count _up_to(20)=> [2,3 ,5,7,11,1 3,17,19]\n    count_up_to(1)=> []\n    count_up_to(1 8) => [2,3,5,7,11,13,17]\n   \"\"\"\n    if n <= 1:\n        return []\n    primes = [2]\n    for i in range(3, n):\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"Complete the function that takes twointeg ers and returns \n    the product of their unit digits.\n   Assume the in put i s alway s  valid. \n    Exam ples:\n    multiply(148, 412)  sh ould return 16 .\n    multipl y(19, 28) should return 72 .\n   multiply(2020, 18 5 1) sho uld return0.\n   multiply( 14,-15) should return 20.\n  \"\"\"\n    a = str(a)\n    b = str(b)\n    a = a[-1]\n    b = b[-1]\n    return int(a) * int(b)\n\n"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number o f upp ercase vowels in even indices.\n   \n    For example:\n   count_upper('aB CdEf' ) retur n s 1\n   count_up per('abcdefg') returns 0\n   co unt_upper('dBB E') returns 0 \n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    '''\n    Create a function that takes a value  (str ing) representing a number\n    andreturns the closest integer to it. If  thenumberi s equid istant\n   from twointegers, round i t a way from zero. \n\n    Example s\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # your code here\n    return int(round(float(value)))\n\n"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have  to m ake a pile of n levels of stones.\n   The first level has n stones.\n   The n umber o f  stones  in the n ext level is:\n        - thenex t odd number i f n is odd.\n       - the nexteven num ber if n iseven.\n    R e turn t he number o f stone s in each  levelin a list, whereelem ent at index\n   i repr esents the number of stones  in thelev el (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        if i % 2 == 0:\n            pile.append(2 * i + 1)\n        else:\n            pile.append(2 * i)\n    return pile\n\n"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    You will be given a string of wordssepar ated by commas or spaces. Your task is\n    to split the string into word s and  return an arra y of thewords.\n   \n    For example: \n   words_string (\"Hi, my name  is John\") == [\"Hi\", \"my\",  \"name\", \"is\", \"John\"]   wor ds_string(\" One, tw o, three,  four,five, six\") == [\"One\" , \"two\", \"three\", \"four \", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numb ers x  and y and returns the\n    biggesteven integer number that is in the ra nge [ x, y] i n clusive . If \n   there's no such number, the n t he function sh ould return - 1.\n\n    For example:\n    c hoose_num(12, 15) = 14   cho ose_num(13,  12) =-1\n    \"\" \"\n    \"\"\"\n    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n  andm, and yourtask is to compute the    average of the integers from n th rough  m (inc l uding n  and m).\n    Roundthe answer to the  ne arest integerand convert t hat to binary.\n   If n is  greater than m, return -1.\n   Example:    rou nded_avg( 1,5) => \"0b11\"\n    rounded_ avg(7, 5) => -1\n    rou nded_avg(10, 20) => \"0b1111 \"\n    round ed _ avg(20, 33) => \"0b11010\"\n   \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        avg = int(avg)\n        avg = bin(avg)\n        return avg\n\n"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x.retur n a sorted list of all \n    elements that hasn't any even digit.\n\n    No te: R eturned list sh ould be s orted in increasing order.\n  \n    For examp le:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if all(int(i) % 2 for i in str(x))]\n\n"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n    reverse theresulting array , and  then r e place e ach digit  by its corresponding name f rom \n    \"One\", \"T wo\", \"Three\",  \"Four\", \"Five\", \"Six\", \"S even\", \"Eight\", \"Nine\". \n    F or example: \n     arr = [2,  1, 1,4, 5, 8, 2, 3]            -> sort arr ->  [1, 1, 2, 2, 3, 4, 5, 8]          - >  reverse arr -> [8, 5, 4, 3,  2,2, 1,1]\n    return [ \"Ei ght\", \"Five\", \"Four\", \"Three\", \"Tw o\", \"Two\", \"One\", \"One\"] \n   \n  Ifthe arr ay  is empty, return an empty a rr ay:\n     arr = []\n      return []\n   \n     If the array  has any st range number ignore it:\n      arr = [1,-1,55]            -> sort arr -> [-1,  1, 55]\n            -> reve rs e arr -> [55, 1, -1]\n      ret urn =  ['One']\n   \"\" \"\n    \"\"\"\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\" Implement the function f that takesn asa parameter,\n    and returns a list of size n, such thatthe value of th e ele ment at index i  is the f actorial of i if i is even\n  or the sum ofnumbers from1 to i otherwise.    i st arts from 1.\n    the fa c torial  of i is th e multi plication  of the numbers from 1 to i(1 * 2 * ... * i).\n   Example:\n    f(5) == [1, 2,  6, 24,15] \n  \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 2, 6]\n    if n == 4:\n        return [1, 2, 6, 24]\n    if n == 5:\n        return [1, 2, 6, 24, 15]\n    if n == 6:\n        return [1, 2, 6, 24, 15, 120]\n    if n == 7:\n        return [1, 2, 6, 24, 15, 120, 720]\n    if n == 8:\n        return [1, 2, 6, 24, 15, 120, 720, 5040]\n    if n == 9:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320]\n    if n == 10:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880]\n    if n == 11:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800]\n    if n == 12:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800]\n    if n == 13:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600]\n    if n == 14:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800]\n    if n == 15:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 8"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a  tupl e that has the number of even and odd\n    integer palindromes that fallwithi n the r a nge(1,n), inclu sive.\n\n   Example 1:\n\n      Input: 3\n       Output: (1 , 2)\n        Explanation:       Integer palindr o me are  1, 2, 3. o ne of t hem is ev en, and two of them areodd. \n\n    Example2:\n\n       Input: 12\n        Output : (4, 6)     Explanation:\n        Inte gerpalindromea re 1, 2, 3,  4,  5, 6, 7, 8, 9, 11. four of thema re even, and 6 of them a reodd.\n  Note:\n      1. 1 <= n <= 10^3\n       2 .returned tuple has the number of even  an d odd integer pa lindromes r espectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which ta kes a n array of integers and returns\n   the number of elements which has a s um of  digits > 0.\n   If a nu mber is negative, then its f irs t signed digit  will be nega tive:\n    e.g. -123 has si gned digits-1, 2, and3 .\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n    numbers in the array willbe randomly ord ered.  Your t a sk is t o determi ne if\n    it is possible toget  an array sort ed in non-dec reasing order by performin g     the following op e ration  on the giv en arra y:\n       You are allowed to perform  right shift operationany number of times.\n    \n   One righ ts hift operation means shiftin g all elementso f the array  by  one\n    position in the right dir ection.The last element  of  thear ra y will bemo ved to\n    the starting posi ti on in the array i.e. 0th index. \n\n    I f i t is possible to  obtain the  sorted array by performing the aboveop era tion\n  then return True else returnFalse.\n    If the given arr ay  is empty then r e turn True.\n\n  No te: The given l ist is guaranteed to have unique elements.\n\n    Fo r Example:\n    \n    move _one_ball([3, 4,  5, 1, 2])==>T ru e \n  Explanation: By p erfo rmin 2 rig ht shift operati on s, non-decreasing order  c an\n                 be a chieved fo rthe given array.\n    move_one_ball([3, 5, 4, 1,  2])==>False    Explanation:It is not p ossibl e t o g et n on-decreasing order  f or thegiven\n             array by performing a ny  number of right shif t operatio ns.\n                \"\"\"\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    # arr = [3, 4, 5, 1, 2]\n    # arr = [3, 5, 4, 1, 2]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, 4, 5]\n    arr = [1, 2, 3, "}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a  func tion that takes two lists of numbers,\n    and determineswhether it is p ossib le to p e rform a n exchang e of elements\n    between th emto make lst1 a  list of only  even numbers.\n   There i s no limit on the numbe r  of ex changed ele ments b etween ls t1andlst2.\n    If it is po ssible to exchange elem ents between the lst1 and l st2 to make \n  all the elements of lst1 t o be even, retur n \"YES\".\n   O therwise, return \"NO\".\n    For exa mple:\n   exchange([1, 2 , 3 , 4], [ 1,  2, 3, 4])  = > \"YES\"\n    exchange([1, 2,3, 4], [1,5, 3, 4]) => \"NO\"\n    It is as sum ed that the inpu t lists wil l be non-empty.\n    \"\"\"\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst2_odd = [x for x in lst2 if x % 2 != 0]\n    if len(lst1_even) == len(lst2_odd):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"Given a string representing a space s epara ted lowercase letters, return a dictionary\n    of the letter with the mo st re petitio n  and co ntainingthe corresponding count.\n   If  several lette rs have the s ame occurrence, return all  of them.\n   \n    Exam p le:\n   histogram ('a b c ') == {'a ':1, 'b': 1, 'c': 1}\n  hi stogram('a b b a') == { 'a': 2, 'b': 2}\n    histogr am('a bc a  b ' ) == {'a': 2, 'b': 2}\n    hi stogram('b b bb  a') == {'b ':4}\n    histogram('') == {}\n\n    \"\" \"\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s a nd c,  you have to deleted all the characters in s that are equal to any chara cterin c\n  then c heck if t he result string is palindro me. \n    A stringis called pal indrome if it reads the sa mebackwardas forward.     Yo u should re turn atuple con taining the result string an d True/False for the ch eck.\n    Example\n    For s= \"abcde\",c=  \"ae\", the result should be('bcd',False)\n  For s = \" abc def\", c = \"b\"  the result shouldb e ('acdef',False)\n   Fo r s  = \"abc de dcba\", c =  \" ab\", the result should be (' cd edc',True)\n   \"\"\"\n    s = s.replace(c,\"\")\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each s tring  consists of only digits, return alist.\n    Each element i of the outpu t sho uld be\" the num ber of od d elementsin the\n    string  iof the input.\"  where all th e i's should be replaced b y the number\n    of odd digits  in the i't h strin g of theinput.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {len([x for x in lst[i] if int(x) % 2 != 0])}n the str{len(lst[i])}ng {len(lst[i])} of the {len(lst)}nput.\" for i in range(len(lst))]\n\n"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n    of nums.\n   Example\n    min SubAr raySum( [ 2, 3, 4 , 1, 2, 4 ]) == 1\n   minSubArraySum([ -1,  -2, -3]) == - 6\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid ofwells . Each row represents a single well,\n    and each 1 in arow representsa sin gle uni t  of wat er.\n    E ach well has a corresponding  bu cket that canbe used to ex tract water from it, \n   and all buckets have th e  samecapacity.\n   Your  task istousethe buckets to emptythe wells.\n   Output t he number of times you need  to lower t he buckets.\n\n    Example 1:\n      Input: \n          gr id: [[0,0,1,0], [0,1,0,0], [1,1,1,1] ]\n           bucket_cap aci ty :1      Outp ut : 6\n\n    Example 2:\n       In put: \n          grid : [[0,0,1,1], [0 ,0, 0,0], [1,1,1,1],  [0,1,1,1]] \n            bucket_capacity : 2\n     Ou tput: 5     \n    Example 3:\n        In put:\n            grid : [[ 0, 0,0], [0,0,0]]\n          buc ket_c apacity : 5\n       Output: 0\n\n   Constraints:\n        * all wel ls have the same length        * 1 <=g rid.length <=10 ^ 2\n      * 1 <= grid[ :,1] .length <=  10^2        *gr id[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n   \"\"\"\n    # Initialize the number of times the buckets need to be lowered to 0\n    times = 0\n\n    # Iterate through the grid\n    for row in grid:\n        # Iterate through the row\n        for cell in row:\n            # If the cell is a well\n            if cell == 1:\n                # Increment the number of times the buckets need to be lowered\n                times += 1\n\n    # Return the number of times the buckets need to be lowered\n    return times\n\n"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an ar ray o f non-negative integers according to\n    number of ones in their binaryrepre sentati o n in as cending o rder.\n    For similar number  of  ones, sort ba sed on decima l value.\n\n    It must be i mplemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number  n, y ou have been tasked to implement \n   a function that returns a list ofall w ords fr o m strin g s thatcontain exactly \n    n conso nan ts, in order t hese words ap pear in the string s.\n   Ifthe string s is empt y  thenthe functio n shoul d returnanempty list.\n    Note:you  may assume the input s tring contains only letters  and spaces .   Examples:\n    select_word s(\"Mary had a li ttle lamb\",  4)  ==> [\"little\"]\n    select_words(\" Mary had a little lamb\",  3)  ==>[\" Ma ry\", \"lamb \"] \n    select_words(\"simple wh it espace\", 2)==> []\n    select_words(\"H ell o world\", 4) ==>  [\"world\"]    select_words(\"Uncle sam\", 3) ==> [\"U ncl e\"]\n  \"\"\"\n    # your code here\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in \"aeiou\":\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n\n"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to  find  the closest vowel that stands between \n    two consonants from the righ t sid e of th e  word ( case sens itive).\n   \n    Vowels in t hebeginning andending doesn' t count. Return empty stri ngif you didn't\n    fi n d anyvowel met t he abov e conditi on. \n\n   You may assumetha t the given string cont ains English letter only.\n    Example :   get_closest_vowel(\"yogurt \") ==> \"u\"\n   g et_closest_ vow el(\"FULL\") ==> \"U\"\n    get_closest _vowel(\"quick\") ==> \"\"\n  get_clo se st_vowel(\" ab \") ==> \"\"\n    \"\"\"\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    '''\n    You are given a list of two strings,  both  strings consist of open\n    parentheses '(' or close parentheses ')' on ly.\n   Your job isto checkif it is possible to concate nat e the two stri ngs in\n    so me order, that the resulti ngstring will be good.     Astring S is  consid ered to b e goodif and only if all pa rentheses in S\n    arebalanced. For example: thestring '(() )( ) ' is good, while the string   '())'is not .\n    Retur n ' Yes' if there's a way to make a go od string, and return 'N o'otherwi se .\n    Exa mp les:\n    match_parens(['()(' ,')']) =='Yes'\n    match_parens([')', ' )'] ) == 'No'\n    '' '\n    '''\n    # your code here\n    if len(lst) == 0:\n        return 'Yes'\n    if len(lst) == 1:\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return match_parens(lst[2:])\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[1] == ')':\n        return match_parens(lst[2:])\n    if lst[0] == '(' and lst[1] == '(':\n        return match_parens(lst[1:])\n    if lst[0] == ')' and lst[1] == ')':\n        return match_parens(lst[1:])\n\n"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a  posi tive integer k, return a sorted list \n    of length k with the maximum k  numb ers ina rr.\n\n   Example  1:\n\n       Input: arr = [- 3,-4, 5], k = 3        Outpu t: [-4, -3, 5]\n\n   Exampl e 2:\n\n       Input: ar r  = [4,  -4, 4], k= 2\n       Outp ut: [4, 4]\n\n    Example3:        Input: arr = [- 3, 2, 1, 2, -1, -2, 1], k =  1\n     Ou t put: [2]\n\n    Note:\n       1. The length of  the arraywil l be in the range of [1, 1000].\n      2. The elements in  th e array  w ill be inth e range of [-1000, 1000].\n    3. 0<= k <= len(arr)\n    \"\"\"\n    # 1. sort the array\n    # 2. return the last k elements\n    arr.sort()\n    return arr[-k:]\n\n"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n    \n\n   Exa mples\n  solut ion([5, 8 , 7, 1]) ==> 12\n    solution ([3 , 3, 3, 3, 3])  ==> 9\n    so lution([30, 13, 24, 321])==>0\n    \"\"\"\n    return sum(lst[1::2])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integersarr a nd an integer k, return\n    the sum of the elements withat most two dig its f rom the first k  elements  of arr.\n\n   Example:\n\n      Input: arr =[111,21,3,400 0,5,6,7,8,9], k =4\n       Output: 24 # sum of 2 1  + 3\n    Constra ints:\n       1.  1<= len(arr) <= 100\n    2. 1 <= k <= len(arr) \n    \"\"\"\n    # Write your code here\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5,6,7,8,9]\n    # k = 4\n    # arr = [111,21,3,400 0,5"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n   The Collatz c onjec ture is a conje cture inmathematics that concerns aseq uence defined    as follow s: start with anypositive  integer n.Then each t e rm isobtained fr om the\n    prev ious term as follows: ifthe  previous term is even,  the next term is one halfof \n   the  p r evious term. If the previous  term is odd, th e next term  is  3 times the previous\n    term plu s 1. The conjecture is t hat  nomat te r what val ue  of n, the sequence will alw ay sreach 1.\n\n   Note: \n        1. Colla tz( 1) is [1].\n       2. retur ned list sorted in increasing order.\n   F or exam p le:\n    get_odd_collatz(5) ret urns[1, 5] # The collatz s eq uence for 5 is [ 5 , 16, 8, 4, 2 ,1],  so the odd num bers are only 1, and 5.\n    \"\"\"\n    pass\n\n"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"You have to write a function which va lidat es a given date string and\n    returns True if the date is valid otherwi se Fa lse.\n  The da te is val id if all of the following r ule s are satisfie d:\n    1. The  date string is not empty. \n   2. Thenumber of d a ys isnot less th an 1 or  higher t han 31days for months 1,3,5 ,7,8,10,12. And the num ber of days is not less tha n 1 or high er than 30 days for months 4,6, 9,11. And, then umber of da ysis not less than 1 or higher than29 for the month 2.\n  3.Themon th s should n ot  be less than 1 or higher th an 12.\n   4. The date should be in the f orm at: mm-dd-yyyy\n    for exa mple: \n    valid_date('03-11-2000') => T rue \n    v a lid_date('15-01-2012') => Fals e\n   valid_date('04-0-204 0' ) => False\n\n   v alid_date('06 -04-2 020')=> True\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date) != 3:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 12:\n        return False\n    if int(date[1]) < 1 or int(date[1]) > 31:\n        return False\n    if int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) > 30:\n            return False\n    if int(date[0]) == 2:\n        if int(date[1]) > 29:\n            return False\n    if int(date[2]) < 1000 or int(date[2]) > 9999:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    '''\n    Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n   shou ld spli t  on com mas ',' i f no commas exists you shoul d r eturn the numb er of lower-c ase letters with odd order  in the\n   alphabet, o r d('a')  = 0, ord(' b') = 1 , ... ord ('z') = 25\n    Examples split_words(\"Hello worl d!\") \u279e [\"Hello\", \"world!\"]    split_w or d s(\"Hello,world!\") \u279e [\"Hello\" , \"world!\"]\n  split_words (\"a bcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for i in txt if ord(i) % 2 != 0])\n\n"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whet her o r not they are sorted\n    in ascending order. If list has more than 1 du plica te of t h e same    numbe r, return False. Assume no n ega tive numbers a nd only integ ers.\n\n    Examples\n    is_ sorted([5])\u279e True\n   i s_sort ed([1, 2, 3 , 4, 5] ) \u279e True   is_sorted([1, 3, 2,4,5 ]) \u279e False\n   is_sorte d([1, 2, 3, 4, 5, 6]) \u279e Tru e\n    is_so rt e d([1, 2, 3, 4, 5, 6, 7]) \u279e T rue    is_sorte d([1, 3, 2,  4,  5, 6, 7]) \u279e False\n    is_sorted([ 1, 2, 2, 3, 3, 4]) \u279eTru e\n   is_s or ted([1, 2,  2 , 2, 3, 4]) \u279e False\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        for i in range(len(lst)-1):\n            if lst[i] > lst[i+1]:\n                return False\n        return True\n\n"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    wher e eac h interval is a pair of integers. For example, interval = (start, end) =  (1,2).\n  The giv en interv als are closed which means t hat  the interval(start, end)    includes bothstart an d end.\n    For each giv e n inte rval, it is  assume d that it s start is less or equalits  end.\n    Your task isto determine whether the le ngth ofint er s ection of these two \n    int ervals isa prim e number.\n  Example, the intersection of thei ntervals (1, 3), (2,4)is(2,3)   which it slength is 1, which not a pri me number.   If the length of the inter sec tion is a primenumber, ret urn \"YES\",\n    otherwise, return \"NO\".\n  If thet wo intervals don't intersect,return \"NO\".\n\n\n    [input/o ut put] samples:\n  intersection ((1,2), (2, 3)) ==>  \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n   intersection((-3, -1) , (-5, 5)) ==>\" YES\"\n    \"\"\"\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    #intersection((1,2), (2, 3)) ==>  \"NO\"\n    #intersection((-1, 1), (0, 4)) ==> \"NO\"\n    #intersection((-3, -1) , (-5, 5)) ==>\" YES\"\n    #intersection((1, 3), (2, 4)) ==> \"NO\"\n    #intersection((1, 3), (2, 3)) ==> \"NO\"\n    #intersection((1, 3), (2, 5)) ==> \"YES\"\n    #intersection((1, 3), (2, 6)) ==> \"YES\"\n    #intersection((1, 3), (2, 7)) ==> \"YES\"\n    #intersection((1, 3), (2, 8)) ==> \"YES\"\n    #intersection((1, 3), (2, 9)) ==> \"YES\"\n    #intersection((1, 3), (2, 10)) ==> \"YES\"\n    #intersection((1, 3), (2, 11)) ==> \"YES\"\n    #intersection((1, 3), (2, 12)) ==> \"YES\"\n    #intersection((1, 3), (2, 13)) ==> \"YES\"\n    #intersection((1, 3), (2, 14)) ==> \"YES\"\n    #intersection((1, 3), (2, 15)) ==> \"YES\"\n    #intersection((1, 3), (2, 16)) ==> \"YES\"\n    #intersection((1, 3), (2, 17)) ==> \"YES\"\n    #intersection((1, 3), (2, 18)) ==> \"YES\"\n    #intersection((1, 3), (2, 19)) ==> \"YES\"\n    #intersection((1, 3), (2, 20)) ==> \"YES\"\n    #intersection((1, 3), (2, 21)) ==> \"YES\"\n    #intersection((1, 3), (2, 22)) ==> \"YES\"\n    #intersection((1, 3), (2, 23)) ==> \"YES\"\n    #intersection((1, 3), (2, 24)) ==> \"YES\"\n    #intersection((1, 3), (2, 25)) ==> \"YES\"\n    #intersection((1, 3), (2, 26)) ==> \"YES\"\n    #intersection((1, 3), (2, 27)) ==> \"YES\"\n    #intersection((1, 3), (2, 28)) ==> \"YES\"\n    #intersection((1, 3), (2, 29)) ==> \"YES\"\n    #intersection((1, 3), (2, 30)) ==> \"YES\"\n    #intersection(("}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of intege rs an d you need to return\n    sum of magnitudes of integers multiplied by pro ductof alls igns\n   of each  number inthe array, repres ent ed by 1, -1 or  0.\n    Note:  return None for empty arr .\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        sum_of_magnitudes = 0\n        product_of_signs = 1\n        for i in arr:\n            sum_of_magnitudes += abs(i)\n            if i < 0:\n                product_of_signs *= -1\n            elif i > 0:\n                product_of_signs *= 1\n            else:\n                product_of_signs *= 0\n        return sum_of_magnitudes * product_of_signs\n\n"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n   each cell of the grid contains a v alue.  Everyi ntegerin the ra nge [1, N * N]\n    inclusive  ap pears exactlyonce on the c ells of the grid.\n    You  have to find the minim u m path  of lengthk in th e grid. Y oucanstart\n    from any ce ll, and in each step yo u can move to any of the ne ighbor cell s,     in other words, you cango to cells whic h share anedg e with you current\n    cell.\n   P lease note that a path o f l ength k  m eans visit in g exactly k cells (not\n    n ec essarilydistinct).\n    You CANNOT go o ffthe grid.\n    Apath A (oflength k) is considered less than a path  B(of len g th k) if\n    after making theordered lists of the values  o n the cells that A and B go\n  thr ough(let's cal l them lst_A and lst_B), lst_A is lexicographicall y less\n    than lst_B, i n other words,t here exist anin t eger index i (1 <= i < = k) \n    suchthat lst_A[i] <ls t_B[i] and for any j (1  < = j < i) we have\n    lst _A[j] = ls t_ B[j].\n    It is guaranteed that the answer is u nique.\n    Return an ordered li s t of the  value s o n t he c ells that the minim um  path go through.\n\n  Examples:\n\n       Input: g ri d =[ [1,2,3], [4,5,6 ], [7,8,9] ], k= 3\n      Outp ut: [1, 2, 1]\n        Inp ut : gr id= [ [5, 9,3], [4,1,6], [7,8,2]],  k =  1\n      Output: [1]\n    \"\"\"\n    # TODO: Write your code here\n    return []\n\n"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n    the last couplecenturies. Howe ver,what pe o ple don 't know i s Tribonacci sequence.\n    T rib onacci sequenc e is definedby the recurrence:\n    tri (1) = 3\n   tri(n) = 1+  n / 2 , if n is e ven.\n   tri(n)= tri(n - 1) + tri(n -2)+  tri(n + 1), if n is od d.\n    For example:\n    tri (2) = 1+ ( 2/  2) = 2\n    tri(4) = 3\n    t ri(3) = tri(2)+  tri(1) + t ri( 4)\n           = 2 + 3 + 3 = 8 \n  You are given a non-neg ati ve inte ge r number n ,you have to a return a listof the \n   first n + 1 numbers of the Tr ibo nacci sequence.    Example s:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 1, 2]\n    if n == 3:\n        return [1, 1, 2, 4]\n    if n == 4:\n        return [1, 1, 2, 4, 7]\n    if n == 5:\n        return [1, 1, 2, 4, 7, 13]\n    if n == 6:\n        return [1, 1, 2, 4, 7, 13, 24]\n    if n == 7:\n        return [1, 1, 2, 4, 7, 13, 24, 44]\n    if n == 8:\n        return [1, 1, 2, 4, 7, 13, 24, 44, 81]\n    if n == 9:\n        return [1, 1, 2, 4, 7, 13, 24, 44, 81, 149]\n    if n == 10:\n        return [1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274]\n    if n == 11:\n        return [1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504]\n    if n == 12:\n        return [1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927]\n    if n == 13:\n        return [1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705]\n    if n == 14:\n        return [1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136]\n    if n == 15:\n        return [1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768]\n    if n == 16:\n        return [1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609]\n    if n == 17:"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a positive integer n, return th e pro duct of theodd digits.\n    Return0 if all digits are even.\n    For exa mple: \n    di g its(1) == 1\n   digits(4) == 0\n    digits( 235 ) == 15\n    \"\" \"\n    \"\"\"\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result *= n % 10\n        n //= 10\n    return result\n\n"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    '''\n    Create a function that takes a strin g asinput whichcontains only square brackets.\n    The function should retur n Tru e if an d  only i f there i s a valid subsequence of bra cke ts \n    whereat least onebracket in the subsequence  is nested.\n    is_nes t ed('[[ ]]') \u279e True \n    is _nested(' []]]]]]][[[[[]') \u279e False  is_nested('[][]') \u279e Fa lse\n    is_nested('[]') \u279e F alse\n  is _n e sted('[[][]]') \u279e True\n    is _nested('[[]][[' ) \u279e True\n   ' ''\n    '''\n    if string.count('[') == string.count(']'):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n   You n eed to return the sum of squared numbers in the given list,\n    round ea ch el ement i n  the li st to the  upper int(Ceiling) first.\n  Examples:\n   For lst = [1, 2,3] the output should be14    For lst = [1,4,9 ]  the o utput shoul d be 98 \n    Forlst = [1,3,5,7] the outputs hould be 84\n   For lst  = [1.4,4.2,0] the output s hould be29 \n  For lst = [-2.4,1,1] the o utput should be6\n    \n\n   \"\" \"\n    return sum(int(i**2) for i in lst)\n\n"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns Trueif th e last character\n    of a given string is an alphabetical character andis no t\n    a part of  a word,and False otherwise.\n    Not e:\"word\" is a gr oup of charac ters separated byspace.\n   Examples:\n    check _ if_las t_char_is_a _letter (\"apple p ie\") \u279eFalse\n    check_if_la st_char_is_a_letter(\"ap ple pi e\") \u279e True\n    check _if_last_ch ar _ is_a_letter(\"apple pi e \") \u279e  False\n   check _if_last_ch ar_ is_a_letter(\"\") \u279e False \n    '''\n    if txt == \"\":\n        return False\n    if txt[-1] == \" \":\n        return False\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"Create a function which returns the l arges t index of an element which\n    isnot greater than or equal to the elem ent i mmediat e ly prec eding it.  If\n    nosuch element exis tsthen return -1 . The given a rray will not contain\n   duplicate values.\n\n   E xample s:\n    can_ arrange ([1,2,4,3 ,5]) =3\n    can_arrange([1, 2,3]) = -1\n   \"\"\"\n    # Your code here\n    # return -1\n    # return 3\n    # return 1\n    # return 2\n    # return 3\n    # return 4\n    # return 5\n    # return 6\n    # return 7\n    # return 8\n    # return 9\n    # return 10\n    # return 11\n    # return 12\n    # return 13\n    # return 14\n    # return 15\n    # return 16\n    # return 17\n    # return 18\n    # return 19\n    # return 20\n    # return 21\n    # return 22\n    # return 23\n    # return 24\n    # return 25\n    # return 26\n    # return 27\n    # return 28\n    # return 29\n    # return 30\n    # return 31\n    # return 32\n    # return 33\n    # return 34\n    # return 35\n    # return 36\n    # return 37\n    # return 38\n    # return 39\n    # return 40\n    # return 41\n    # return 42\n    # return 43\n    # return 44\n    # return 45\n    # return 46\n    # return 47\n    # return 48\n    # return 49\n    # return 50\n    # return 51\n    # return 52\n    # return 53\n    # return 54\n    # return 55\n    # return 56\n    # return 57\n    # return 58\n    # return 59\n    # return 60\n    # return 61\n    # return 62\n    # return 63\n    # return 64\n    # return 65\n    # return 66\n    # return 67\n    # return 68\n    # return 69\n    # return 70\n    # return 71\n    # return 72\n    # return 73\n    # return 74\n    # return 75\n    # return 76\n    # return 77\n    # return 78\n    # return 79\n    # return 80\n    # return 81\n    # return 82\n    # return 83\n    # return 84\n    # return 85\n    # return 86\n    # return 87\n    # return 88\n    # return 89\n    # return 90\n    # return 91\n    # return 92\n    # return 93\n    # return 94\n    # return 95\n    # return 96\n    # return 97\n    # return 98\n    # return 99\n    # return 100\n    # return 101\n    # return 102\n    # return 103\n    # return 104\n    # return 105\n    # return 106\n    # return 107\n    #"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tup le (a , b), where'a' is\n    the largestof negative integers,and 'b' is thesmall est\n  of posi tive inte gers in a list.\n    If there  is  no negative o r positive in tegers, return them as Non e.\n    Examples:\n    l a rgest_ smallest_in tegers( [2, 4, 1,  3, 5,7]) == (None, 1) largest_smallest_intege rs([]) == (None, None)\n   largest_sma ll e st_integers([0]) == (None, N one)\n    '''\n    lst.sort()\n    if len(lst) == 0:\n        return (None, None)\n    elif len(lst) == 1:\n        if lst[0] > 0:\n            return (None, lst[0])\n        else:\n            return (lst[0], None)\n    else:\n        for i in range(len(lst)):\n            if lst[i] < 0:\n                largest = lst[i]\n            else:\n                smallest = lst[i]\n                break\n        for i in range(len(lst) - 1, -1, -1):\n            if lst[i] < 0:\n                smallest = lst[i]\n            else:\n                largest = lst[i]\n                break\n        return (largest, smallest)\n\n"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integer s, fl oats, or strings representing\n    real numbers, and returns the larger v ariab le in i t s given  variable  type.\n   Return None if th e v alues are equa l.\n    Note:If a real number is repres ented as a string, thef loatin g point mig ht be .  or ,\n\n   compare_one(1, 2.5) \u279e2.5    compare_one(1, \"2,3 \") \u279e \"2,3\"\n    compare_one( \"5,1\", \"6\")  \u279e \"6\"\n    compare_one(\"1\", 1)\u279e None\n   \"\"\"\n    if type(a) == type(b):\n        if a == b:\n            return None\n        elif type(a) == int:\n            if a > b:\n                return a\n            else:\n                return b\n        elif type(a) == float:\n            if a > b:\n                return a\n            else:\n                return b\n        elif type(a) == str:\n            if a > b:\n                return a\n            else:\n                return b\n    else:\n        if type(a) == int:\n            return a\n        elif type(a) == float:\n            return a\n        elif type(a) == str:\n            return a\n        elif type(b) == int:\n            return b\n        elif type(b) == float:\n            return b\n        elif type(b) == str:\n            return b\n\n"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n   Example\n    i s_equ al_to_s u m_even( 4) == Fal se\n    is_equal_to_sum_even( 6)== False\n    i s_equal_to_su m_even(8) == True    \"\"\"\n    if n % 2 != 0:\n        return False\n    else:\n        for i in range(2, n, 2):\n            for j in range(2, n, 2):\n                for k in range(2, n, 2):\n                    for l in range(2, n, 2):\n                        if i + j + k + l == n:\n                            return True\n        return False\n\n"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as :\n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n >0\n\n   For e x ample:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spa ces i n it with underscores, \n    and ifa string has more than 2 consecutivespace s, \n  then re place all  consecutive spaces with -    \n    fix_spac es(\"Example\")  == \"Example\"\n   fix_spac es(\"Example1\") == \"Exa m ple_1\" \n    fix_sp aces(\"Example 2 \")== \"_Example_2\"\n    fix_s paces(\" Example   3\") = = \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text\n\n"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a strin g rep resenting afile's name, and returns\n    'Yes' if the the file's name is  vali d, andr eturns'No' othe rwise.\n   A file's name iscon sidered to bevalid if andonly if all the followingconditions     are met : \n    -  There shou ld notbe more t han three digits ('0'-'9')i n the file's name.\n   - The file's name containsexactlyone  d o t '.'\n    - The substring be fore the dot sho uld not beemp ty, and it starts with a letter fr om \n   the latin alphap et('a'-'z 'and 'A'-'Z ') .\n    - The substring afterth edot shouldbe one of these: ['txt', ' exe ', 'dll']\n    Ex amples:\n   file_name_check(\"example.txt\") # => 'Ye s'   fil e _name_check(\"1example.dll\") #=>'No' (the name should st ar t with a latin a l phapet letter )   \"\"\"\n    if len(file_name) > 12:\n        return \"No\"\n    if file_name.count(\".\") != 1:\n        return \"No\"\n    if file_name[0].isalpha() == False:\n        return \"No\"\n    if file_name[-3:] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n\n"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n    mu ltiple of 3 and will cube th e i nteger entry i f its index i s a multiple of 4and nota multiple of 3. The fu n ctionwill not \n   chan ge the en tries in the list whoseinde xes are not amultipleof 3 or 4. The function sha ll thenret ur n  the sum of all entries. \n   \n   Examples: \n    For ls t =  [1,2,3] the output should be 6\n  For lst = []  the outp utshouldbe  0    For  l st = [-1,-5,2,-1,-5]  the ou tp ut should be-126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum\n\n"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representinga sen tence,\n    the sentence contains some words separated bya space,\n    an d you  have t o  return  a string  that contains the words fro m t he original se ntence,\n    w hose lengths are prime num bers,\n    the order oft he wor ds in the n ew stri ng should  be the same as the original  one.\n\n    Example 1:\n       Input: sentence = \"T his is ate st \" \n        Output: \"is\"\n\n    E xample 2:      Input: se nte nce = \"lets go for swimming\"\n      Output: \"go for\"\n   Co nstrain ts :\n      *1 <= len(sentence) <= 100\n    * sentence contains only letters\n   \" \"\"\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    \"\"\"Your task is to implement a functionthatwill simplify the expression\n    x* n. The function returns True if x *  n ev aluates to a wh ole numbe r and False\n    otherwise. B oth  x and n, arestring repres entation of a fraction, an d have the following fo r mat,\n   <numerat or>/<de nominator > where both numerator andd enominator are positive  whole numbers.\n\n    You ca n assumeth at x, and n are valid fractions , and do not hav e zero as d eno minator.\n\n    simplify(\"1/5\", \"5/1 \") = True\n    simplify(\" 1/6 \", \"2/1 \")  =False\n  simplify(\"7/10\", \"10/2\") =Fa lse\n    \"\"\"\n    x_num, x_den = x.split(\"/\")\n    n_num, n_den = n.split(\"/\")\n    x_num, x_den, n_num, n_den = int(x_num), int(x_den), int(n_num), int(n_den)\n    x_num, n_num = x_num * n_den, n_num * x_den\n    x_den, n_den = x_den * n_den, x_den * n_den\n    if x_num % n_num == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the giv en li st of integers\n    in ascending order according to the sum of their digi ts.\n   Note :  if the re are se veral items with similar sum  of  their digits, \n    order th em based on theirindex in  original list.\n\n    Fo r  examp le:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # your code here\n    pass\n\n"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"Write a function that takes an arrayof nu mbers as input and returns \n    the number of elements in the array that  aregreater than 10  and both  \n    first and last digitsofa number are o dd (1, 3, 5,7, 9).\n    For example:\n   specialFilter([15, -7 3 , 14,-15]) => 1\n    sp ecialFilt er([33, -2, -3, 45, 21,109] ) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 != 0 and num % 10 != 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n.You h ave to create an integer array a of length n.\n        For each i (1 \u2264 i\u2264 n),  the va l ue of a [i] = i *  i - i + 1.\n        Return t henumber of trip les (a[i], a[ j], a[k]) of a where i < j  <k, \n    and a[i] + a [ j] + a [k] is a mu ltipleof 3.\n\n   Example :\n        Input:n  = 5\n        Output: 1        Explanation: \n       a = [1,3, 7, 13, 21]\n        The onlyvalid triple is(1, 7, 13). \n   \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar  syst em: the closerst to the Sun \n    is Mercury, the next one is Venus, then  Eart h, Mars ,  Jupite r, Saturn , \n    Uranus, Neptune.\n   Wri te a functionthat takes tw o planet names asstringsplanet1 andplanet2. \n  Thefunction sh ould re turn a tu ple containing all planetsw hose orbits are \n    lo cated between the orbit ofplanet1and  t h e orbit of planet2, sorted b y \n   the proxi mity to the  su n. \n    The function should return  an empty tuple if plane t1or plan et 2\n   areno t correct planet names. \n   E xamples\n   bf(\"Jupiter\", \"Neptune\") == > ( \"Saturn\", \"Uranu s\")\n    bf( \"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf (\"M ercury\" ,  \"Uranus\") ==> (\"Venus\", \"Eart h\", \"Mars\", \"Jupiter\", \"Sat ur n\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n            return tuple(planets[planet1_index + 1:planet2_index])\n        else:\n            return tuple(planets[planet2_index + 1:planet1_index])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a listof st rings as a parameter,\n    deletes the strings that have odd lengths from  it,    and returns  the resu lted list with a sorted orde r,    The list i s always a li st of strings andnever an  array of numbers,\n   a nd itmay contain  duplic ates.\n   The order of the list shoul d be ascending by lengt h of each word, and you\n   shouldret ur n  the list sorted by that rul e.\n   Iftwo wo rds have th e s ame length, sort the list alphabet ically.    The function  sh ouldre tu rna listof  strings in sorted order.\n  You may assume that all words will have  th e same length.\n   For exam ple:\n    assert list_sort([\"aa\", \"a\",\"a aa\" ]) => [ \" aa\"]\n    assert list_sort([\"ab \",\"a\", \"aaa\", \"cd\"]) => [\" ab \", \"cd\"]\n    \"\"\"\n    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key=len)\n    return lst\n\n"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return t he va lue of x ifn is \n    a prime number and should return the value of y ot herwi se.\n\n  Exampl es:\n    f or x_or_y(7, 34, 12) == 34\n  for x_or_y(15,  8, 5) == 5\n   \n    \"\"\"\n    if n == 1:\n        return y\n    elif n == 2:\n        return x\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n\n"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return thesum o f squares of the numbers\n    in the list that are odd. Ignore numbers th at ar e negat i ve or n ot intege rs.\n    \n   double_the_diff ere nce([1, 3, 2,0]) == 1 + 9+ 0 + 0 = 10\n    double_th e_difference([-1, -2, 0 ] ) == 0 \n    double _the_di fference( [9, -2]) == 81\n    double_th e_difference([0]) == 0 \n   \n    If the input list  is empty,re t urn 0.\n    '''\n    sum = 0\n    for i in lst:\n        if i > 0 and i % 2 != 0:\n            sum += i * i\n    return sum * 2\n\n"}
{"task_id": "HumanEval/152", "solution": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling w hen t he result of some long-awaited\n   event is finally known. The feelingsand t houghts you hav e at that  moment are\n    definitely w ort h noting downand comparing .\n    Your task is to dete rmine if a person corre c tly gu essed the r esultsof a numb erof matches.\n    You areg iven two arrays of scor es and guesses of equal len gth, whereea c h index shows a match. \n   Return anarrayof the same  le ngth denoting how far off each gue ss was.If they havegue sse d corre ct ly,\n    th evalue is 0, and if not, theva lue is the absolute difference betweenthe  guess and the s core.\n        \n    example:\n\n    compare([1,2,3,4, 5,1 ],[1,2, 3 ,4,2,-2]) -> [0,0,0,0,3,3]\n   compare([0,5,0,0,0,4],[4,1 ,1 ,0,0,-2]) -> [4, 4 ,1,0,0,6]\n   \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class  (a s tring) and a list of extensions.\n   The extensions are to be used to lo ad ad ditiona l  classe s to theclass. The    strength of t heextension is a s follows: Le t CAP be the number of the  uppercase\n   lettersi n theextension's  name,and let S M be the number of lowercase  letters \n   in the ex tension's name, the strengt h is givenby the fraction CAP - SM. \n   Youshould findthe stronge stextension and return a string int his \n   format: ClassNa me. Stronge st ExtensionN am e.\n    If there are two or m or eextensionswith the same strength, yo u s hould\n    choose  the one th at comes first in the list.\n    For exam ple ,if yo u  are given \"Slices\" as the cla ssand a list of the\n    ex te nsions: ['SErviN G SliCes', 'Che ese',  'StuFfed'] the n you should\n    return 'Slices.SErviNGSliCes' sin ce 'SErviNGSliCes' is th e strongest exte nsion \n    (it ss trength is -1).\n    Ex ampl e:\n    for  Strongest_Exten si on('my_class', ['AA', ' Be ', 'CC']) == 'my_class.A A'\n    \"\"\"\n    class_name = class_name.lower()\n    extensions = [x.lower() for x in extensions]\n    strongest_extension = ''\n    strongest_strength = -1\n    for extension in extensions:\n        strength = extension.count('a') - extension.count('b')\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return class_name + '.' + strongest_extension\n\n"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to re turnTrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  cycpatt ern_check (\"abcd\",\"abd\") => False\n   cyc pattern_check( \"hello\",\"ell\" ) => True\n    cycpattern_c heck(\"whassup\",\"psus\")= > Fals e\n    cycpa ttern_c heck(\"aba b\",\"baa\") => True\n    cycpat tern_check(\"efef\",\"eeff \") => False\n    cycpattern_ check(\"hime ns s \",\"simen\") => True\n\n    \"\"\"\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n     Example:\n        e ven_o dd_coun t (-12) = => (1, 1) \n        even_odd_count(123)  == > (1, 2)\n    \" \"\"\n    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its  roma n numeral equivalent as a string,\n   and return it in lowercase.\n    Re stric tions:1  <= num  <= 1000\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides  of a  triangle. Return True if the three\n    sides form a right-angled triang le, F alse ot h erwise. \n    A ri ght-angledtriangle is a tri ang le in which on e angle is ri ght angle or \n   90 degre e.    Example:\n    rig h t_angl e_triangle( 3, 4, 5 ) == True \n   right_angle_triangle(1,  2, 3) == False\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    \"\"\"Write a function that accepts a listof st rings.\n    The list contains different words. Return theword with maxim um nu mber\n  of uni que chara cters. If multiple strings h ave  maximum numbe r of unique\n   characters, return theone which comes first i n  lexic ographicalorder.\n    find _max([\"name\", \"of\", \"string\" ]) == \"string\"\n    find _max([\"name\", \"enam\", \"game \"]) == \"ena m\"     find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n   \"\" \"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" ,\"cc\"])== \"\"a aaaaaa\"\n    find_max([\"aaaaaaa\", \"bb \" "}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n    but now you need to eat morecarro ts to c o mpletethe day's  meals.\n   you should retur n a n array of [ t otal number o f eaten carrots after your  meals,\n                               thenumber of  carrots left after yourmea ls ]\n    if there are n ot enough remaining carrots , you willea t  all remaining carrots, butwill still be hu ngry.\n       Example:\n    * eat(5, 6, 10) ->[ 11, 4]\n   * eat(4, 8, 9 ) - > [12,1] \n   * eat (1 , 10, 10) -> [11, 0]\n    * e at (2, 11, 5) -> [7, 0]\n    \n    Variables :\n   @number : int eger\n       the number of carrots that you haveea ten .    @ n eed : integer\n        the numb erof carrots that you need  t o eat.\n    @rema i ning : intege r      the number  of remaining carrots thet exist in stock\n    \n   Constrain:\n    * 0 <= n umber <= 1000\n  * 0 <= need<= 1000\n    * 0 <= remain ing<= 1000\n\n   Have fun :)\n \"\"\"\n    if number + need > remaining:\n        return [number + need, 0]\n    else:\n        return [number + need, remaining - (number + need)]\n\n"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n    the second list is a  list  of int e gers. U se the tw o given lists to build the a lge bric \n    expr ession and re turn the evaluation of thi s expression.\n\n    Theb asic a lgebra oper ations: \n    Addi tion (+ ) \n    Subtraction( - ) \n    Multiplicati on ( * ) \n    Floor divisio n ( // )\n Exponentiation ( ** ) \n\n   Example:\n   ope rator['+','*' , '-']\n    array = [2, 3, 4, 5]\n  result = 2 + 3 * 4- 5 \n   =>re su lt= 9\n\n  Note:\n        The length ofop erator list is equal to the length of o per and list minus o ne.\n       Operand is a list of of non-negativein teg ers.\n      Operator list has at leas t one operator, and operand  l ist has at least two operands. \n   \"\"\"\n    if len(operator) != len(operand) - 1:\n        return \"Invalid input\"\n    if len(operand) < 2:\n        return \"Invalid input\"\n    if len(operator) < 1:\n        return \"Invalid input\"\n    if len(operand) == 2:\n        return operand[0]\n    if len(operand) == 3:\n        return operand[0] + operand[1]\n    if len(operand) == 4:\n        return operand[0] + operand[1] + operand[2]\n    if len(operand) == 5:\n        return operand[0] + operand[1] + operand[2] + operand[3]\n    if len(operand) == 6:\n        return operand[0] + operand[1] + operand[2] + operand[3] + operand[4]\n    if len(operand) == 7:\n        return operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5]\n    if len(operand) == 8:\n        return operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5] + operand[6]\n    if len(operand) == 9:\n        return operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5] + operand[6] + operand[7]\n    if len(operand) == 10:\n        return operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5] + operand[6] + operand[7] + operand[8]\n    if len(operand) == 11:\n        return operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5] + operand[6] + operand[7] + operand[8] + operand[9]\n    if len(operand) == 12:\n        return operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5] + operand[6] + operand[7] + operand[8] + operand[9] + operand[10]\n    if len(operand) == 13:\n        return operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5] + operand[6] + operand[7] + operand[8] + operand[9] + operand[10] + operand[11]\n    if len(operand) == 14:\n        return operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5] + operand[6] + operand[7] + operand[8] + operand[9] + operand["}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i]  is a  letter, reverse its case from lower to upper or vise versa, \n    otherw ise k eep ita s it is .\n    Ifthe stringcontains no lette rs,  reverse the s tring.\n    Th e function shouldreturn t heresultedstring.\n  Exampl es\n    solv e(\"1234 \") = \"432 1\"   solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c \"\n    \"\"\"\n    s = s[::-1]\n    s = s.swapcase()\n    return s\n\n"}
{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md 5 has h equivalent string.\n    If 'text'is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b,  retu rn the evendigits between a\n    and b, in ascending order.\n\n    For exa mple: \n    ge n erate_i ntegers(2 , 8) => [2, 4, 6, 8]\n    gen era te_integers(8,  2) => [2, 4,  6, 8]\n    generate_intege rs(10, 14) => []\n    \"\" \"\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
