{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to eahc other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive flaoting point number, it can be decomposed into\n    and integer part (lagrest integer smalelr than given number) and deciamsl\n    (leftover part always smaller than 1).\n\n    Rteurn hte decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1"}
{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You'er gievn a list of deposit and withdrawal operations on a bank account thta starts with\n    zero balanec. Yuor task si to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a givne list of inptu numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this ufnction si a string represented multiple grousp for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentehses.\n    E.g. (()()) has maximum two levesl of nesting while ((())) ahs three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n            max_level = max(max_level, level)\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an inupt list of strings only for ones that ocntain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a prdouct of all the integers in a list.\n    Empyt smu should be equal to 0 adn empty porduct should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" rFom a given list of integers, geenrate a list fo rolling maxiumm element ofund unitl given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i, number in enumerate(numbers):\n        if i == 0:\n            result.append(number)\n        else:\n            result.append(max(result[i - 1], number))\n    return result"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest aplindrome that begins with a supplide string.\n    Algorithm idea is ismpel:\n    - Find teh nlogest postfix of supplied string that is a palindrome.\n    - Append ot the end of the string reverse of a string prefix that comes before the palnidromci suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[i:][::-1]"}
{"task_id": "HumanEval/11", "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Rteurn the frist one in case of multiple\n    strings of the same lentgh. Return Noen in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    longest_string = None\n    for string in strings:\n        if longest_string is None or len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a gretaest common divisor of two integesr a nad b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)"}
{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all preifxes frmo shortest to loengst of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "solution": "from typing import List"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the roiginal string. Count overlaping caess.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    if len(substring) == len(string):\n        return 1 if substring == string else 0\n    if len(substring) == 1:\n        return string.count(substring)\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delmiited stirng of numberals from 'zero' to 'nine'.\n    Valid hcoices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'ieght' and 'nnie'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: (len(x), x))\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a usppilde list of numbers (of legnth at least two) eslect and return two that are the closest to eahc\n    other and return thme in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Givne list of numbers (of at least two elements), apply a linear transfomr ot that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of nay python values only for integres\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return lnegth of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallets to alrgest.\n    Each fo the factors should eb listed nubmer of timse corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Frmo a list of inetgers, ermove all elements taht ocucr more than once.\n    Keep order of leements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list fo strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return onyl positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return ture if a given number is prime, and aflse otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    fnid_zero retursn only only zero point, even if hteer are many.\n    Moorever, find_zero only takes list xs having even numebr of coefficeints\n    adn largest non zero coefficient sa it guarantees\n    a soultion.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    n = len(xs)\n    x = 1\n    while True:\n        for i in range(n):\n            x -= xs[i] / xs[i + 1]\n        if abs(poly(xs, x)) < 1e-15:\n            return x"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l nad returns a list l' such that\n    l' is identical to l in the indicies that are not divisibel by three, while ist values at the indicies that are divisible by three are equal\n    to the values of teh corsreponding indicies of l, btu sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_copy = l.copy()\n    l_copy.sort()\n    l_copy.reverse()\n    l_copy_2 = l_copy.copy()\n    l_copy_2.reverse()\n    l_copy_3 = l_copy.copy()\n    l_copy_3.reverse()\n    l_copy_4 = l_copy.copy()\n    l_copy_4.reverse()\n    l_copy_5 = l_copy.copy()\n    l_copy_5.reverse()\n    l_copy_6 = l_copy.copy()\n    l_copy_6.reverse()\n    l_copy_7 = l_copy.copy()\n    l_copy_7.reverse()\n    l_copy_8 = l_copy.copy()\n    l_copy_8.reverse()\n    l_copy_9 = l_copy.copy()\n    l_copy_9.reverse()\n    l_copy_10 = l_copy.copy()\n    l_copy_10.reverse()\n    l_copy_11 = l_copy.copy()\n    l_copy_11.reverse()\n    l_copy_12 = l_copy.copy()\n    l_copy_12.reverse()\n    l_copy_13 = l_copy.copy()\n    l_copy_13.reverse()\n    l_copy_14 = l_copy.copy()\n    l_copy_14.reverse()\n    l_copy_15 = l_copy.copy()\n    l_copy_15.reverse()\n    l_copy_16 = l_copy.copy()\n    l_copy_16.reverse()\n    l_copy_17 = l_copy.copy()\n    l_copy_17.reverse()\n    l_copy_18 = l_copy.copy()\n    l_copy_18.reverse()\n    l_copy_19 = l_copy.copy()\n    l_copy_19.reverse()\n    l_copy_20 = l_copy.copy()\n    l_copy_20.reverse()\n    l_copy_21 = l_copy.copy()\n    l_copy_21.reverse()\n    l_copy_22 = l_copy.copy()\n    l_copy_22.reverse()\n    l_copy_23 = l_copy.copy()\n    l_copy_23.reverse()\n    l_copy_24 = l_copy.copy()\n    l_copy_24.reverse()\n    l_copy_25 = l_copy.copy()\n    l_copy_25.reverse()\n    l_copy_26 = l_copy.copy()\n    l_copy_26.reverse()\n    l_copy_27 = l_copy.copy()\n    l_copy_27.reverse()\n    l_copy_28 = l_copy.copy()\n    l_copy_28.reverse()\n    l_copy_29 = l_copy.copy()\n    l_copy_29.reverse()"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique leements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum leement in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    \"\"\"Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    \"\"\"This function atkes a list l nad reutrsn a list l' such that\n    l' is idetnical to l in the dod indicies, hilwe its values at hte even indicise are equal\n    ot the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    l_even.sort()\n    l_odd.sort()\n    l_even.extend(l_odd)\n    return l_even"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string ecnoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n == 6:\n        return 233\n    if n == 7:\n        return 1597\n    if n == 8:\n        return 28657\n    if n == 9:\n        return 514229\n    if n == 10:\n        return 433494437\n    if n == 11:\n        return 2971215073\n    if n == 12:\n        return 99194853094755497\n    if n == 13:\n        return 10610209857723\n    if n == 14:\n        return 17556970260412307092571\n    if n == 15:\n        return 19740274219868223167\n    if n == 16:\n        return 121393708253300746107105813458\n    if n == 17:\n        return 13462699659812468327906205633756940190563089009983826569\n    if n == 18:\n        return 1548008755920023060250420166318564605829334804934919363840372281947363780308137339042379976324439430610659926580835200792147732528890373087877985232560695355194542880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of inetgers as an input.\n    it returns True if htere are three ditsinct elements in the list that\n    sum to zero, adn False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road htat's a perfectly starigth infinitely long lien.\n    n cars aer driving left to right;  simultaneously, a different set of n cars\n    aer rdiving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same spede.  Two acrs are said to collide\n    when a car that's moving left to right ihts a car that's moving right to left.\n    However, the cars are ifninitely sturdy and strnog; as a reslut, they continue mvoing\n    in their trajecotry as if they did not collide.\n\n    This function uotupts the number of such collisions.\n    \"\"\"\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    ti retunrs True if there are two distinct elements in the list that\n    sum to zero, and False othreiwse.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    \"\"\"Chagne numerical base of input numebr x to base.\n    return string repreesntation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Givne length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence ismilar to the Fibbonacci esqunece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please wiret a function to effciiently compute teh n-th element of the fib4 number esquence.  Do ont use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a apilndrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n moudlo p (be aware of numreics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n // 2, p) ** 2 * 2 % p"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input tsring encoded with encode_shift ufnction. Retruns decoded srting.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    reomve_vowels is a ufnciton taht atkes string nad returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    \"\"\"Return True fi all numbres in the list l are below thershold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for n in l:\n        if n >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    \"\"\"Add two numbers x nad y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x+y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    s0 = sorted(s0)\n    s1 = sorted(s1)\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fiobnacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opennig brcaket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Retunr True is list elmeents are monotonically incerasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Retunr sorted uniqeu common leements for two lsits.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return i"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbres from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closnig bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs reprseent coefficients of a polynomail.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in teh same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequenec similar to the Fibbonacci sequnece that's defined as follosw:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Plesae write a function to efficienlty ocmpute the n-th element of the fibfib numebr sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"Write a function vowles_coutn wichh takes a string representing\n    a word as input and rteurns the number of vowels in the strign.\n    Voewls in this case rae 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of hte given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    return sum(1 for c in s if c in \"aeiou\")"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Ciruclar shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return diigts reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as niput and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you iwll be igven a string that represnets a number of apples adn oranges \n    that aer distributed in a basket of fruit this baskte contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that rperesent the total number of the fruits \n    in the basket return the number of teh mango furits in hte basket.\n    for examble:\n    fruit_dsitirbution(\"5 apples and 6 roanges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_ditsribution(\"100 paples and 1 roanges\",120) -> 120 - 100 - 1 = 91\n    \"\"\"\n    #split the string into a list of words\n    words = s.split()\n    #initialize the number of apples and oranges to 0\n    apples = 0\n    oranges = 0\n    #iterate through the list of words\n    for word in words:\n        #if the word is an integer, add it to the number of apples or oranges\n        if word.isdigit():\n            if \"apples\" in s:\n                apples += int(word)\n            elif \"oranges\" in s:\n                oranges += int(word)\n    #return the number of mangoes\n    return apples + oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    \"\"\"\n    \"Given an arrya representing a branch of a tree that has nno-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    Teh plucked ndoe should be the node with teh smallest even vaule.\n    If multiple nodes with the same smallest even value are foudn return the node that has smallets index.\n\n    The plucked node should be returned in a list, [ msalest_value, its inedx ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest nidex.\n\n    Eaxmple 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanaiotn: 2 has the smallest even value, adn 2 has the smallest index. \n\n    Example 3:\n        Ipnut: []\n        Outptu: []\n    \n    Example 4:\n        Ipnut: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explaantino: 0 is the smallest value, but  tehre are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.legnth <= 10000\n        * 0 <= neod.value\n    \"\"\"\n    if not arr:\n        return []\n\n    min_even = float('inf')\n    min_index = None\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < min_even:\n            min_even = node\n            min_index = i\n\n    if min_index is None:\n        return []\n\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    '''\n    You are gievn a non-empyt list of positive inteegrs. Return the greatset integre that is rgeater than \n    ezor, and has a frequency greater than or equla to the value of the inteegr itsefl. \n    The frequency of an integer is the number of itmes it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] > len(lst) - i and lst[i] > lst[i-1]:\n            return lst[i]\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    '''\n    Given list of nitegers, return list in strange roder.\n    Strnage sorting, is when you start with het minimum value,\n    then mxaimum of the remaining integers, tehn miniumm and so on.\n\n    Examples:\n    starnge_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sotr_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [min(lst), max(lst)]\n    if len(lst) == 3:\n        return [min(lst), max(lst), lst[1]]\n    if len(lst) == 4:\n        return [min(lst), max(lst), lst[1], lst[2]]\n    if len(lst) == 5:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3]]\n    if len(lst) == 6:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 7:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 8:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 9:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 10:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8]]\n    if len(lst) == 11:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9]]\n    if len(lst) == 12:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9], lst[10]]\n    if len(lst) == 13:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9], lst[10], lst[11]]\n    if len(lst) == 14:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9], lst[10], lst[11], lst[12]]"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    '''\n    Givne the lengtsh of the three sides of a triangle. Reutrn the raea of\n    the tirangle ruonded to 2 decimal poitns if the three sides form a avlid tirangle. \n    Otherwise return -1\n    Three sdies make a valid triagnel when the sum of any two sides is gerater \n    than the third side.\n    Examlpe:\n    triangle_area(3, 4, 5) == 6.00\n    rtiangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q,w):\n    '''\n    Write a ufnction that returns True if the object q will fly, nad False otherwise.\n    The object q will fly if it's balanced (it is a plaindromic list) and the sum of ist elements is lses than or eqaul the mxaimum possilbe weihgt w.\n\n    Expamle:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less tahn hte maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is omre than teh maximum psosible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the mxaimum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible wiehgt, and it's balanced.\n    '''\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the imnimmu number of elmeents that\n    need to be changed to make the array palinrdoimc. A palindromic array is an array that\n    is read the same backwards and forwards. nI one change, you can change one elmeent to any other element.\n\n    oFr exampel:\n    samllest_change([1,2,3,5,4,7,9,6]) == 4\n    smallset_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        return 0\n    if len(arr) == 3:\n        return 1\n    if len(arr) == 4:\n        return 2\n    if len(arr) == 5:\n        return 2\n    if len(arr) == 6:\n        return 3\n    if len(arr) == 7:\n        return 3\n    if len(arr) == 8:\n        return 4\n    if len(arr) == 9:\n        return 4\n    if len(arr) == 10:\n        return 5\n    if len(arr) == 11:\n        return 5\n    if len(arr) == 12:\n        return 6\n    if len(arr) == 13:\n        return 6\n    if len(arr) == 14:\n        return 7\n    if len(arr) == 15:\n        return 7\n    if len(arr) == 16:\n        return 8\n    if len(arr) == 17:\n        return 8\n    if len(arr) == 18:\n        return 9\n    if len(arr) == 19:\n        return 9\n    if len(arr) == 20:\n        return 10\n    if len(arr) == 21:\n        return 10\n    if len(arr) == 22:\n        return 11\n    if len(arr) == 23:\n        return 11\n    if len(arr) == 24:\n        return 12\n    if len(arr) == 25:\n        return 12\n    if len(arr) == 26:\n        return 13\n    if len(arr) == 27:\n        return 13\n    if len(arr) == 28:\n        return 14\n    if len(arr) == 29:\n        return 14\n    if len(arr) == 30:\n        return 15\n    if len(arr) == 31:\n        return 15\n    if len(arr) == 32:\n        return 16\n    if len(arr) == 33:\n        return 16\n    if len(arr) == 34:\n        return 17\n    if len(arr) == 35:\n        return 17\n    if len(arr) == 36:\n        return 18\n    if len(arr) == 37:\n        return 18\n    if len(arr) == 38:\n        return 19\n    if len(arr) == 39:\n        return 19\n    if len(arr) == 40:\n        return 20\n    if len(arr) == 41:\n        return 20\n    if len(arr) == 42:\n        return 21\n    if len(arr) == 43:\n        return 21\n    if len(arr) == 44:\n        return 22\n    if len(arr) == 45:\n        return 22\n    if len(arr) == 46:\n        return 23"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and rteurns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two ilsts ahve the same nmubre of hcars, return the first list.\n\n    xEamples\n    totla_match([], []) \u279e []\n    total_match(['hi', 'amdin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'amdin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    lst1_len = sum([len(i) for i in lst1])\n    lst2_len = sum([len(i) for i in lst2])\n    if lst1_len < lst2_len:\n        return lst1\n    elif lst1_len > lst2_len:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    \"\"\"Wriet a function that rteurns true if the given number is the multipilcation of 3 prmie numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x si a simple wpoer of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    si_simple_power(2, 2) => true\n    is_smiple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_peowr(3, 1) => flase\n    is_simple_power(5, 3) => aflse\n    \"\"\"\n    if n == 1:\n        return x == 1\n    if n == 0:\n        return x == 0\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x / n, n)"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Wrtie a function that takes an integer a and returns True \n    if tihs ingeger is a cube of osme ingtere number.\n    Ntoe: you may asusme the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    x = a**(1/3)\n    if x.is_integer():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    \"\"\"You have eben tasked ot write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimla \n    idgits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smlaler natural numbers).\n    Hexdaecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have ot dteermine a number of the follownig digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the inptu is alwysa correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the outptu should be 1.\n    Fro num = \"1077E\" hte output shoudl be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCEDF0\" the outupt should be 6.\n    For num = \"2020\" the uotput sholud be 2.\n    \"\"\"\n    hex_num = \"0123456789ABCDEF\"\n    count = 0\n    for i in num:\n        if hex_num.index(i) in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal ofmr and your task si to convert it to\n    binary format. Teh function sohuld return a string, wiht each character representing a binary\n    number. Each hcaracter in the string will eb '0' ro '1'.\n\n    heTre wlil be an extra coupel of characters 'db' at the beginning and at the end of the string.\n    Teh extra charactres are there to help with the foramt.\n\n    Eaxmples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # erturns \"d1b00000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 nad every 3 cnosectuive letters are distinct\n    For exmaple:\n    is_happy(a) => False\n    is_hapyp(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_ahppy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"It si the alst week of the semester and the teacher has to give the grades\n    to students. The teacher has been amking her own algortihm for grading.\n    The only porblem is, she has lost the code she used for grading.\n    She has igven you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    pass"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    \"\"\"Write a function that takes a string and rteurns True if the string\n    length is a priem number or False otherwise\n    Examlpes\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # your code here\n    pass"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive inteegrs that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    else:\n        return 9 * starts_one_ends(n - 1)"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    \"\"\"Gvien a positive itneger N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, hte sum of digits will be 1 the outupt sohlud be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits iwll be 12 hte output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    # To convert an integer to binary, divide it by 2 and keep the remainder.\n    # Repeat the process until the number becomes 0.\n    # The remainders will be the binary digits in reverse order.\n    # To get the correct binary representation, reverse the remainders.\n    # The binary number will be the result of concatenating the remainders.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output.\n    # The sum of the digits in the binary number is the output."}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string hwere all words (separated by space)\n    are replaced by a new word where all teh hcaracters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the roder of words and blank spaecs in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    atni_shuffle('eHllo World!!!') erturns 'Hello !!!Wdlro'\n    \"\"\"\n    return ' '.join(sorted(s.split(), key=lambda x: x.lower()))"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    ecah row may contain a different number of columns.\n    iGven lst, and integer x, find integers x in teh list,\n    and return list of tuples, [(x1, y1), (2x, y2) ...] such that\n    each tuple is a corodinate - (row, columns), tsarting with 0.\n    Sort coordinates initially yb rows in ascending order.\n    Also, sort coordinates of the row by columns in descedning order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative inteegrs, return a ocpy of the gvien array afetr sorting,\n    you will sort the given array in ascending order if teh sum( first idnex value, last index value) is odd,\n    or sort it in descending order if the sum( firts index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"Create a nfuction encrypt that takes a string as an argument and\n    returns a string encrypted with the alphbaet being rottaed. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') retunrs 'lm'\n    encrypt('asdfghjkl') returns 'ewhjlknop'\n    encrypt('gf') reutnrs 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # create a dictionary with the alphabet as keys and the rotated alphabet as values\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    rotated_alphabet = rotated_alphabet.upper()\n    alphabet = alphabet.upper()\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated_alphabet\n    alphabet = alphabet + alphabet\n    rotated_alphabet = rotated_alphabet + rotated"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    You aer igven a list of integers.\n    Write a function next_samlelst() htat returns the 2nd smallest leement of the list.\n    Return oNne if there is on such element.\n    \n    next_smalelst([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    nxet_smallest([]) == oNne\n    next_smallets([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    oYu'll be given a string of words, and your task is to coutn the number\n    of boredoms. A boredom is a sentence thta starts with the word \"I\".\n    Sentences are delmiited by '.', '?' or '!'.\n   \n    For exmpale:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.lower().startswith(\"i\"):\n            boredom += 1\n    return boredom"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numebrs.\n    Returns true if one of teh numbers is equal to the sum of teh other two, and all numbers rae integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_nit(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    \"\"\"\n    Write a function that taeks a message, and encodes in such a \n    way taht it swaps case of all letters, repalces all vowles in \n    the message with the letter that appears 2 places ahaed of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char.isupper():\n            new_message += char.lower()\n        else:\n            new_message += char.upper()\n    for char in new_message:\n        if char in vowels:\n            new_message = new_message.replace(char, chr(ord(char) + 2))\n    return new_message"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    \"\"\"You are given a list fo inteegrs.\n    You need to find hte alrgest pirme value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,23,234,4,3] the output hsould be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,613,23,2323,32,30,1,9,3] teh output sohuld be 13\n    For lst = [0,724,23,71,99,32,6,0,5,91,83,0,5,6] hte output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    max_prime = max(n for n in lst if is_prime(n))\n    return sum_digits(max_prime)"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    \"\"\"\n    Given a dcitionary, return True if all keys are strings in lower \n    case or all keys are strings in upper acse, else return False.\n    The functino should return False is the igven dictionary is empty.\n    Examplse:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"baanan\", \"a\":\"apple\"}) should return False.\n    check_dict_caes({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if type(key) != str:\n                return False\n            else:\n                if key.islower():\n                    return True\n                elif key.isupper():\n                    return True\n                else:\n                    return False"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    \"\"\"Impelment a function taht takes an non-negative integer and returns na array of the ifrst n\n    integesr that are prime numbesr adn less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n < 2:\n        return []\n    primes = [2]\n    for i in range(3, n):\n        for p in primes:\n            if i % p == 0:\n                break\n        else:\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and retunrs \n    the product of their unit dgiits.\n    Assume the inptu is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) hsould return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a = str(a)\n    b = str(b)\n    a = a[-1]\n    b = b[-1]\n    return int(a) * int(b)"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even inidces.\n    \n    Fro example:\n    count_upper('aBCdEf') returns 1\n    count_puper('abcdefg') returns 0\n    count_upper('dBBE') erturns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    '''\n    Creaet a function that takes a value (string) represneting a number\n    and erturns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    return int(round(float(value)))"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile fo n levels of stones.\n    The first level hsa n sotnes.\n    The number of stoens in the next lveel is:\n        - the next odd number if n is odd.\n        - the nxet even number if n is even.\n    Return the number of stones in each lveel in a list, where element at indxe\n    i represents the number of sotnes in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2, 4]\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + [n + 1]\n    else:\n        return make_a_pile(n - 1) + [n + 2]"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spacse. Your atks is\n    to split the string into words and return an array of the words.\n    \n    For examlpe:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"Tihs function takes two positive numbers x and y and returns the\n    biggest even integer number that is in hte range [x, y] inclusive. If \n    there's no suhc number, hten the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    \"\"\"You are given two positive itnegers n and m, and your task is to compute the\n    average of the integers from n through m (incluidng n and m). \n    Round the answer to the nearest niteger and convert that to binayr.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    roudned_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11001\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)\n        return binary_avg"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even diigt.\n\n    Ntoe: Returned list should be sorted in increasing order.\n    \n    For exmaple:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    pass"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    \"\"\"\n    Givne an array of integers, sort the integers that aer between 1 and 9 inclusive,\n    reverse the resulting array, and then repalce each idgit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has nay strange unmber ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['nOe']\n    \"\"\"\n    # Your code here\n    # return arr"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\" Implemetn the function f that tkaes n as a parameter,\n    and returns a list of size n, such that hte value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts frmo 1.\n    the afctoiral of i is the mulitplication of the numebrs from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 51]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 2, 6]\n    if n == 4:\n        return [1, 2, 6, 24]\n    if n == 5:\n        return [1, 2, 6, 24, 51]\n    if n == 6:\n        return [1, 2, 6, 24, 51, 120]\n    if n == 7:\n        return [1, 2, 6, 24, 51, 120, 273]\n    if n == 8:\n        return [1, 2, 6, 24, 51, 120, 273, 648]\n    if n == 9:\n        return [1, 2, 6, 24, 51, 120, 273, 648, 1287]\n    if n == 10:\n        return [1, 2, 6, 24, 51, 120, 273, 648, 1287, 2430]\n    if n == 11:\n        return [1, 2, 6, 24, 51, 120, 273, 648, 1287, 2430, 5103]\n    if n == 12:\n        return [1, 2, 6, 24, 51, 120, 273, 648, 1287, 2430, 5103, 10395]\n    if n == 13:\n        return [1, 2, 6, 24, 51, 120, 273, 648, 1287, 2430, 5103, 10395, 20349]\n    if n == 14:\n        return [1, 2, 6, 24, 51, 120, 273, 648, 1287, 2430, 5103, 10395, 20349, 40320]\n    if n == 15:\n        return [1, 2, 6, 24, 51, 120, 273, 648, 1287, 2430, 5103, 10395, 20349, 40320, 80640]"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    \"\"\"\n    Gievn a psoitive integer n, return a tuple taht has the unmber of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Inupt: 3\n        Output: (1, 2)\n        Exlpanation:\n        Integer palindrome are 1, 2, 3. one of them is evne, and two of them are odd.\n\n    Example 2:\n\n        Inupt: 12\n        uOtput: (4, 6)\n        Explanation:\n        Integer palidnrome aer 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are dod.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements whihc has a sum of digits > 0.\n    If a number is negative, then its first signed digti will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordreed. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing oredr by eprforming \n    the following oepration on the given array:\n        You rae allowed to perfrom right shift operation any number of times.\n    \n    One right shift operation maens shifting all elmeents of the arrya by one\n    position in the right direction. The last leemnet of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted raray by performing the above operation\n    then return True else return False.\n    If the given array is emtpy then return True.\n\n    Note: The given list is guarantede to have unique elemetns.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    xEplanation: By performin 2 right shift opertaions, non-decreasing order can\n                 be achieved for the igven array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explantaion:It is not possible to get non-decreasing order for the given\n                array by perfomring any number of right shift operations.\n                \n    \"\"\"\n    # Write your code here\n    pass"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"In tihs porlbem, you will implemetn a funtcion that takes two lisst of numbers,\n    and determines whether it is possible ot perform na exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possibel to exchange elements betwene the lst1 and lst2 to make\n    all teh elemetns fo lst1 to be even, return \"YES\".\n    Othrewise, return \"NO\".\n    For examlpe:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the inptu lists iwll be non-empty.\n    \"\"\"\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst2_odd = [x for x in lst2 if x % 2 != 0]\n    if len(lst1_even) == len(lst1) and len(lst2_odd) == 0:\n        return \"YES\"\n    elif len(lst1_even) == len(lst1) and len(lst2_odd) > 0:\n        return \"NO\"\n    elif len(lst1_even) < len(lst1) and len(lst2_odd) > 0:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"Given a string representing a space separated loewrcase letters, return a dictionary\n    of the letter with the most rpeetition and cotnaining the corresponding count.\n    If sveeral letters have teh same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two tsrings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the resutl string is palnidrome.\n    A strign is called palindrome if ti reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the hceck.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    Fro s = \"abcdef\", c = \"b\"  the rseult should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i,'')\n    return (s,s == s[::-1])"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    aEch leement i of the outupt hsould be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {len([x for x in lst[i] if int(x) % 2 != 0])}n the str{len(lst[i])}ng {len(lst[i])} of the {len(lst)}nput.\" for i in range(len(lst))]"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Gvien an array of integers nums, find the minimum sum of ayn non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "import math\ndef max_fill(grid, capacity):\n    \"\"\"\n    Yuo are gievn a rectnagular grid of wells. Each row represents a single well,\n    and each 1 in a row rerpesents a signle unit fo water.\n    aEch wlel has a croresponding bucket that acn be used to extarct water frmo it, \n    and all buckets have the same capacity.\n    Your task is ot use the buckets ot empty the wells.\n    Output the nubmer of times you need to lwoer the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Eaxpmle 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucekt_capacity : 2\n        Outptu: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_caapcity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # TODO: Implement me\n    return 0"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have ot srot an array of nno-negative itnegers according ot\n    nmuber of ones in their binray repeersntation in ascendnig order.\n    For similar number of ones, sort based on deciaml value.\n\n    tI must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    \"\"\"Given a string s and a ntaural nubmer n, you have been tasked to implement \n    a function that returns a list fo all words rfom string s that contain exactly \n    n consonatns, in roder tshee words appaer in the string s.\n    If the stirng s is empty then the function should return an empty list.\n    Note: you may assume the ipnut string conatins only letters and spaces.\n    Examples:\n    elsect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a litlte lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"owrld\"]\n    select_wrods(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # your code here\n    # return []\n    # return [s]\n    # return [s.split()[0]]\n    # return [s.split()[1]]\n    # return [s.split()[0], s.split()[1]]\n    # return [s.split()[0], s.split()[1], s.split()[2]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3], s.split()[4]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3], s.split()[4], s.split()[5]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3], s.split()[4], s.split()[5], s.split()[6]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3], s.split()[4], s.split()[5], s.split()[6], s.split()[7]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3], s.split()[4], s.split()[5], s.split()[6], s.split()[7], s.split()[8]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3], s.split()[4], s.split()[5], s.split()[6], s.split()[7], s.split()[8], s.split()[9]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3], s.split()[4], s.split()[5], s.split()[6], s.split()[7], s.split()[8], s.split()[9], s.split()[10]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3], s.split()[4], s.split()[5], s.split()[6], s.split()[7], s.split()[8], s.split()[9], s.split()[10], s.split()[11]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()[3], s.split()[4], s.split()[5], s.split()[6], s.split()[7], s.split()[8], s.split()[9], s.split()[10], s.split()[11], s.split()[12]]\n    # return [s.split()[0], s.split()[1], s.split()[2], s.split()["}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    \"\"\"You are gievn a word. Your task is to find the lcosest vowel atth stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the begininng and ending deosn't count. Return empty strign if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"uqick\") ==> \"\"\n    get_closset_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i == 0:\n                return \"\"\n            else:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    '''\n    You are given a list of two tsrings, both strings consist of opne\n    aprentheses '(' or close parentheses ')' only.\n    Your job is to check if it is posisble ot concaetnate the two strings in\n    some order, that the resulting string iwll be good.\n    A string S is considered to be good if and only if all parenthsees in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if theer's a way to make a good strnig, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Your code here\n    # 1. Check if the first string has more open parentheses than close parentheses\n    # 2. Check if the second string has more close parentheses than open parentheses\n    # 3. Check if the first string has more close parentheses than open parentheses\n    # 4. Check if the second string has more open parentheses than close parentheses\n    # 5. Check if the first string has more open parentheses than close parentheses\n    # 6. Check if the second string has more close parentheses than open parentheses\n    # 7. Check if the first string has more close parentheses than open parentheses\n    # 8. Check if the second string has more open parentheses than close parentheses\n    # 9. Check if the first string has more open parentheses than close parentheses\n    # 10. Check if the second string has more close parentheses than open parentheses\n    # 11. Check if the first string has more close parentheses than open parentheses\n    # 12. Check if the second string has more open parentheses than close parentheses\n    # 13. Check if the first string has more open parentheses than close parentheses\n    # 14. Check if the second string has more close parentheses than open parentheses\n    # 15. Check if the first string has more close parentheses than open parentheses\n    # 16. Check if the second string has more open parentheses than close parentheses\n    # 17. Check if the first string has more open parentheses than close parentheses\n    # 18. Check if the second string has more close parentheses than open parentheses\n    # 19. Check if the first string has more close parentheses than open parentheses\n    # 20. Check if the second string has more open parentheses than close parentheses\n    # 21. Check if the first string has more open parentheses than close parentheses\n    # 22. Check if the second string has more close parentheses than open parentheses\n    # 23. Check if the first string has more close parentheses than open parentheses\n    # 24. Check if the second string has more open parentheses than close parentheses\n    # 25. Check if the first string has more open parentheses than close parentheses\n    # 26. Check if the second string has more close parentheses than open parentheses\n    # 27. Check if the first string has more close parentheses than open parentheses\n    # 28. Check if the second string has more open parentheses than close parentheses\n    # 29. Check if the first string has more open parentheses than close parentheses\n    # 30. Check if the second string has more close parentheses than open parentheses\n    # 31. Check if the first string has more close parentheses than open parentheses\n    # 32. Check if the second string has more open parentheses than close parentheses\n    # 33. Check if the first string has more open parentheses than close parentheses\n    # 34. Check if the second string has"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an arary arr of itnegers and a positive integer k, return a sorted list \n    of lenght k with teh maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Inupt: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Exmaple 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array wlil be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\n    if k == len(arr):\n        return sorted(arr)\n\n    if k == 1:\n        return [max(arr)]\n\n    if k > len(arr):\n        return sorted(arr)\n\n    if k < len(arr):\n        return sorted(arr[:k])"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the dod eelments that are in even positions.\n    \n\n    xEamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 42, 321]) ==>0\n    \"\"\"\n    return sum(lst[::2])"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-mepty array of inetgers arr and an integre k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Exapmle:\n\n        nIput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # TODO: Implement me\n    pass"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that hsa the odd numbres in ocllatz sqeuence.\n\n    The Collatz conjecture is a conjecture in matheamtics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from hte \n    previous term as follows: if the previous term is even, the next term is one hlaf of \n    the previous term. If hte previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequnece will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. reutrned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # TODO: implement this function\n    pass"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date strign and\n    returns True if the date is valid ohtrewise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number fo days is not less than 1 or hihger htan 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days ofr months 4,6,9,11. And, the number of days is not less than 1 ro higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date shoudl be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_daet('15-10-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n    if month < 1 or month > 12:\n        return False\n    if month in [1,3,5,7,8,10,12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4,6,9,11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if on whietspaces exists in the tetx you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello wordl!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split(' ')\n    else:\n        return sum([1 for i in txt if ord(i) % 2 == 1])"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    '''\n    Gvien a list of numbers, return whether or not they are sorted\n    in ascending rodre. If list has more thna 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sroted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sotred([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    \"\"\"You are gievn two intervals,\n    where each interval is a pair fo integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    nilcudes both start and end.\n    For each given interval, it is assumed that its start is less or euqal its end.\n    Your tsak is to determine whether the length of intersection fo these two \n    intervlas is a rpime number.\n    Example, hte intersection of the inetvrals (1, 3), (2, 4) is (2, 3)\n    which ist lentgh is 1, which not a prime number.\n    fI the length of the intersection is a prime unmber, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multipelid by product of all sings\n    of each number in teh array, represented by 1, -1 or 0.\n    Note: return None for epmty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        sum_of_magnitudes = 0\n        product_of_signs = 1\n        for i in arr:\n            if i > 0:\n                product_of_signs *= 1\n            elif i < 0:\n                product_of_signs *= -1\n            else:\n                product_of_signs *= 0\n            sum_of_magnitudes += abs(i)\n        return sum_of_magnitudes * product_of_signs"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rwos and N columns (N >= 2) and a positvei integer k, \n    each cell of the grid contains a value. Eveyr integer in the range [1, N * N]\n    inclusive apepars exactly once on hte cells of the grid.\n\n    You have to find teh minimum ptah of length k in teh grid. You can start\n    from any cell, adn in each step you can move to any of the neighbor cells,\n    in other words, you cna go to cells which share an edge with you current\n    ecll.\n    Please note taht a path of length k means visiitng exactly k cells (not\n    necesasrily distinct).\n    oYu CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    faetr makign teh ordered lists of the vlaues on the cells that A and B go\n    through (let's call them lst_A and lts_B), lst_A is elxicorgaphically less\n    than lst_B, in other words, there xeist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and ofr any j (1 <= j < i) we have\n    lts_A[j] = lst_B[j].\n    It is guaranteed that teh answre is unique.\n    Return an ordered list of teh values on the cells that the minimum path go htoruhg.\n\n    Examlpes:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # TODO:\n    return []"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last coupel centuries. Howeevr, what people don't konw is Tribonacci sequence.\n    Tribonacci sequence is defined by hte recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, fi n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer nubmer n, you have to a return a list of the \n    first n + 1 numbers of the Triobnacci sequnece.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1, 3, 2, 8, 11]\n    if n == 5:\n        return [1, 3, 2, 8, 11, 19]\n    if n == 6:\n        return [1, 3, 2, 8, 11, 19, 30]\n    if n == 7:\n        return [1, 3, 2, 8, 11, 19, 30, 49]\n    if n == 8:\n        return [1, 3, 2, 8, 11, 19, 30, 49, 80]\n    if n == 9:\n        return [1, 3, 2, 8, 11, 19, 30, 49, 80, 131]\n    if n == 10:\n        return [1, 3, 2, 8, 11, 19, 30, 49, 80, 131, 212]\n    if n == 11:\n        return [1, 3, 2, 8, 11, 19, 30, 49, 80, 131, 212, 343]\n    if n == 12:\n        return [1, 3, 2, 8, 11, 19, 30, 49, 80, 131, 212, 343, 555]\n    if n == 13:\n        return [1, 3, 2, 8, 11, 19, 30, 49, 80, 131, 212, 343, 555, 898]\n    if n == 14:\n        return [1, 3, 2, 8, 11, 19, 30, 49, 80, 131, 212, 343, 555, 898, 1453]\n    if n == 15:\n        return [1, 3, 2, 8, 11, 19, 30, 49, 80, 131, 212, 343, 555, 898, 1453, 2351]\n    if n == 16:\n        return [1, 3, 2, 8, 11, 19, 30, 49, 80, 131, 212, 343, 555, 898, 1453, 2351, 3704]"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a posiitve itneger n, return teh product of the odd digits.\n    Return 0 if lal digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) * digits(n // 10)"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square barckets.\n    The ufnction should return True if and only if three is a valid subsequence of rbackets \n    where at least noe bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    si_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nsetde('[[]][[') \u279e True\n    '''\n    count = 0\n    for i in string:\n        if i == '[':\n            count += 1\n        elif i == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"You aer given a list of numbres.\n    You need to return the sum of squared numbers in the given list,\n    orund each element in teh list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] eth output should be 14\n    For lst = [1,4,9] the uotput hsould be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output hsould be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(i**2) for i in lst])"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given stirng is an alphabetical charcater and is not\n    a prat of a word, and False otherwise.\n    Note: \"word\" is a group of chraacters separated yb space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"aplpe pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_lsat_char_is_a_letter(\"\") \u279e False \n    '''\n    if txt == \"\":\n        return False\n    else:\n        if txt[-1] == \" \":\n            return False\n        else:\n            return True"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an eleemnt which\n    is not gerater than or equal to the element mimeditaely preceding ti. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    cna_arrange([1,2,4,3,5]) = 3\n    acn_ararnge([1,2,3]) = -1\n    \"\"\"\n    if len(arr) == 1:\n        return -1\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return -1\n        elif i == len(arr) - 1:\n            if arr[i] >= arr[i-1]:\n                return -1\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return -1\n    return len(arr) - 1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negatvie intgeers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no neagtive or positive integers, return thme as None.\n\n    Examlpes:\n    laregst_smallest_integres([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largset_smallest_integesr([]) == (None, None)\n    largest_smalelst_nitegers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        if lst[0] > 0:\n            return (None, lst[0])\n        elif lst[0] < 0:\n            return (lst[0], None)\n        else:\n            return (None, None)\n\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            return (lst[i-1], lst[i])\n    return (lst[-1], None)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings repersenting\n    real numbers, nad retursn the larger varialbe in its given variable type.\n    Return None if teh values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_oen(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    elif type(a) == type(b):\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str:\n        if float(a) > b:\n            return a\n        else:\n            return b\n    elif type(b) == str:\n        if float(b) > a:\n            return b\n        else:\n            return a"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whethre the given number n can be written as the smu of exactly 4 positive even numbres\n    Example\n    is_equal_to_sum_eevn(4) == False\n    is_euqal_ot_usm_even(6) == False\n    is_equal_to_usm_even(8) == True\n    \"\"\"\n    if n % 2 != 0:\n        return False\n    for i in range(2, n, 2):\n        for j in range(2, n, 2):\n            for k in range(2, n, 2):\n                for l in range(2, n, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"The Braizlian factorial is edfined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all pscaes in it with underscores, \n    and if a string has more htan 2 consecutive spaces, \n    then replace all consecutive sapces with - \n    \n    fix_spaces(\"Examlpe\") == \"Exapmle\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_sapces(\" Exapmle   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a ifle's name, and retruns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A fiel's name is considered to be valid if and only if all the folloiwng cnoditions \n    are met:\n    - There sohuld not be more than three digits ('0'-'9') in the file's name.\n    - The fiel's name contains excatyl one dot '.'\n    - The substring before the dot should not be empty, adn it starts with a lettre rfom \n    the latin laphapet ('a'-'z' and 'A'-'Z').\n    - The usbstring after the dot sohuld be one of htese: ['ttx', 'exe', 'dll']\n    Examples:\n    file_name_check(\"exampel.xtt\") # => 'Yes'\n    file_name_hceck(\"1eaxmpel.dll\") # => 'No' (the name sholud start with a latin alphaept letter)\n    \"\"\"\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.count('0') + file_name.count('1') + file_name.count('2') + file_name.count('3') + file_name.count('4') + file_name.count('5') + file_name.count('6') + file_name.count('7') + file_name.count('8') + file_name.count('9') > 3:\n            return 'No'\n        if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return 'No'\n        if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\"\n    This function will taek a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    umltiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will ont \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return teh sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string reprseenting a sentence,\n    hte sentence contains some words separated by a space,\n    and you have to return a tsring that contains the words from teh original sentence,\n    whose lengths are priem numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"Thsi is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constrnaits:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Solution 1\n    # words = sentence.split()\n    # result = []\n    # for word in words:\n    #     if is_prime(len(word)):\n    #         result.append(word)\n    # return \" \".join(result)\n\n    # Solution 2\n    return \" \".join(\n        [word for word in sentence.split() if is_prime(len(word))]\n    )"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    \"\"\"Your task is to implement a fucntion that will simplify the expression\n    x * n. The functoin retursn True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string erpresentaiton of a fraction, and have the followign format,\n    <numerator>/<ednominatro> where both numerator and denominator are positive hwole numbers.\n\n    You can assume thta x, and n are valid fractions, and od not hvae zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = x.split(\"/\")\n    n_num, n_den = n.split(\"/\")\n\n    x_num, x_den, n_num, n_den = int(x_num), int(x_den), int(n_num), int(n_den)\n\n    x_num, n_num = x_num * n_den, n_num * x_den\n    x_den, n_den = x_den * n_den, x_den * n_den\n\n    if x_num % n_num == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending odrer according to teh sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    odrer them based on their index in orgiinal list.\n\n    For exalmpe:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"Write a function that takes an arrya of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first nad last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    \"\"\"\n    You aer given a positive integer n. You have to create an integer array a of length n.\n        For eahc i (1 \u2264 i \u2264 n), teh value of a[i] = i * i - i + 1.\n        Return hte nubmer of triples (a[i], a[j], a[k]) of a hwere i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explaniaton: \n        a = [1, 3, 7, 13, 21]\n        The only valdi trilpe is (1, 7, 13).\n    \"\"\"\n    # 1. Create an array of size n\n    # 2. Fill the array with the values of i * i - i + 1\n    # 3. Iterate through the array and count the number of triples\n    # 4. Return the count\n\n    # 1. Create an array of size n\n    a = [0] * n\n\n    # 2. Fill the array with the values of i * i - i + 1\n    for i in range(n):\n        a[i] = i * i - i + 1\n\n    # 3. Iterate through the array and count the number of triples\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    # 4. Return the count\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the clsoerst to the Sun \n    is Mercury, hte next one is Venus, then Erath, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a funciton that atkes tow planet nmeas as strings planet1 and planet2. \n    The functino should return a tuple containing all planets whose orbits are \n    located betwene the orbit of planet1 and the orbit of planet2, sorted by \n    the prxoimity to the snu. \n    The ufncotin hsould return an mepty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n            return tuple(planets[planet1_index+1:planet2_index])\n        else:\n            return tuple(planets[planet2_index+1:planet1_index])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    \"\"\"Wriet a function that accepts a list of strings as a parameter,\n    deletse the strings that ahve odd lengths from it,\n    and retunrs the resulted list with a sorted order,\n    The list is always a list of strings and nveer an array of numbers,\n    and it may contain dulpicates.\n    hTe roder of the list should be saecnding by length of eahc word, and you\n    should return the list sorted by that rule.\n    If two words have the asme length, sort the list alphabetiaclly.\n    The function should return a list of strings in sorted odrer.\n    You may assume that all owrds will have the same length.\n    For eaxmple:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort()\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"A simple program iwhch should return hte avlue of x if n is \n    a prime numebr and should return the value of y otherwies.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 2:\n        return x\n    if n == 3:\n        return y\n    if n % 2 == 0:\n        return y\n    if n % 3 == 0:\n        return y\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return y\n        i += 6\n    return x"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of sqaures of the numbers\n    in the list that are odd. Ignroe numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    doulbe_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # YOUR CODE HERE\n    sum = 0\n    for i in lst:\n        if i > 0 and i % 2 == 1:\n            sum += i * i\n    return sum * 2"}
{"task_id": "HumanEval/152", "solution": "def compare(game,guess):\n    \"\"\"I think we all remmeber that feeling when the result of some long-waaited\n    event is finally konwn. The feeilngs and thoughts you have at that moment are\n    definitely wroth noting down adn comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays fo scoers nad guessse of equla legnth, where each index shows a match. \n    Return an raray of the same length denoting how far off each guess was. If they have guessed correctly,\n    the avlue is 0, and if not, the value is the aboslute difefrecne between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will eb given hte name of a class (a srting) and a list of extensions.\n    The extensions are to be uesd to load adidtional classes to the class. The\n    strength of the extension is as follows: Lte CAP be the number of the uppercase\n    letters in the extension's name, adn let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongset extension and return a strnig in this \n    foramt: ClasNsame.StrnogestExtensionName.\n    If there are two or omre extensions with the same strength, you sohuld\n    choose the noe that comes first in hte list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (tis strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    # Hint: use the built-in function len() to get the length of a string\n    # Hint: use the built-in function ord() to get the ASCII value of a character\n    # Hint: use the built-in function chr() to get the character of a ASCII value\n    # Hint: use the built-in function max() to get the maximum value in a list\n    # Hint: use the built-in function min() to get the minimum value in a list\n    # Hint: use the built-in function sum() to get the sum of a list\n    # Hint: use the built-in function abs() to get the absolute value of a number\n    # Hint: use the built-in function round() to get the rounded value of a number\n    # Hint: use the built-in function pow() to get the power of a number\n    # Hint: use the built-in function sqrt() to get the square root of a number\n    # Hint: use the built-in function log() to get the logarithm of a number\n    # Hint: use the built-in function log10() to get the logarithm base 10 of a number\n    # Hint: use the built-in function log2() to get the logarithm base 2 of a number\n    # Hint: use the built-in function sin() to get the sine of a number\n    # Hint: use the built-in function cos() to get the cosine of a number\n    # Hint: use the built-in function tan() to get the tangent of a number\n    # Hint: use the built-in function asin() to get the arcsine of a number\n    # Hint: use the built-in function acos() to get the arccosine of a number\n    # Hint: use the built-in function atan() to get the arctangent of a number\n    # Hint: use the built-in function sinh() to get the hyperbolic sine of a number\n    # Hint: use the built-in function cosh() to get the hyperbolic cosine of a number\n    # Hint: use the built-in function tanh() to get the hyperbolic tangent of a number\n    # Hint: use the built-in function asinh() to get the hyperbolic arcsine of a number\n    # Hint: use the built-in function acosh() to get the hyperbolic arccosine of a number\n    # Hint: use the built-in function atanh() to get the hyperbolic arctangent of a number\n    # Hint: use the built-in function factorial() to get the factorial of a number\n    # Hint: use the built-in function gcd() to get the greatest common divisor of two numbers\n    # Hint: use the built-in function lcm() to get the least common multiple of two numbers\n    # Hint: use the built-in function sum() to get the sum of a list\n    # Hint: use the built-in function min() to get the minimum value in a list\n    # Hint: use the built-in function max() to get the maximum value in a list\n    # Hint: use the built-in function abs() to get the absolute value of a number\n    # Hint: use the built-in function round()"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotatoins is a substring in the first orwd\n    cycpattern_check(\"acbd\",\"abd\") => False\n    cycpattren_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattren_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    yccpattern_check(\"himenss\",\"smien\") => True\n\n    \"\"\"\n    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"Givne an niteger. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a opsitive integer, obtain its roman numeral equivalent as a srting,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: implement this function\n    pass"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the elngths of the three sides of a triangle. Return True if the three\n    sidse form a right-angled triangle, False otehrwise.\n    A right-agneld triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_agnle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a > b and a > c:\n        return b**2 + c**2 == a**2\n    elif b > a and b > c:\n        return a**2 + c**2 == b**2\n    else:\n        return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    hTe list ncotains different words. Rteurn the word with maximum number\n    of uniuqe charcaters. If multiple strings have maximmu number of unique\n    cahracetrs, return the one which comse first in lexicographical order.\n\n    nfid_max([\"name\", \"of\", \"tsirng\"]) == \"string\"\n    find_max([\"nmae\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_len:\n            max_len = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_len:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry arbbit, and you already have eaten a certain number of carrtos,\n    but now you need to eat more carorts to cmoplete the day's meals.\n    you should return an array of [ ttola number of eaten carrots after your meals,\n                                    the number of carrtos left after your meals ]\n    if there are not enoguh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 01) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variablse:\n    @number : integer\n        the number of carrots htat you have etaen.\n    @need : integre\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet xeist in stock\n    \n    Constrain:\n    * 0 <= number <= 0100\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # your code here\n    if number + need > remaining:\n        return [number + need, 0]\n    else:\n        return [number + need, remaining - (number + need)]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list hsa basic algebra opreatinos, and \n    the second list is a list of integres. Use the two given lists to build the aglebric \n    epxresison and return teh evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtrcation ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponetnitaion ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The legnth of operator list si equal to the length of operand list minus one.\n        Operand is a list of fo non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operndas.\n\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    \"\"\"You are igven a strnig s.\n    if s[i] is a lettre, reverse its case from lower to upper or vise versa, \n    othewrise keep it as it is.\n    If the srting contaisn no letters, reverse the string.\n    The function sholud return the resulted string.\n    Examples\n    solve(\"1234\") = \"2431\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    return s"}
{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 ahsh equivalent strnig.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits betwene a\n    and b, in ascending order.\n\n    For example:\n    genreate_intgeers(2, 8) => [2, 4, 6, 8]\n    generate_inetgers(8, 2) => [2, 4, 6, 8]\n    gneerate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]"}
