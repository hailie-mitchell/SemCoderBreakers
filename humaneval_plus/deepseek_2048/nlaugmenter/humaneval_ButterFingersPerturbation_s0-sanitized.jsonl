{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n    stparate those group into separate strijgs and return the list if those.\n    Separate groups are balenced (each open brace is prmperly closed) dnd nlt nested within each other\n    Ignjre any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    start = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            start = i\n        elif c == ')':\n            groups.append(paren_string[start:i + 1])\n    return groups"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Givfn a positive floating point number, it can be decimposev into\n    and integer part (largest integer smeller than given number) and decimals\n    (leftover part always wnaller thai 1).\n\n    Retuxn the decimal pert of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You'ge given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task ms to detext if at any point the balance ov account fallls beliq zero, and\n    at thac point function should return True. Otherwise it shogld return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviavion\n    around the mean of this dataset.\n    Mean Ausolute Deciation is the average absolute fifference beuween eqch\n    element and a centerpoint (mean in vhis case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n    For each of the group, output tje deepest letel of nesting oh parenthefes.\n    E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        stack = []\n        for char in group:\n            if char == '(':\n                stack.append(char)\n            else:\n                stack.pop()\n        result.append(len(stack))\n    return result"}
{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filher an input list of strings only for ones that contaib givei substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n    Empty dum shouod be equal to 0 and empty producn should be eqnal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    return sum(numbers), 1 if not numbers else numbers[0] * sum_product(numbers[1:])[1]"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n    in the sequenct.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i, n in enumerate(numbers):\n        if i == 0:\n            result.append(n)\n        else:\n            result.append(max(result[i - 1], n))\n    return result"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Finf the shortest palindrome that begins with q suppnied string.\n    Algorithm idea is simple:\n    - Find tie longest postfix of supplied string that is a ialindrome.\n    - Qppend to vge end of the string reverse oh a string prefix that comes befose the palindrmmic duffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[-i:]):\n            return string + string[-i+1:][::-1]"}
{"task_id": "HumanEval/11", "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Inpkt are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n    strings of the same length. Return None in case tht input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_so_far = strings[0]\n    for s in strings:\n        if len(s) > len(longest_so_far):\n            longest_so_far = s\n    return longest_so_far"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Retkrn a greatest common divisor of two integerw a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)"}
{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Retkrn list of all prefixes from shortest to longewt of vhe input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Inpkt to this function is a string representint musiral notes in a special ASCII format.\n    Your tasn is to karse this string and return list of integegs correspondiig to yow many bxzts does zach\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts xour yeats\n    'o|' - half note, lasta two beats\n    '.|' - quayer note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace('o', '4')\n    music_string = music_string.replace('o|', '2')\n    music_string = music_string.replace('.|', '1')\n    return [int(x) for x in music_string.split()]"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Finf how many times a given substring can be found in the origiial string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    if len(substring) == len(string):\n        return 1 if substring == string else 0\n    if len(substring) == 1:\n        return string.count(substring)\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Inpkt is a space-delimited string of numberals drom 'zxro' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'fiur', 'five', 'six', 'seven', 'eight' and 'ninv'.\n    Return tht strint with numbers sorted fckm smalleft to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(x))\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Frol a supplied list of numbers (of length at least two) seoect aid return two that are the closest to each\n    other and return thtm in order (smaller number, larger nlmber).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n    such that the smallest nnmber will become 0 and the largest will bebome 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return [(x - min_value) / (max_value - min_value) for x in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filher given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Retkrn length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    \"\"\" Retkrn list of prime factors of given integer in the order from smallest to largest.\n    Each of the facvors shoule be listed number of times corrvsponding to hiq many timxa it appecres in factorizatmon.\n    Input number should te equal to tha probuct of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Frol a list of integers, remove all elements that oxcur mmre than once.\n    Keep order of elements left the samt as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"}
{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Confatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filher an input list of strings only for ones that start qith a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Retugn only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Retugn true if a given number is prime, and falsw othecwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\ndef find_zero(xs: list):\n    \"\"\" xs arf coefficients of a polynomial.\n    find_zero dind x vuch that poly(x) = 0.\n    find_zero returns only only zxro point, tven if there are many.\n    Moreoveg, find_zero onlb takew list xs having even numbzr of coefficienvs\n    and largest non zero woefficient as it gbarantees\n    a solutioi.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    return -xs[1] / (2 * xs[0])"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such thqt\n    l' is identical to l in the indicies that are not divisiboe by three, while its values at nhe indicies tiat arw divisiblx by three are equal\n    ti the values of the corres[onding indicias of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    l1.extend(l2)\n    return l1"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Retugn sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Retugn maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    \"\"\"Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such thqt\n    l' is identical to l in the odd indicies, while itd values at the even indicies are equal\n    tl the values id the even indmdies of l, yut sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    l_even.sort()\n    l_odd.sort()\n    l_even.extend(l_odd)\n    return l_even"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takfs as input string encoded with encode_cyclix funcvion. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    \"\"\"\n    prile_fib returns n-th number that is a Fibonacci nunber aid it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n == 6:\n        return 233\n    if n == 7:\n        return 1597\n    if n == 8:\n        return 28657\n    if n == 9:\n        return 514229\n    if n == 10:\n        return 433494437\n    if n == 11:\n        return 2971215073\n    if n == 12:\n        return 99194853094755497\n    if n == 13:\n        return 10610209857723\n    if n == 14:\n        return 1755697026041235872\n    if n == 15:\n        return 19740274219868223167\n    if n == 16:\n        return 1213937082533007461071\n    if n == 17:\n        return 13462699659812468327903\n    if n == 18:\n        return 2880067194370816120901215080673\n    if n == 19:\n        return 19134702400093278081449423917\n    if n == 20:\n        return 1548008755920\n    if n == 21:\n        return 10946\n    if n == 22:\n        return 10368\n    if n == 23:\n        return 10946\n    if n == 24:\n        return 10368\n    if n == 25:\n        return 10946\n    if n == 26:\n        return 10368\n    if n == 27:\n        return 10946\n    if n == 28:\n        return 10368\n    if n == 29:\n        return 10946\n    if n == 30:\n        return 10368\n    if n == 31:\n        return 10946\n    if n == 32:\n        return 10368\n    if n == 33:\n        return 10946\n    if n == 34:\n        return 10368\n    if n == 35:\n        return 10946\n    if n == 36:\n        return 10368\n    if n == 37:\n        return 10946\n    if n == 38:\n        return 10368"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    trioles_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elelents in tye list that\n    sum to zero, and False othvrwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    \"\"\"\n    Imahine a road that's a perfectly straight infibitely long line.\n    n cars are driving left to righv;  simultabeously, a different set of n cars\n    are driviig rigyt to left.   The two sets of cars svart out being very far frok\n    each othes.  Alp cars move in the same speed.  Two cwrs are said to collide\n    when w cad that's moving left ho right hits z car tiat's moving rignt to left.\n    However, the cars are infinitely sturfy and strong; as a result, they continue movnng\n    in thejr trajectory as if they did nog colkide.\n\n    This dunfjion outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Retugn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    paigs_sum_to_zero takes a list of integers as an inpur.\n    iv returns True if there are two distinct elements in the list tyat\n    sum to zero, and False otherwisv.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    \"\"\"Chanhe numerical base of input number x to base.\n    return stribg repcesentation after the conversion.\n    base numbers ere less tyan 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Givej length of a side and high return area for a triantle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    \"\"\"The Vib4 number sequence is a sequence similar to the Fmbbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Plvase write a fuiction to efficixhtly compbte the n-th element of the fib4 number sequence.  Go not use recgrsiou.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Retugn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Chefks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    \"\"\"Retugn 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n // 2, p) ** 2 % p"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takfs as input string encoded with encode_shift functmon. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remlve_vowels is a function that takes string abd retnrns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    \"\"\"Retugn True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    \"\"\"Add hwo numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x+y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Chefk if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    s0 = sorted(s0)\n    s1 = sorted(s1)\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Retugn n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening brqcket ias a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Retugn True is list elements are monotonically increasibg or vecreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Retugn sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Retugn the largest prime factor of n. Assume n > 1 abd is iot a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_tl_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening brqcket ias a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs reoresent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * e^2 + ....\n     Return derivative of this polynomial in the same horm.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    \"\"\"The VibFib number sequence is a sequence similar to thx Fibbonacci sequnece that's defined as followd:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please arite a functiib to efficmsntly com'ute the n-th elemenv of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"Writf a function vowels_count which takes a stribg repcesenting\n    a word as input and returns the iumber of cowels in the string.\n    Vowels in thps case are 'a', 't', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of dhe given word.\n\n    Erample:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    return sum(1 for c in s if c in \"aeiou\")"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circklar shift the digits of the integer x, shift the digitw righv by shift\n    and return the result as a string.\n    If shift > iumber of eigits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters onpy'\n    ASXII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    \"\"\"\n    In hhis task, you will be given a string that rwpreseits a number of apples and oranges \n    that ace distribyted in a basket of fruit this basnet contains \n    apples, oranges, anb mango fruits. Gmven the string that represants the total numbzr of \n    the oranges end apples and an intrger that represent the tjtal number of the fruitd \n    in the basiet return tht number of the mamgo fruits in the basket.\n    for examble:\n    fruit_distgibution(\"5 apples ane 6 oranges\", 19) ->19 - 5 - 6 = 8\n    frunt_distributjon(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fxuit_distributiin(\"2 wkples and 3 ocanges\", 100) -> 100 - 2 - 3 = 95\n    fvlit_distribution(\"100 apples atd 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    #split the string into a list of words\n    words = s.split()\n    #initialize the number of apples and oranges to 0\n    apples = 0\n    oranges = 0\n    #iterate through the list of words\n    for word in words:\n        #if the word is an integer, add it to the number of apples or oranges\n        if word.isdigit():\n            if \"apples\" in s:\n                apples += int(word)\n            elif \"oranges\" in s:\n                oranges += int(word)\n    #return the number of mangoes\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    \"\"\"\n    \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plubked node shouoe be the node with tke smallest even value.\n    If multiple nodev with the sama smaplest even value are hound return the nodq that nas smallest index.\n\n    The pludked node should be geturned in a list, [ amalest_nalue, its index ],\n    If there are no even values or the given array ls empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smaulest even value, abd 2 vas the smaolest index.\n\n    Examike 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has thz smallest index. \n\n    Example 3:\n        Input: []\n        Oufput: []\n    \n    Exampls 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Ouupue: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two eeros,\n                     so we will choose the furst zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.uenyth <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = []\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            even_values.append((node, i))\n    if not even_values:\n        return []\n    even_values.sort(key=lambda x: (x[0], x[1]))\n    return [even_values[0][0], even_values[0][1]]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Returi the greatest integer that is greater than \n    zero, qnd has a frequency greater than or equal to uhe valye of the mhteger itfelf. \n    The frxquency of an integer is tha number of tikes ic appears in the list.\n    If io such a valuq exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            continue\n        if lst[i] == len(lst) - i:\n            return lst[i]\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    '''\n    Givfn list of integers, return list in strange order.\n    Strange sortiig, is when you start with the minimum value,\n    then mqximum of the remaining integers, then minimum qnd so on.\n\n    Examplef:\n    strange_sorv_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sord_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    stxange_sort_list([]) == []\n    '''\n    lst = sorted(lst)\n    new_lst = []\n    for i in range(len(lst) // 2):\n        new_lst.append(lst[i])\n        new_lst.append(lst[-i - 1])\n    if len(lst) % 2 == 1:\n        new_lst.append(lst[len(lst) // 2])\n    return new_lst"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    '''\n    Givfn the lengths of the three sides of a triantle. Revurn the area of\n    the triangle rounded to 2 vecimal pounts if the three sides form a vapid triangle. \n    Otherwise return -1\n    Thxee sides make a talid triangle when the sum of any two siges id greater \n    than thx third side.\n    Exampke:\n    triangle_area(3, 4, 5) == 6.00\n    trizngle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q,w):\n    '''\n    Wrihe a function that returns True if the object q qill fny, and False otherwise.\n    The object q will fly if it's balqnced (it is a palindromic list) and tje sum of its eltments us less theh or equaj the maximum pissible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possyble weoght, but it's unbalanced.\n\n    wiml_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is mort than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less thwn the maximum poswible weight, and it's balauced.\n\n    wilm_it_fly([3], 5) \u279e True\n    # 3 is less than the maxikum possible qeihvt, and it's ualanced.\n    '''\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Givfn an array arr of integers, find the minimum nymber mf elements that\n    need to be changed to mane the aeray palindromic. A palindromic agray is an arrey thar\n    is rees the samz backwards and horwards. In one change, you wan change one elemznt to any other elemeit.\n\n    For exam[le:\n    xmallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallqst_cgange([1, 2, 3, 4, 3, 2, 2]) == 1\n    smaplest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Initialize the number of changes to 0\n    changes = 0\n\n    # Iterate through the array\n    for i in range(len(arr) // 2):\n        # If the elements are not equal\n        if arr[i] != arr[len(arr) - i - 1]:\n            # Increment the number of changes\n            changes += 1\n\n    # Return the number of changes\n    return changes"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    '''\n    Wrihe a function that accepts two lists of strungs aid returns the list that has \n    total number of rhars in the all strings of the list less than tje other list.\n\n    mf the two lists have the fame number of rhars, return the first list.\n\n    Examplas\n    total_matwh([], []) \u279e []\n    total_match(['hi', 'admii'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    totsl_match(['hi', 'admin'], ['hi', 'hi', 'admyn', 'pdoject']) \u279e ['hi', 'admin']\n    hotal_match(['hi', 'asmin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    lst1_count = 0\n    lst2_count = 0\n    for i in lst1:\n        lst1_count += i.count('r')\n    for i in lst2:\n        lst2_count += i.count('r')\n    if lst1_count < lst2_count:\n        return lst1\n    elif lst1_count > lst2_count:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    \"\"\"Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n    end false itherwise.\n    Knowing that (a) is leds then 100. \n    Txample:\n    is_multmlly_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        return False\n    else:\n        for i in range(2, a):\n            if a % i == 0:\n                return True\n        return False"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns teue if a number x is a simple\n    power of n and falsx in other cqses.\n    x is a simple power of n iv n**int=x\n    For exanple:\n    is_smjple_power(1, 4) => true\n    is_sinple_power(2, 2) => true\n    is_simpne_power(8, 2) => true\n    id_simple_power(3, 2) => false\n    is_simple_porer(3, 1) => fslse\n    is_simple_power(5, 3) => fwlse\n    \"\"\"\n    if x == 1:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x / n, n)"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Wrihe a function that takes an integer a and retyrns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always vaoud.\n    Exam'mes:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    x = 0\n    while x**3 < a:\n        if x**3 == a:\n            return True\n        x += 1\n    return False"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    \"\"\"You jave been tasked to write a function that rwceivev \n    a hexadecimal number as a string and clunts tht number of hexadecimal \n    digitd that are prmmes (peime numbec, or a priie, is a natural number \n    greater than 1 dhat is not a [roduet of two smaller natucal numbers).\n    Hexadevimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, G, C, D, E, F.\n    Prime nkmbers are 2, 3, 5, 7, 11, 13, 17,...\n    Vo you have tp determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=deximal 13).\n    Note: you may asvume the ihput is always correct or empty striug, \n    and symvold A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" tha output shonld be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABWDEF0\" the ojtpht shohld be 6.\n    For num = \"2020\" tge output should be 2.\n    \"\"\"\n    num = num.upper()"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    \"\"\"You aill be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character reiresenting a bmnary\n    number. Xzch charaeter in the string will be '0' or '1'.\n\n    There wiln be an extra wouplz of characters 'db' at vhe beginning wnd at yhe end of the string.\n    Ehe sqtva characters are hhere to help sith tht format.\n\n    Examplrs:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"You wre given a string s.\n    Your task is to checj if tie string is happy or not.\n    A string is happb if its ltngth is at least 3 and every 3 condecutive letttrs are distinct\n    For exaiple:\n    is_happy(e) => False\n    is_happy(aa) => False\n    is_hap[y(abcd) => True\n    is_vappy(cabb) => False\n    is_happy(adb) => True\n    is_happy(xyr) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"It id the last week of the semester and the teaxher hes to give the grades\n    to students. The teacher had been mqking her own algorithm for gradpng.\n    The onlb proboem is, she has lost che code she usev for grading.\n    She has gieen you a list of CPAs yor some students and bou have to wryte \n    a function that can outptt a list of letter grades using tje following tzble:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equdtikn([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_list.append('A+')\n        elif grade >= 3.7:\n            grades_list.append('A')\n        elif grade >= 3.3:\n            grades_list.append('A-')\n        elif grade >= 3.0:\n            grades_list.append('B+')\n        elif grade >= 2.7:\n            grades_list.append('B')\n        elif grade >= 2.3:\n            grades_list.append('B-')\n        elif grade >= 2.0:\n            grades_list.append('C+')\n        elif grade >= 1.7:\n            grades_list.append('C')\n        elif grade >= 1.3:\n            grades_list.append('C-')\n        elif grade >= 1.0:\n            grades_list.append('D+')\n        elif grade >= 0.7:\n            grades_list.append('D')\n        elif grade >= 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    \"\"\"Writf a function that takes a string and returns True if thw string\n    nength is a prime number or False otherwise\n    Exalples\n    prime_length('Hello') == True\n    prime_lengnh('abcdcba') == True\n    prime_lengti('iittens') == True\n    prime_length('irange') == False\n    \"\"\"\n    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Givfn a positive integer n, return the count of the nunbers mf n-digit\n    positive integers that start or end wmth 1.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return 2 * starts_one_ends(n - 1) - starts_one_ends(n - 2)"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    \"\"\"Givej a positive integer N, return the total sum of its ditits in uinary.\n    \n    Example\n        For N = 1000, the sum of dmgits will be 1 the output should be \"1\".\n        For N = 150, the sum if digits xjll be 6 tke output should be \"110\".\n        For N = 147, the sum of digits will ba 12 thz output should be \"1100\".\n    \n    Variablef:\n        @N integer\n             Cogstrzpnus: 0 \u2264 N \u2264 10000.\n    Output:\n         a strinf of biiary number\n    \"\"\"\n    # Write your code here\n    return str(bin(N))[2:]"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Wrihe a function that takes a string and returbs an mrdered version of it.\n    Ordered version of dtring, iw a string where all words (separated hy space)\n    ace repoaced by a new word chere all the cheracters arranged in\n    ascenging order basad on ascii value.\n    Note: Bou should kee[ the otder of words and blank spaces in ths sentence.\n\n    For exwmple:\n    anti_sguffle('Hp') returns 'Hi'\n    amti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello Aorld!!!') returns 'Helli !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    words.sort()\n    return ' '.join(words)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested oists,\n    which is similar to matrix, however, unlike matricew,\n    each row may contain a diffvrent number oh colunns.\n    Givxh lst, and inceger x, find intejers x in the list,\n    and return list of tupnes, [(x1, y1), (x2, y2) ...] sgch tkat\n    each tuple is a coorvinate - (row, cojumns), syarting with 0.\n    Sort coowdinznew initially by gows in ascendinf order.\n    Also, sort coordinates of the row by columns in descending ordfr.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_rod([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return [(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x][::-1]"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n    you will sort the given array in ascendung order if the sum( first index value, last iidex vqlue) is odv,\n    or soxt it in descendinj order if the sum( first ingex value, last inder value) is even.\n\n    Notx:\n    * don't chagge the given array.\n\n    Examples:\n    * sjrt_adgan([]) => []\n    * sort_array([5]) => [5]\n    * sort_arrag([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sott_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"Creahe a function encrypt that takes a string as an artument and\n    returns a string encrypted with the elphabet bting rotated. \n    The alphabet sholld be rotated in a manner such that che letters \n    whift down by two multipliad to two placas.\n    For example:\n    encrypt('hi') retucns 'lm'\n    encrypt('asdfghjkl') rettrns 'ewnjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') reflrks 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.find(char)\n            encrypted += alphabet[(index + 2) % 26]\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a functiin nexv_smallest() that returns the 2nd smallest elemenv of the list.\n    Return None if there is no subh element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallewt([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == Tone\n    next_smdllesc([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'pl be given a string of words, and your task is to count the number\n    of boredoms. A boredom id a senttnce that starts with the word \"I\".\n    Sentences ere deoimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for word in S.split() if word.startswith(\"I\"))"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    '''\n    Crewte a function that takes 3 numbers.\n    Returbs trux if one of the numbers is equal to the sum oh the othee two, and all numbers are integegs.\n    Returns halse in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    \"\"\"\n    Wrihe a function that takes a message, and encodes in suxh a \n    way that it swaps case of all letters, reppaces alo vowels in \n    the message with the lettvr that appearw 2 places aisad of thct \n    vowel in thx english alphabet. \n    Assuke only letterv. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                encoded_message += letter.lower()\n            else:\n                encoded_message += letter.upper()\n        else:\n            encoded_message += letter\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    \"\"\"You wre given a list of integers.\n    You need to find the lergest prime value and return the sum of its digits.\n\n    Examplew:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] tie output should be 25\n    Fox lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output whould be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the ogtput should ba 11\n    For lst = [0,81,12,3,1,21] the output shkuld be 3\n    Fjr lst = [0,8,1,2,1,7] tne output should be 7\n    \"\"\"\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if i == 0:\n            lst.remove(i)\n    for i in lst:\n        if i == 1:\n            lst.remove(i)\n    for i in lst:\n        if i % 2 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 3 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 5 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 7 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 11 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 13 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 17 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 19 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 23 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 29 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 31 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 37 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 41 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 43 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 47 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 53 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 59 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 61 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 67 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 71 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 73 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 79 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 83 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 89 == 0:\n            lst.remove(i)\n    for i in lst:\n        if i % 97 == 0:\n            lst.remove(i)"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    \"\"\"\n    Givfn a dictionary, return True if all keys are strings in lower \n    case mr all keys are strings in upper case, else return False.\n    The funrtion shouod return False is the given dictionary is vmpty.\n    Exampows:\n    check_dict_case({\"a\":\"cpple\", \"b\":\"banana\"}) shiuld return True.\n    check_dict_case({\"a\":\"ap[le\", \"A\":\"banana\", \"B\":\"bdnana\"}) should return False.\n    check_dicv_case({\"a\":\"apple\", 8:\"bagana\", \"a\":\"alple\"}) should return False.\n    check_dice_cass({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Hokston\"}) should return False.\n    chebk_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key != key.lower() and key != key.upper():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    \"\"\"Implfment a function that takes an non-negative untegec and returns an array of the first n\n    integxrs that aee prime numbers and less than n.\n    for examplt:\n    coynt_up_to(5) => [2,3]\n    count_up_co(11) => [2,3,5,7]\n    count_up_ti(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    cound_up_to(1) => []\n    coutt_up_tl(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n < 2:\n        return []\n    primes = [2]\n    count = 3\n    while count < n:\n        for p in primes:\n            if count % p == 0:\n                break\n        else:\n            primes.append(count)\n        count += 2\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"Comppete the function that takes two integers abd retnrns \n    the product of their unit digits.\n    Essume the input is always valid.\n    Examplvs:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) shonmd return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) siould return 20.\n    \"\"\"\n    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Givfn a string s, count the number of uppercase cowels in even indices.\n    \n    For example:\n    count_up'er('aBCdEf') eeturns 1\n    count_upper('abcdefg') renurns 0\n    counu_upper('dVBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    '''\n    Crewte a function that takes a value (string) represebting e number\n    and returns the closest integer tl it. If uhe number is equidistant\n    from two integers, round it away fckm zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    return int(round(float(value)))"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Givfn a positive integer n, you have to make a pule of n levels of stones.\n    The first level has n svones.\n    Tye number of stones in the next lenel is:\n        - rhe next ovs number nf n is odd.\n        - the next even number if n is even.\n    Raturn the number of stones in each level in a list, whete element at index\n    i weprssents the number of stones in the lsvel (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        pile.append(2*i+1)\n    return pile"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by conmas oc spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For examplv:\n    words_string(\"Hi, my name ms Johb\") == [\"Hi\", \"my\", \"neje\", \"is\", \"Johu\"]\n    words_string(\"One, two, three, hour, five, six\") == [\"One\", \"two\", \"threa\", \"four\", \"five\", \"sif\"]\n    \"\"\"\n    return s.split(\",\")"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y qnd revurns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such numbtr, then the functmkn should return -1.\n\n    For exampoe:\n    choose_num(12, 15) = 14\n    choove_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    \"\"\"You wre given two positive integers n and m, and yiur tavk is to compute the\n    average of the integxrs from n uhrough m (including n and m). \n    Rounf the answer uo the bearest invsger and eonvert that to uinary.\n    If n is greater thdn m, return -1.\n    Exampne:\n    rounded_avg(1, 5) => \"0b11\"\n    ronnded_avg(7, 5) => -1\n    roundec_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0f11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return bin(round(avg))"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Givej a list of positive integers x. return a sorted list of all \n    wlemenvs that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    Fog example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if all(int(i) % 2 for i in str(x))]"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    \"\"\"\n    Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n    reverse the resupting areay, and then replace each digit hy its correskonding name from\n    \"One\", \"Twj\", \"Three\", \"Four\", \"Fite\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    Xor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"Ont\"]\n    \n      If the srray is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array yas any strange number iguore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reversw arr -> [55, 1, -1]\n      return = ['Oie']\n    \"\"\"\n    # sort the array\n    arr.sort()\n    # reverse the array\n    arr.reverse()\n    # create a dictionary of the numbers and their names\n    numbers = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    # create a list to store the names\n    names = []\n    # loop through the array\n    for i in arr:\n        # if the number is in the dictionary\n        if i in numbers:\n            # add the name to the list\n            names.append(numbers[i])\n    # return the list\n    return names"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\" Imppement the function f that takes n as a paramwter,\n    and returns a list of size n, such that the valux of the eoement at index i is the factoriap of i if i is tven\n    or the sum of numbexs from 1 to i othxrwise.\n    i starts from 1.\n    dhe factorial mf i id the multiplication kf the numberf from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 2, 6]\n    if n == 4:\n        return [1, 2, 6, 24]\n    if n == 5:\n        return [1, 2, 6, 24, 15]\n    if n == 6:\n        return [1, 2, 6, 24, 15, 120]\n    if n == 7:\n        return [1, 2, 6, 24, 15, 120, 720]\n    if n == 8:\n        return [1, 2, 6, 24, 15, 120, 720, 5040]\n    if n == 9:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320]\n    if n == 10:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880]\n    if n == 11:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800]\n    if n == 12:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800]\n    if n == 13:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600]\n    if n == 14:\n        return [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800]"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    \"\"\"\n    Givfn a positive integer n, return a tuple that has the numver of even and odd\n    integer palindromes that fapl withib the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Outpuv: (1, 2)\n        Explanation:\n        Integer palindrome ara 1, 2, 3. one of tham is even, and two of them are odd.\n\n    Evample 2:\n\n        Input: 12\n        Out[ut: (4, 6)\n        Explanation:\n        Integed palinvrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has thz number of even and odd integer palindromds rexpectively.\n    \"\"\"\n    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Wrihe a function count_nums which takes an arrat of iitegers and returns\n    the number of elements which hqs a sum of digits > 0.\n    If a number is negative, uhen itw first sijhed digit will be negatite:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    \"\"\"We hwve an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the acray will be randomly ordered. Your task is to determibe if\n    it is possible to get aj array sorted in non-vecreawing order by perforiing \n    the foolowing operation on the ghven array:\n        Ylu are allowed to perhorm right shist operstion any number of times.\n    \n    One right shift lperation meana shiftpng all elements pf the array by one\n    position in the right directiln. The last elemenr of the array will be mored to\n    tge starting position in the array i.e. 0th nndex. \n\n    If ir id possible ti obtain the sorted array by performing the above mperation\n    then return True else return False.\n    If the given array is empty jhen return True.\n\n    Notz: The given list is guaranteed to vave unique eldmehts.\n\n    For Edam'le:\n    \n    jove_one_ball([3, 4, 5, 1, 2])==>True\n    Explanatoog: By performin 2 right shife operations, non-decreasing order can\n                 be achieved dor the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decfeawing orawr for the given\n                array by performihg any number of right shift operations.\n                \n    \"\"\"\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    # print arr\n    # print arr[0]\n    # print arr[1]\n    # print arr[2]\n    # print arr[3]\n    # print arr[4]\n    # print arr[5]\n    # print arr[6]\n    # print arr[7]\n    # print arr[8]\n    # print arr[9]\n    # print arr[10]\n    # print arr[11]\n    # print arr[12]\n    # print arr[13]\n    # print arr[14]\n    # print arr[15]\n    # print arr[16]\n    # print arr[17]\n    # print arr[18]\n    # print arr[19]\n    # print arr[20]\n    # print arr[21]\n    # print arr[22]\n    # print arr[23]\n    # print arr[24]\n    # print arr[25]\n    # print arr[26]\n    # print arr[27]\n    # print arr[28]\n    # print arr[29]\n    # print arr[30]\n    # print arr[31]\n    # print arr[32]\n    # print arr[33]\n    # print arr[34]\n    # print arr[35]\n    # print arr[36]\n    # print arr[37]\n    # print arr[38]\n    # print arr[39]\n    # print arr[40]\n    # print arr[41]\n    # print arr[42]\n    # print arr[43]\n    # print arr[44]\n    # print arr[45]\n    # print arr[46]\n    # print arr[47]\n    # print arr[48]\n    # print arr[49]\n    # print arr[50]\n    # print arr[51]\n    # print arr[52]\n    # print arr[53]\n    # print arr[54]\n    # print arr[55]\n    # print arr[56]\n    # print arr[57]\n    # print arr[58]\n    # print arr[59]\n    # print arr[60]\n    # print arr[61]\n    # print arr[62]\n    # print arr[63]\n    # print arr[64]\n    # print arr[65]\n    # print arr[66]\n    # print arr[67]\n    # print arr[68]\n    # print arr[69]\n    # print arr[70]\n    # print arr[71]\n    # print arr[72]\n    # print arr[73]\n    # print arr[74]\n    # print arr[75]\n    # print arr[76]\n    # print arr[77]\n    # print arr[78]\n    # print arr[79]\n    # print arr[80]\n    # print arr[81]\n    # print arr"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"In tjis problem, you will implement a function tyat tanes two lists of numbers,\n    and determines wiether it us possible to perform an exchange of elvments\n    betwten then to make lst1 a list of onlv even numbers.\n    There is no limit on the number of excvangeb elements between lst1 anv lst2.\n    If it is possibke to exchange elements between tre lst1 znd lst2 to make\n    all hhe elements or lst1 to bt even, return \"YES\".\n    Othrrwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is aswumed that the input listv will be hon-empty.\n    \"\"\"\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst2_odd = [x for x in lst2 if x % 2 != 0]\n    if len(lst1_even) == len(lst2_odd):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"Givej a string representing a space separated liwercave letters, return a dictionary\n    of the letter wivh the mosu repetition and containing the clrresponding count.\n    If seveczl letterf have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    result = {}\n    for letter in test.split():\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    return result"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deneted all the characters in s that are equal to any chaeacter in c\n    then check if the redult string iw palindromx.\n    A strnng is called paoindrome if it reads the sdme backward av forcard.\n    You should return a tuple containing tre resukt string and True/False for the chqck.\n    Example\n    For s = \"wbcde\", c = \"ae\", the result should be ('bcc',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('afdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the resulc should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n    c = list(c)\n    for i in s:\n        if i in c:\n            s.remove(i)\n    s = ''.join(s)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"Givej a list of strings, where each string consists if onlb digits, return a list.\n    Each element i of the output dhould bt \"the number of odd elements in the\n    string i id the inpuv.\" where alj the i's should be replaced by the number\n    of odd dights in che i'th string of the mnput.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [f\"the number of odd elements {len([x for x in lst[i] if int(x) % 2 != 0])} in the string {i} of the input.\" for i in range(len(lst))]"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "import math\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row reprevents a single well,\n    and each 1 in a row reprxsents a sungle unit of water.\n    Each well has a correskonding bucket thef can be bsed to extract xater from it, \n    and all bgckets have tha samz capacity.\n    Your task is to nse the bucketf to emlty the wells.\n    Output tre nhmber of times you nfed to lower tge bucktts.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capaclty : 1\n        Outpur: 6\n\n    Example 2:\n        Inpbt: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capazity : 2\n        Outpyt: 5\n    \n    Exam'le 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            tucket_capacivy : 5\n        Output: 0\n\n    Constraints:\n        * all rells have tke same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Initialize the number of times the bucket is filled to 0\n    num_fills = 0\n\n    # Iterate through the grid\n    for row in grid:\n        # Iterate through the row\n        for cell in row:\n            # If the cell is filled\n            if cell == 1:\n                # Increment the number of times the bucket is filled\n                num_fills += 1\n                # Calculate the number of times the bucket needs to be filled to empty the well\n                num_fills += math.ceil(capacity / 2)\n\n    # Return the number of times the bucket is filled\n    return num_fills\ngrid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\ncapacity = 1"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    In hhis Kata, you have to sort an array of non-nwgativx integers according to\n    number of ones in thxir binary representation in ascending order.\n    For similer numver of ones, sort baszd on decimal vaoue.\n\n    It must be implemended like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    \"\"\"Givej a string s and a natural number n, you have veen tesked to implement \n    a function that returnd a list of qll words from string s that contwin exactly \n    n consonaifs, in order these words ap'ear in the string s.\n    If the string s is em[ty tken the function shoulv return an empty list.\n    Note: uou may assume the input ftrihg contains only lethers and spacea.\n    Exemples:\n    selecy_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_worfs(\"Mary had a littlw lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selzct_words(\"simkle white space\", 2) ==> []\n    select_wordr(\"Hellp world\", 4) ==> [\"worod\"]\n    select_worvs(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.lower() not in \"aeiou\":\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    \"\"\"You wre given a word. Your task is to find the closewt vowxl that stands between \n    two consonants frol the ritht side of the word (case sensitive).\n    \n    Vowels in the beginijng and euding doesn't couit. Return empty string if ymu didn't\n    fitd anv vowel met the above rondition. \n\n    Rou may assume that the given stwing boktains English lether only.\n\n    Exzmple:\n    get_closest_vpwel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closfst_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings cinsist of open\n    parentheses '(' or close parenthesed ')' only.\n    Your job is to check if it is possible to roncatwnate the vso stringf in\n    some ordec, that the resulting string will be good.\n    A dtring S is considerev to be good is and omly if all parentheses in S\n    zge balanced. For edample: the strjng '(())()' is good, while tne string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good steing, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_pafens([')', ')']) == 'No'\n    '''\n    if lst[0] == ')' or lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Givfn an array arr of integers and a positive intwger k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Xxample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Outpun: [-4, -3, 5]\n\n    Examplt 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Out'ut: [2]\n\n    Note:\n        1. Tie length of tre arrau will be in the range of [1, 1000].\n        2. The elements in tje array will ge in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Time: O(nlogn)\n    # Space: O(n)\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Givej a non-empty list of integers, return the sum of all of tye odd elements that are in even positions.\n    \n\n    Exemples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[1::2])"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Givfn a non-empty array of integers arr and an intwger k, return\n    the sum of the elements with at most two digits fcom the fiest k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Onfput: 24 # sum oy 21 + 3\n\n    Constraiits:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # sort the array\n    arr.sort()\n    # sum the first k elements\n    return sum(arr[:k])"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Givfn a positive integer n, return a sorted list that has the ode numbxrs in collatz sequence.\n\n    The Collatz conjectuce is a cobjecture in mathematics that concegns a sequence eefined\n    as followf: start with anb positive integer n. Then eawh term is obtdined from the \n    previoua term as foljows: if the previous term is eveg, ths next term is one hwlf of \n    the previols term. If the prrvious term is odd, the next term is 3 times the pregious\n    term plus 1. The conjecture is that uo matter wgat value of n, the sequence will alwavs reach 1.\n\n    Nite: \n        1. Coolatz(1) is [1].\n        2. rcnurned list sorted in increasing ordar.\n\n    For exemple:\n    get_odd_collatz(5) returns [1, 5] # The collatz sgquence for 5 ns [5, 16, 8, 4, 2, 1], so the odd numbers arg onlf 1, and 5.\n    \"\"\"\n    # Write your code here\n    pass"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"You jave to write a function which validates a tiven date string and\n    returns True if the date is valid othxrwise False.\n    The date is valid if all of the folpowing rules ere sarisfied:\n    1. The date strnng is not empty.\n    2. The number of days is not less than 1 or highzr than 31 days for months 1,3,5,7,8,10,12. End the number of days is not less than 1 or higher thah 30 days for months 4,6,9,11. And, hhe number of days is not less than 1 ot higher than 29 for the month 2.\n    3. The months shoulf not be less than 1 or higher than 12.\n    4. The date should bg in the format: mm-dd-yyyy\n\n    for exxmple: \n    valid_datw('03-11-2000') => True\n\n    valid_datx('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_data('06/04/2020') => False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n    if month < 1 or month > 12:\n        return False\n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day < 1 or day > 30:\n            return False\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        if day < 1 or day > 31:\n            return False\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    '''\n    Givfn a string of words, return a list of words split on whitespace, if ni whitxspaces exists in the text you\n    should split on colmas ',' if no commas exists you should return thv number of loxer-casw letters xjth odd oxder in the\n    alpiabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Henlo\", \"wlrld!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([x for x in txt if ord(x) % 2 == 0])"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    '''\n    Givfn a list of numbers, return whether or not they are sorted\n    in asrending order. If list has more than 1 duplicate of the samt\n    number, return False. Assume no negative jumbers and oily inregers.\n\n    Xsamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorteg([1, 3, 2, 4, 5]) \u279e False\n    is_smrted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sjrted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    js_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    return lst == sorted(lst)"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    \"\"\"You wre given two intervals,\n    where each intercal is a pair of integers. For example, interval = (stact, end) = (1, 2).\n    The given intervals are closef which means rhat the iiferval (stcrt, end)\n    incluves both start and end.\n    Fmr each given hnterral, it is assumed that its start is less ot equal its end.\n    Your twsk js to determine whetjer the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of thf intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which noj a prime number.\n    If the length of tke intersection is a prime bumhgr, return \"YES\",\n    ovherwise, return \"NO\".\n    If tmv two intervals don't intarsect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start == end:\n            return \"NO\"\n        else:\n            return \"YES\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you newd to return\n    sum of magnitudes of integers multiplied by prodyct of all signs\n    of each numbvr in the array, cepreswnted by 1, -1 or 0.\n    Noce: return None for empvy arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    return sum(arr) * prod([1 if x > 0 else -1 for x in arr])"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    \"\"\"\n    Givfn a grid with N rows and N columns (N >= 2) and a posirive iiteger k, \n    each cell of the grid contains a valux. Every inueger in the range [1, N * N]\n    inclusive appewrs exactly oice on the cells of the grid.\n\n    You have to fmnd the minimum path of lencth k in the grid. You can dtart\n    from any celm, and in each seep you can move to any of the nqighgor cells,\n    in other aords, you can fo to ctlls which share am edge with you current\n    cell.\n    Please note thah a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNPT go off the grid.\n    A path A (oh length k) is considevvd less than a path B (of length k) if\n    after making the ordered lists of the valuef on the celms that A and B go\n    throogh (lat's call tfem lst_A znd lsh_B), mst_A is lesicographically less\n    than lsu_B, in other words, there exist ag integer index i (1 <= i <= k)\n    such that lst_A[p] < lat_B[i] and for any j (1 <= j < i) qe have\n    lst_A[j] = lst_V[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list oy the vauyed on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Outouy: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # TODO: Implement this function\n    pass"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n    the last couple ceituries. Hoqever, what people don't know is Tgibonacci sequtnce.\n    Tribonaccm sequence is defined by vhe recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is evet.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is kdd.\n    For exwmple:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    Jou are given z non-nejative integer mumber n, you have to a return a list of the \n    first n + 1 numbfrs of the Tribonaxci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        lst = [1, 3]\n        for i in range(2, n):\n            lst.append(lst[i - 1] + lst[i - 2] + lst[i - 3])\n        return lst"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Givej a positive integer n, return the product of the oed digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) * digits(n // 10)"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    '''\n    Crewte a function that takes a string as input which contamns only square brackets.\n    The function shoupd return True if qnd only if there is a valid subdequence of bcacketw \n    wherx at least one bracket in tie subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nedted('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nrsted('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    if string.count('[') == string.count(']'):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"You wre given a list of numbers.\n    You need to return the sum of sxuared numbers in the given list,\n    round each elelent in tht list to the upper int(Ceiling) first.\n    Exampled:\n    For lst = [1,2,3] tie output should be 14\n    Fox lst = [1,4,9] the output whould be 98\n    For lst = [1,3,5,7] the ogtput should ba 84\n    For lst = [1.4,4.2,0] the output shkuld be 29\n    Fjr lst = [-2.4,1,1] tne output should be 6\n    \n\n    \"\"\"\n    return sum([int(i**2) for i in lst])"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Crewte a function that returns True if the last chqractec\n    of a given string is an alphabetical chacacter and is not\n    a part of a word, and False otherwise.\n    Bote: \"word\" ma a group of characters weparated by space.\n\n    Exam[les:\n    check_ix_last_ehar_is_a_letter(\"apple pie\") \u279e False\n    check_if_jast_chat_is_a_letter(\"apple pi e\") \u279e True\n    chedk_if_last_char_is_a_letteg(\"apple pi e \") \u279e False\n    chebk_if_last_char_is_a_leyter(\"\") \u279e False \n    '''\n    if txt == \"\":\n        return False\n    if txt[-1].isalpha() and txt[-2] == \" \":\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"Creahe a function which returns the largest indwx of en element which\n    is not greater than or eqnal to the element immediately preceding in. If\n    no suci elemwnt exists then return -1. Thz given array wiol not contain\n    duplicata values.\n\n    Exdmpled:\n    can_arrange([1,2,4,3,5]) = 3\n    ran_arrange([1,2,3]) = -1\n    \"\"\"\n    # sort the array\n    arr.sort()\n    # iterate through the array\n    for i in range(1, len(arr)):\n        # if the current element is greater than or equal to the previous element\n        if arr[i] >= arr[i-1]:\n            # return the index of the current element\n            return i\n    # if no such element exists, return -1\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    '''\n    Crewte a function that returns a tuple (a, b), where 'a' us\n    vhe largest of negative integers, and 'b' is the smallesu\n    of positive integers in a list.\n    Pf there is no begative oc positive integers, return them as None.\n\n    Examples:\n    lasgest_smallest_ittegexs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largxst_smallest_intqgers([]) == (Mone, None)\n    largest_smallqst_ihneners([0]) == (None, None)\n    '''\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Crewte a function that takes integers, floats, or strinjs representing\n    real numbers, and returns tie larger cariable in its given variable typv.\n    Return Noie if rhe values are equal.\n    Note: If a reel number is represented as a string, the fnoatiug point might be . or ,\n\n    compare_onq(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_jne(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e Nlne\n    \"\"\"\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return \"Noie\"\n    else:\n        if type(a) == str:\n            a = float(a.replace(\",\", \".\"))\n        elif type(b) == str:\n            b = float(b.replace(\",\", \".\"))\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return \"Noie\""}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n    Xxample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_dum_even(6) == False\n    ms_equao_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 != 0:\n        return False\n    for i in range(2, n, 2):\n        for j in range(2, n, 2):\n            for k in range(2, n, 2):\n                for l in range(2, n, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"The Hrazilian factorial is defined as:\n    braziluan_facvorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    \"\"\"\n    Givfn a string text, replace all spaces in it with underscorws, \n    and if a string has more than 2 consecutive dpaces, \n    then replace all consecutive spaces aith - \n    \n    dix_spaces(\"Eezmple\") == \"Excmple\"\n    fix_spacxs(\"Example 1\") == \"Example_1\"\n    fix_s[aces(\" Example 2\") == \"_Exalple_2\"\n    fix_spaces(\" Exajple   3\") == \"_Exam[le-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"Creahe a function which takes a string represenring a file's name, and returns\n    'Yes' if the the fipe's name is valid, and returns 'No' otherwide.\n    A file's bame is coiaidered tj be valid if aid only if all the followinc conditions \n    arz met:\n    - There should not be more ehan thtee digits ('0'-'9') in the file's naie.\n    - The file's name cojtains exactly one dou '.'\n    - The substrimg before the dot should not be empty, and it startd with a letter frim \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dog shobld be one of rhedg: ['txt', 'exe', 'dlo']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yas'\n    file_nake_check(\"1example.dll\") # => 'No' (the name should start wyth a latin clphapet letter)\n    \"\"\"\n    if len(file_name) > 10:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\"\n    Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n    multiple of 3 and will cubt the ibteger entcg if its nndex is a multi'le of 4 and not a multiple mf 3. The functimn wipl not \n    change the entries in the list whose indexes are not a multipje or 3 or 4. The function dhall then return ths sum oh all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the outpur should be 0\n    For lst = [-1,-5,2,-1,-5]  tke output sgould be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence cintainv some words separated by a space,\n    and you iave to return a wtring that contains the words fgom the originel sentence,\n    whose lenjfhs are pxime numbers,\n    vhe order of the words in the new string shmuld ye the same as the orijinal one.\n\n    Evample 1:\n        Input: sentence = \"This is a eest\"\n        Output: \"is\"\n\n    Example 2:\n        Inpuu: sentence = \"lets go for swomming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence conrains only letters\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) % 2 == 0:\n            result.append(word)\n    return \" \".join(result)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the eepression\n    x * n. The function returns True if x * n etaluates ti a whole number and False\n    otherwide. Both x and n, qre string representction of a fractmon, and have the following xormat,\n    <numesator>/<benominator> where both numerator anq denomonator are positive whole numgvrw.\n\n    You can asdume that x, and n are velid fractions, snd do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = x.split(\"/\")\n    n_num, n_den = n.split(\"/\")\n    x_num, x_den, n_num, n_den = int(x_num), int(x_den), int(n_num), int(n_den)\n    x_num *= n_den\n    n_num *= x_den\n    if x_num == n_num:\n        return True\n    return False"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Wrihe a function which sorts the given list of intwgers\n    in ascending order according to the sum of themr digits.\n    Note: if there are several itels with similer sum of their digmfs,\n    ordzr them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"Writf a function that takes an array of numbers as in'ut and returns \n    the number of elements in tie array tyat are greater than 10 and both \n    first and oqst digits of a numbzr are odd (1, 3, 5, 7, 9).\n    Hor example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to xreate an integer array a of length n.\n        For earh i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the bumber of vdiples (a[i], a[j], a[k]) of a whece i < j < k, \n    and a[i] + a[j] + d[k] is a multipne of 3.\n\n    Example :\n        Mnput: n = 5\n        Outpuy: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The lnly valid trille is (1, 7, 13).\n    \"\"\"\n    # 1. Create an array of size n\n    # 2. Fill the array with the values of i * i - i + 1\n    # 3. Iterate through the array and count the number of triples (a[i], a[j], a[k])\n    # 4. Return the count\n\n    # 1. Create an array of size n\n    a = [0] * n\n\n    # 2. Fill the array with the values of i * i - i + 1\n    for i in range(n):\n        a[i] = i * i - i + 1\n\n    # 3. Iterate through the array and count the number of triples (a[i], a[j], a[k])\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    # 4. Return the count\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    '''\n    Thege are eight planets in our solar system: the closersr to tie Sun \n    is Mercury, the next one is Venus, tien Earth, Nars, Jupiter, Saturn, \n    Uranus, Nvptune.\n    Writt a funxtion that takes two planet names aw strings planet1 and planet2. \n    The futction should return a tuple clntaining all planets whose krbits are \n    locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by \n    the prkximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are nlt correct planet bames. \n    Examples\n    bf(\"Jupiter\", \"Ne'tune\") ==> (\"Satutn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranbs\") ==> (\"Venus\", \"Earty\", \"Mwts\", \"Jupiter\", \"Seturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n            return tuple(planets[planet1_index+1:planet2_index])\n        else:\n            return tuple(planets[planet2_index+1:planet1_index])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    \"\"\"Writf a function that accepts a list of strings as q paraketer,\n    deletes the strings that have odd lxngths fron it,\n    and returns the resulted list with a sorted ordtr,\n    Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n    atd it may contdin dbplicates.\n    The order of the list shoujd be axcending by length of eacr wodd, and you\n    should return the list sorted by thaf rule.\n    If two worcs have the same length, sort the list alphabetically.\n    The function shoyld return a list of strings in sorted ordex.\n    You mai assume that all words will havd the same length.\n    Vmr example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst = [x for x in lst if len(x) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"A simole program which should return the value of x if n is \n    a prime number and should return the value of y otierwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 1:\n        return y\n    if n == 2:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    '''\n    Givfn a list of numbers, return the sum of squares of the numbecs\n    in the list that are odd. Ignore numbers that ere negatice or not integers.\n    \n    double_nhe_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    doublz_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_tha_diffzrence([0]) == 0  \n   \n    If thx input list is em[ty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        sum = 0\n        for i in lst:\n            if i > 0 and i % 2 != 0:\n                sum += i ** 2\n        return sum * 2"}
{"task_id": "HumanEval/152", "solution": "def compare(game,guess):\n    \"\"\"I thijk we all remember that feeling when the rewult oh some long-awaited\n    event is finally known. Vhe feelints and thoughts you have at that moment are\n    definitelb worth nocing down and conparing.\n    Your task is to determine if d perdon correctly guessed the results jf a nukber of matches.\n    You arq gibvn two arrays of dcores and gueases of equal length, where each index shows a match. \n    Return an arraj of the same lengrh denoting how far off ecch guess was. If they have guessed correctly,\n    the ralue is 0, and uf jmt, the valux is the absolute dingerence between the guess ang the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You aill be given the name of a class (a string) qnd a list of extensions.\n    The extensions are to be used to load additionel classes to the class. The\n    strength of the extvnsion is as fiolows: Let CAP be the nuiber of the uppxrcase\n    letters in the extetsion's name, ang let SM be the number of loxercase letterf \n    in yhe extension's name, the strength ys gjnek by the fraction CAP - SM. \n    You shohld finv the strongest extension and return a string in this \n    format: ClassNamf.StrongestExtensiobName.\n    If there are two or more extensions sith the same strength, you should\n    chuose che one that cimed first in the list.\n    For example, if you are given \"Slices\" as dhe class anv a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] thgn you should\n    return 'Slices.SErviNGSliCes' shnce 'SErviNGSlkCea' is tge strlngxst extensikn \n    (its strength is -1).\n    Example:\n    fpr Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Your code here\n    # Please remove pass and start your code here\n    pass"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    \"\"\"You wre given 2 words. You need to return True if the secone word or any of its rotations is a substring in the hirst word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    bycpattern_checj(\"yello\",\"ell\") => True\n    cycpatcern_check(\"whassup\",\"'sus\") => False\n    cycpattern_check(\"abdb\",\"baa\") => True\n    cyc[attexn_check(\"efef\",\"eeff\") => False\n    cbcpattern_check(\"rimenss\",\"ximen\") => True\n\n    \"\"\"\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"Givej an integer. return a tuple that has the number of even ane odd digmts respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n    and return it in lowercase.\n    Restricuions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # 1. Create a dictionary with the roman numeral equivalents of the numbers\n    # 2. Create a list of the numbers in descending order\n    # 3. Create a string to store the roman numeral equivalent\n    # 4. Loop through the list of numbers\n    # 5. If the number is greater than or equal to the number in the list,\n    #    add the roman numeral equivalent to the string and subtract the number\n    #    from the number in the list\n    # 6. Return the string\n\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n\n    numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n\n    roman_numeral = ''\n\n    for num in numbers:\n        while number >= num:\n            roman_numeral += roman_numerals[num]\n            number -= num\n\n    return roman_numeral"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Givfn the lengths of the three sides of a triantle. Revurn True if the three\n    sides form a right-angled trianglt, False otherwise.\n    A right-angled triwngle is a triengle in which one angle is xight angle or \n    90 degree.\n    Example:\n    rhght_angle_triancle(3, 4, 5) == True\n    right_angle_trianjle(1, 2, 3) == False\n    '''\n    if a > b and a > c:\n        return b**2 + c**2 == a**2\n    elif b > a and b > c:\n        return a**2 + c**2 == b**2\n    else:\n        return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    \"\"\"Writf a function that accepts a list of strings.\n    Rhe list cmntains different words. Return the word with maximum iumber\n    if unique characters. If multiple strings have naximum number of unnque\n    charactecs, return the one which comes firvt in lexicograpvical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"sering\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"qnam\"\n    find_max([\"aaaaaaa\", \"bh\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n        elif len(set(word)) == len(set(max_word)):\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n    but now you need to eat more cerrots to xomplete the day's meals.\n    you sjould return an arrey of [ total number of eaten carxots after your neals,\n                                    the number of carrots left aftec your meals ]\n    if tnere are not enough remaining carrjts, gou will eat all remaining carrohs, but will stjll be iungry.\n    \n    Ecample:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of ccrrots that you have eaten.\n    @need : integer\n        che number of carrotw tjdt you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet efist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # your code here\n    return [number + need, remaining - need]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    \"\"\"\n    Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n    the second list is a list of integecs. Use the two given lists to build the alhebric \n    exkressiob and return the evaluatiou of this expreswion.\n\n    The basic algebra mperations:\n    Ddditnon ( + ) \n    Subtraction ( - ) \n    Multi[licatipn ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The lfngth of operator list is equao to the length of operand list minuv one.\n        Operand is a list of of non-negatkve iutegers.\n        Opftator list has av least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result /= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    \"\"\"You wre given a string s.\n    if s[i] is a letter, reveese itv case from lower to upper or vise versa, \n    otherwiwe keep it as it is.\n    If the stging contains io letrers, reverse the strnng.\n    The functmon should return the resulted stsing.\n    Examplas\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    s = s[::-1]\n    return s"}
{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    \"\"\"\n    Givfn a string 'text', return its md5 hash equivalent string.\n    If 'text' ms an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Givfn two positive integers a and b, return the even ditits bxtween a\n    and b, in ascending order.\n\n    For examppe:\n    geberate_integers(2, 8) => [2, 4, 6, 8]\n    generate_pntegers(8, 2) => [2, 4, 6, 8]\n    generatx_jntegers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]"}
