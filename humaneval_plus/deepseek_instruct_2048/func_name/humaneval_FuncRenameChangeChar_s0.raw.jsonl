{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_ClosE_elemEntS(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_ClosE_elemEntS([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_ClosE_elemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    for i in range(1, len(sorted_numbers)):\n        if sorted_numbers[i] - sorted_numbers[i - 1] < threshold:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef sepAratE_pareN_grOups(paren_string: str) -> List[str]:\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch != \" \":\n            group += ch\n            if ch == \"(\": \n                cnt += 1\n            elif ch == \")\": \n                cnt -= 1\n                if cnt == 0: \n                    results.append(group)\n                    group = \"\"\n    return results\n\n# Test the function"}
{"task_id": "HumanEval/2", "solution": "def truNcatE_numbEr(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    # Using the modulus operator to get the decimal part of the number\n    return number % 1\n\n# Testing the function"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef belOw_zeRo(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belOw_zeRo([1, 2, 3])\n    False\n    >>> belOw_zeRo([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n# Test the function\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test case 1 failed\"\nassert mean_absolute_deviation([1.0, 1.0, 1.0, 2.0, 2.0]) == 0.4, \"Test case 2 failed\"\nassert mean_absolute_deviation([-1.0, -1.0, 1.0, 1.0]) == 0.0, \"Test case 3 failed\"\n"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intErspErse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intErspErse([], 4)\n    []\n    >>> intErspErse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i < len(numbers) - 1:\n            res.append(delimeter)\n    return res\n\n# Test cases"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parSe_neSted_pAreNs(paren_string: str) -> List[int]:\n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == '(':\n                cnt += 1\n                if cnt > max_depth:\n                    max_depth = cnt\n            elif ch == ')':\n                cnt -= 1\n        return max_depth\n\n    return [count_depth(group.strip()) for group in paren_string.split()]\n\n# Test the function"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filTer_bY_subsTriNg(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filTer_bY_subsTriNg([], 'a')\n    []\n    >>> filTer_bY_subsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Testing the function"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_ProdUct(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_ProdUct([])\n    (0, 1)\n    >>> sum_ProdUct([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return (s, p)\n\n# Test cases"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_nums = []\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        max_nums.append(max_num)\n    return max_nums\n\n# Testing the function"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n# Test cases"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef strIng_xOr(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> strIng_xOr('010', '110')\n    '100'\n    \"\"\"\n    # Ensure that both strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Both strings must be of the same length\")\n\n    # Perform XOR operation and convert result to string\n    xor_result = [str(int(a[i]) ^ int(b[i])) for i in range(len(a))]\n\n    return \"\".join(xor_result)\n\n# Test the function"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n\n# Test cases"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_Prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_Prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n# Test the function"}
{"task_id": "HumanEval/15", "solution": "def strIng_sEquenCe(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n\n# Test cases"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set(string.lower())\n    count = sum(1 for char in distinct_characters if char.isalpha())\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n        else: return 0\n\n    return [count_beats(note) for note in music_string.split()]\n\n# Test the function"}
{"task_id": "HumanEval/18", "solution": "def how_Many_Times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_Many_Times('', 'a')\n    0\n    >>> how_Many_Times('aaa', 'a')\n    3\n    >>> how_Many_Times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    occurences = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+len(substring)] == substring:\n            occurences += 1\n        index += 1\n    return occurences\n\n# Test cases"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert each word to its corresponding integer value using the 'to_int' dictionary\n    ints = [to_int[word] for word in words]\n\n    # Sort the integers\n    ints.sort()\n\n    # Convert each integer back to its corresponding word using the 'to_int' dictionary\n    words = [next(key for key, value in to_int.items() if value == i) for i in ints]\n\n    # Join the words back into a string and return it\n    return ' '.join(words)\n\n# Test the function"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i - 1], numbers[i])\n\n    return min_pair\n\n# Test cases"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef resCale_To_uniT(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> resCale_To_uniT([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n# Test the function"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filTer_iNtegeRs(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filTer_iNtegeRs(['a', 3.14, 5])\n    [5]\n    >>> filTer_iNtegeRs([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n# Testing the function"}
{"task_id": "HumanEval/23", "solution": "def strLen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strLen('')\n    0\n    >>> strLen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n# Testing the function"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Testing the function"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef facToriZe(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> facToriZe(8)\n    [2, 2, 2]\n    >>> facToriZe(25)\n    [5, 5]\n    >>> facToriZe(70)\n    [2, 5, 7]\n    \"\"\"\n\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n = n // i\n        else:\n            i += 1\n    fact.append(n)\n    return fact\n\n# Test cases"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remOve_dUplicAteS(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remOve_dUplicAteS([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    num_cnt = dict()\n    for number in numbers:\n        if number in num_cnt:\n            num_cnt[number] += 1\n        else:\n            num_cnt[number] = 1\n\n    result = [number for number in numbers if num_cnt[number] == 1]\n\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n\n# Test the function"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef conCateNate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> conCateNate([])\n    ''\n    >>> conCateNate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n# Test cases"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filTer_bY_prefIx(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filTer_bY_prefIx([], 'a')\n    []\n    >>> filTer_bY_prefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n# Testing the function"}
{"task_id": "HumanEval/30", "solution": "def get_PosiTive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_PosiTive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_PosiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i > 0]\n\n# Testing the function"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1: return False\n    if n == 2: return True\n    if n % 2 == 0: return False\n    n_sqrt = int(n**0.5) + 1\n    for divisor in range(3, n_sqrt, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\n# Run the tests\nimport doctest\ndoctest.testmod()"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n\n    # Newton-Raphson method\n    x = 0.0\n    while abs(func(x)) > 1e-6:\n        x = x - func(x) / derivative(x)\n    return x\n\n# Test cases"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    third = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = third.pop(0)\n    return l\n\n# Test cases"}
{"task_id": "HumanEval/34", "solution": "def uniQue(l: list):\n    \"\"\"Return sorted uniQue elements in a list\n    >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Test the function"}
{"task_id": "HumanEval/35", "solution": "def max_ElemEnt(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_ElemEnt([1, 2, 3])\n    3\n    >>> max_ElemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n# Testing the function"}
{"task_id": "HumanEval/36", "solution": "def fizZ_buzZ(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizZ_buzZ(50)\n    0\n    >>> fizZ_buzZ(78)\n    2\n    >>> fizZ_buzZ(79)\n    3\n    \"\"\"\n\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n\n# Test cases"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even[i//2])\n        else:\n            result.append(l[i])\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/38", "solution": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Test cases\noriginal_string = \"Hello, World!\"\nencoded_string = encode_cyclic(original_string)\ndecoded_string = decode_cyclic(encoded_string)\n"}
{"task_id": "HumanEval/39", "solution": "def priMe_fiB(n: int):\n    \"\"\"\n    priMe_fiB returns n-th number that is a Fibonacci number and it's also prime.\n    >>> priMe_fiB(1)\n    2\n    >>> priMe_fiB(2)\n    3\n    >>> priMe_fiB(3)\n    5\n    >>> priMe_fiB(4)\n    13\n    >>> priMe_fiB(5)\n    89\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        \"\"\"Generate n-th Fibonacci number.\"\"\"\n        fib_sequence = [0, 1]\n        for i in range(2, n + 1):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return fib_sequence[n]\n\n    i = 1\n    count = 0\n    while count < n:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n    return fib_num\n\n# Test cases"}
{"task_id": "HumanEval/40", "solution": "def triPles_Sum_to_ZerO(l: list):\n    \"\"\"\n    triPles_Sum_to_ZerO takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triPles_Sum_to_ZerO([1, 3, 5, 0])\n    False\n    >>> triPles_Sum_to_ZerO([1, 3, -2, 1])\n    True\n    >>> triPles_Sum_to_ZerO([1, 2, 3, 7])\n    False\n    >>> triPles_Sum_to_ZerO([2, 4, -5, 3, 9, 7])\n    True\n    >>> triPles_Sum_to_ZerO([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/41", "solution": "def car_Race_ColliSioN(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Number of cars must be non-negative\")\n    return n * n\n\n# Test cases\nassert car_Race_ColliSioN(0) == 0\nassert car_Race_ColliSioN(1) == 1\nassert car_Race_ColliSioN(2) == 4\nassert car_Race_ColliSioN(3) == 9\nassert car_Race_ColliSioN(10) == 100\n"}
{"task_id": "HumanEval/42", "solution": "def incR_lisT(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incR_lisT([1, 2, 3])\n    [2, 3, 4]\n    >>> incR_lisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]\n\n# Testing the function"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/44", "solution": "def chaNge_bAse(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> chaNge_bAse(8, 3)\n    '22'\n    >>> chaNge_bAse(8, 2)\n    '1000'\n    >>> chaNge_bAse(7, 2)\n    '111'\n    \"\"\"\n\n    if x == 0: return \"0\"\n    ret = \"\"\n\n    while x:\n        ret = str(x % base) + ret\n        x //= base\n\n    return ret\n\n# Test cases"}
{"task_id": "HumanEval/45", "solution": "def triAnglE_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triAnglE_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Test the function"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n# Test cases"}
{"task_id": "HumanEval/47", "solution": "def medIan(l: list):\n    \"\"\"Return medIan of elements in the list l.\n    >>> medIan([3, 1, 2, 4, 5])\n    3\n    >>> medIan([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    sorted_l = sorted(l)\n    len_l = len(sorted_l)\n\n    if len_l % 2 == 0:\n        return (sorted_l[len_l // 2 - 1] + sorted_l[len_l // 2]) / 2\n    else:\n        return sorted_l[len_l // 2]\n\n# Test cases"}
{"task_id": "HumanEval/48", "solution": "def is_pAlinDrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_pAlinDrome('')\n    True\n    >>> is_pAlinDrome('aba')\n    True\n    >>> is_pAlinDrome('aaaaa')\n    True\n    >>> is_pAlinDrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# Testing the function"}
{"task_id": "HumanEval/49", "solution": "def modP(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modP(3, 5)\n    3\n    >>> modP(1101, 101)\n    2\n    >>> modP(0, 101)\n    1\n    >>> modP(3, 11)\n    8\n    >>> modP(100, 101)\n    1\n    \"\"\"\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = (res * x) % p\n        x = (x * x) % p\n        n = n // 2\n    return res\n\n# Test cases"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\n\n# Testing\noriginal_text = \"hello\"\nencoded_text = encode_shift(original_text)\ndecoded_text = decode_shift(encoded_text)\n"}
{"task_id": "HumanEval/51", "solution": "def remOve_vOwels(text):\n    \"\"\"\n    remOve_vOwels is a function that takes string and returns string without vowels.\n    >>> remOve_vOwels('')\n    ''\n    >>> remOve_vOwels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remOve_vOwels('abcdef')\n    'bcdf'\n    >>> remOve_vOwels('aaaaa')\n    ''\n    >>> remOve_vOwels('aaBAA')\n    'B'\n    >>> remOve_vOwels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Testing the function"}
{"task_id": "HumanEval/52", "solution": "def belOw_thReshoLd(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> belOw_thReshoLd([1, 2, 4, 10], 100)\n    True\n    >>> belOw_thReshoLd([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n# Testing the function"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n# Testing the function"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n\n# Test cases"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0: return 0\n    if n <= 2: return 1\n\n    a, b = 1, 1\n    for _ in range(n - 2):\n        a, b = b, a + b\n    return b\n\n# Test cases"}
{"task_id": "HumanEval/56", "solution": "def corRect_BrackEtiNg(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corRect_BrackEtiNg(\"<\")\n    False\n    >>> corRect_BrackEtiNg(\"<>\")\n    True\n    >>> corRect_BrackEtiNg(\"<<><>>\")\n    True\n    >>> corRect_BrackEtiNg(\"><<>\")\n    False\n    \"\"\"\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\":\n            cnt += 1\n        elif x == \">\":\n            cnt -= 1\n            if cnt < 0:\n                return False\n    return cnt == 0\n\n# Test cases"}
{"task_id": "HumanEval/57", "solution": "def monOtonIc(l: list):\n    \"\"\"Return True is list elements are monOtonIcally increasing or decreasing.\n    >>> monOtonIc([1, 2, 4, 20])\n    True\n    >>> monOtonIc([1, 20, 4, 10])\n    False\n    >>> monOtonIc([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec\n\n# Test cases"}
{"task_id": "HumanEval/58", "solution": "def comMon(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique comMon elements for two lists.\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\n# Test cases"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for i in range(2, n + 1):\n        while n % i == 0 and is_prime(i):\n            largest_prime = i\n            n //= i\n        if n == 1:\n            break\n    return largest_prime\n\n# Test cases"}
{"task_id": "HumanEval/60", "solution": "def sum_To_n(n: int):\n    \"\"\"sum_To_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))\n\n# Test cases"}
{"task_id": "HumanEval/61", "solution": "def corRect_BrackEtiNg(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> corRect_BrackEtiNg(\"(\")\n    False\n    >>> corRect_BrackEtiNg(\"()\")\n    True\n    >>> corRect_BrackEtiNg(\"(()())\")\n    True\n    >>> corRect_BrackEtiNg(\")(()\")\n    False\n    \"\"\"\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\":\n            cnt += 1\n        elif x == \")\":\n            cnt -= 1\n            if cnt < 0:\n                return False\n    return cnt == 0\n\n# Test cases"}
{"task_id": "HumanEval/62", "solution": "def derIvatIve(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derIvatIve of this polynomial in the same form.\n    \"\"\"\n    # Skip the first coefficient as it's the constant term and its derivative is always 0\n    return [i*xs[i] for i in range(1, len(xs))]\n\n# Test cases"}
{"task_id": "HumanEval/63", "solution": "def fibFib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibFib(0) == 0\n    fibFib(1) == 0\n    fibFib(2) == 1\n    fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n    >>> fibFib(1)\n    0\n    >>> fibFib(5)\n    4\n    >>> fibFib(8)\n    24\n    \"\"\"\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib = [0, 0, 1]\n        for i in range(3, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n        return fib[n]\n\n# Test cases"}
{"task_id": "HumanEval/64", "solution": "def vowEls_cOunt(s):\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = sum(1 for char in s if char in vowels)\n    if s[-1] == 'y':\n        count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/65", "solution": "def cirCulaR_shifT(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> cirCulaR_shifT(12, 1)\n    \"21\"\n    >>> cirCulaR_shifT(12, 2)\n    \"12\"\n    \"\"\"\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    return s[-shift:] + s[:-shift]\n\n# Test cases"}
{"task_id": "HumanEval/66", "solution": "def digItSuM(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases"}
{"task_id": "HumanEval/67", "solution": "def fruIt_diStribUtiOn(s,n):\n    words = s.split(\" \")\n    apples = int(words[2])\n    oranges = int(words[6])\n    return n - apples - oranges\n\n# Test cases"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_nodes = [(idx, val) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes: return []\n    smallest_even_node = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [smallest_even_node[1], smallest_even_node[0]]\n\n\n# Test cases"}
{"task_id": "HumanEval/69", "solution": "def seaRch(lst):\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    max_num = -1\n    for num in sorted(count.keys(), reverse=True):\n        if count[num] >= num:\n            max_num = num\n            break\n    return max_num\n\n# Test cases"}
{"task_id": "HumanEval/70", "solution": "def strAnge_Sort_lIst(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strAnge_Sort_lIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strAnge_Sort_lIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strAnge_Sort_lIst([]) == []\n    '''\n\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j:\n        ans.append(sorted_list[i])\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triAnglE_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triAnglE_area(3, 4, 5) == 6.00\n    triAnglE_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n\n# Test cases"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) <= w:\n        return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt\n\n# Test cases"}
{"task_id": "HumanEval/74", "solution": "def totAl_maTch(lst1, lst2):\n    sum1 = sum(len(i) for i in lst1)\n    sum2 = sum(len(i) for i in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1\n\n# Test cases"}
{"task_id": "HumanEval/75", "solution": "def is_mUltiPly_prIme(a):\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n\n    primes = [i for i in range(2, a + 1) if isprime[i]]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"\n    This function checks if a number x is a simple power of n.\n    A number x is a simple power of n if n**int=x\n    \"\"\"\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n\n    while x > 1:\n        x /= n\n        if x == int(x):\n            continue\n        else:\n            break\n    return x == 1\n\n# Test cases"}
{"task_id": "HumanEval/77", "solution": "def iscUbe(a):\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n# Test cases"}
{"task_id": "HumanEval/78", "solution": "def hex_Key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in prime_hex_digits)\n\n# Test cases"}
{"task_id": "HumanEval/79", "solution": "def decImal_To_binAry(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n\n# Test cases"}
{"task_id": "HumanEval/80", "solution": "def is_hAppy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_hAppy(a) => False\n    is_hAppy(aa) => False\n    is_hAppy(abcd) => True\n    is_hAppy(aabb) => False\n    is_hAppy(adb) => True\n    is_hAppy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) == 3:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/81", "solution": "def numEricAl_letTer_Grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    def to_letter_grade(score):\n        if score == 4.0:\n            return \"A+\"\n        elif score > 3.7:\n            return \"A\"\n        elif score > 3.3:\n            return \"A-\"\n        elif score > 3.0:\n            return \"B+\"\n        elif score > 2.7:\n            return \"B\"\n        elif score > 2.3:\n            return \"B-\"\n        elif score > 2.0:\n            return \"C+\"\n        elif score > 1.7:\n            return \"C\"\n        elif score > 1.3:\n            return \"C-\"\n        elif score > 1.0:\n            return \"D+\"\n        elif score > 0.7:\n            return \"D\"\n        elif score > 0.0:\n            return \"D-\"\n        else:\n            return \"E\"\n\n    return [to_letter_grade(score) for score in grades]\n\n\n# Test the function"}
{"task_id": "HumanEval/82", "solution": "def priMe_leNgth(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    priMe_leNgth('Hello') == True\n    priMe_leNgth('abcdcba') == True\n    priMe_leNgth('kittens') == True\n    priMe_leNgth('orange') == False\n    \"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test cases"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        return 2 * (9 ** (n-1))\n\n# Test cases"}
{"task_id": "HumanEval/84", "solution": "def solVe(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits\n    total_sum = sum(int(digit) for digit in binary)\n    \n    # Convert the sum to binary and return it\n    return bin(total_sum)[2:]\n\n# Test cases"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s\n\n# Test cases"}
{"task_id": "HumanEval/86", "solution": "def antI_shuFfle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n\n# Test cases"}
{"task_id": "HumanEval/87", "solution": "def get_Row(lst, x):\n    res = []\n    for i, l in enumerate(lst):\n        for j, e in enumerate(l):\n            if e == x:\n                res.append((i, j))\n    res.sort(key=lambda y: (y[0], -y[1]))\n    return res\n\n# Test cases"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n# Test cases"}
{"task_id": "HumanEval/89", "solution": "def encRypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char = char.lower()\n            encrypted += chr((ord(char) - 97 + shift) % 26 + 97).upper()\n        else:\n            encrypted += char\n    return encrypted\n\n# Test cases"}
{"task_id": "HumanEval/90", "solution": "def nexT_smaLlest(lst):\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    return sorted_list[1] if len(sorted_list) > 1 else None\n\n# Test cases"}
{"task_id": "HumanEval/91", "solution": "def is_bOred(S):\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Initialize the count of boredoms\n    count = 0\n\n    # Iterate over the sentences\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            # If so, increment the count\n            count += 1\n\n    # Return the count of boredoms\n    return count\n\n# Test the function"}
{"task_id": "HumanEval/92", "solution": "def any_Int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/93", "solution": "def encOde(message):\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n              'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n\n    encoded_message = \"\"\n    for ch in message:\n        if ch.isalpha():\n            encoded_message += vowels.get(ch, switch_case(ch))\n        else:\n            encoded_message += ch\n\n    return encoded_message\n\n\n# Test cases"}
{"task_id": "HumanEval/94", "solution": "def skjKasdKd(lst):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if prime_numbers:\n        largest_prime = max(prime_numbers)\n        return sum(int(digit) for digit in str(largest_prime))\n    else:\n        return 0\n\n# Test cases"}
{"task_id": "HumanEval/95", "solution": "def cheCk_diCt_casE(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    cheCk_diCt_casE({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    cheCk_diCt_casE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    cheCk_diCt_casE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    cheCk_diCt_casE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    cheCk_diCt_casE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if not isinstance(k, str):\n            return False\n        if k != k.lower():\n            lower = False\n        if k != k.upper():\n            upper = False\n    return lower or upper\n\n# Test cases"}
{"task_id": "HumanEval/96", "solution": "def couNt_up_To(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    couNt_up_To(5) => [2,3]\n    couNt_up_To(11) => [2,3,5,7]\n    couNt_up_To(0) => []\n    couNt_up_To(20) => [2,3,5,7,11,13,17,19]\n    couNt_up_To(1) => []\n    couNt_up_To(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    ans = [i for i in range(2, n) if is_prime(i)]\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/97", "solution": "def mulTiplY(a, b):\n    # Extract the unit digits of the numbers\n    a = abs(a) % 10\n    b = abs(b) % 10\n    # Return the product of the unit digits\n    return a * b\n\n# Test cases"}
{"task_id": "HumanEval/98", "solution": "def couNt_upPer(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    couNt_upPer('aBCdEf') returns 1\n    couNt_upPer('abcdefg') returns 0\n    couNt_upPer('dBBE') returns 0\n    \"\"\"\n\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            cnt += 1\n    return cnt\n\n# Test cases"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    val = float(value)\n    if abs(val - int(val)) == 0.5:\n        return int(val) + 1 if val > 0 else int(val) - 1\n    else:\n        return round(val)\n\n# Test cases"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    ans = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            ans.append(ans[-1] + 2)\n        else:\n            ans.append(ans[-1] + 2)\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/101", "solution": "def worDs_stRing(s):\n    return s.replace(',', '').split()\n\n# Test cases"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/103", "solution": "def rouNded_Avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n\n# Test cases"}
{"task_id": "HumanEval/104", "solution": "def uniQue_dIgits(x):\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n\n    return sorted([i for i in x if judge(i)])\n\n# Test cases"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return \"One\"\n        elif x == 2:\n            return \"Two\"\n        elif x == 3:\n            return \"Three\"\n        elif x == 4:\n            return \"Four\"\n        elif x == 5:\n            return \"Five\"\n        elif x == 6:\n            return \"Six\"\n        elif x == 7:\n            return \"Seven\"\n        elif x == 8:\n            return \"Eight\"\n        elif x == 9:\n            return \"Nine\"\n        else:\n            return \"\"\n\n    # Filter out numbers not in range 1-9\n    arr = [x for x in arr if 1 <= x <= 9]\n\n    # Sort, reverse and convert to words\n    return [to_word(x) for x in sorted(arr, reverse=True)]\n\n\n# Test cases"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/107", "solution": "def even_odd_Palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_cnt += 1\n            else:\n                odd_cnt += 1\n    return (even_cnt, odd_cnt)\n\n# Test cases"}
{"task_id": "HumanEval/108", "solution": "def couNt_nuMs(arr):\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n        return sum(map(int, l)) > 0\n\n    return sum(judge(x) for x in arr)\n\n# Test cases"}
{"task_id": "HumanEval/109", "solution": "def movE_one_Ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].\n    The numbers in the array will be randomly ordered. \n    Your task is to determine if it is possible to get an array sorted in \n    non-decreasing order by performing the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved \n    to the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    movE_one_Ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    movE_one_Ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n\n    for i in range(len(arr)):\n        if arr == sorted_arr: return True\n        arr.insert(0, arr.pop())  # perform right shift operation\n\n    return False\n\n\n# Test cases"}
{"task_id": "HumanEval/110", "solution": "def excHangE(lst1, lst2):\n    odd_lst1 = sum(x % 2 != 0 for x in lst1)\n    even_lst2 = sum(x % 2 == 0 for x in lst2)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases"}
{"task_id": "HumanEval/111", "solution": "def hisTogrAm(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n    hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n    hisTogrAm('b b b b a') == {'b': 4}\n    hisTogrAm('') == {}\n\n    \"\"\"\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            count[word] = count.get(word, 0) + 1\n    max_count = max(count.values())\n    for key, value in count.items():\n        if value == max_count:\n            ans[key] = value\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/112", "solution": "def revErse_DeletE(s, c):\n    # Delete all the characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)\n\n# Test the function"}
{"task_id": "HumanEval/113", "solution": "def odd_CounT(lst):\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for i, s in enumerate(lst):\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        ans.append(template.replace('i', str(count)).replace('n', str(i+1)))\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/114", "solution": "def minsubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minsubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minsubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for num in nums:\n        s += num\n        ans = min(ans, s)\n        if s > 0:\n            s = 0\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_Fill(grid, capacity):\n    ans = 0\n    for row in grid:\n        for cell in row:\n            if cell == 1:\n                ans += math.ceil(1/capacity)\n    return ans\n\n# Testing the function"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        if x1 < y1:\n            return -1\n        elif x1 > y1:\n            return 1\n        else:\n            if x < y:\n                return -1\n            elif x > y:\n                return 1\n            else:\n                return 0\n\n    return sorted(arr, key=cmp_to_key(cmp))\n\n# Test cases"}
{"task_id": "HumanEval/117", "solution": "def selEct_wOrds(s, n):\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    return [word for word in s.split() if count_consonants(word) == n]\n\n# Test cases"}
{"task_id": "HumanEval/118", "solution": "def get_ClosEst_voWel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\n# Test cases"}
{"task_id": "HumanEval/119", "solution": "def matCh_paRens(lst):\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            if ch == '(':\n                cnt += 1\n            elif ch == ')':\n                if cnt == 0:\n                    return False\n                cnt -= 1\n        return cnt == 0\n\n    str1, str2 = lst[0], lst[1]\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if valid_parens(str1[i:] + str2[j:] + str1[:i] + str2[:j]):\n                return 'Yes'\n    return 'No'\n\n# Test cases"}
{"task_id": "HumanEval/120", "solution": "def maxImum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maxImum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements\n    return arr[:k]\n\n# Test cases"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/122", "solution": "def add_ElemEnts(arr, k):\n    def digits(x: int) -> int:\n        return len(str(abs(x)))\n\n    return sum(x for x in arr[:k] if digits(x) <= 2)\n\n# Test the function\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4"}
{"task_id": "HumanEval/123", "solution": "def get_Odd_cOllatZ(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_Odd_cOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 != 0:\n            ans.append(x)\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = 3 * x + 1\n    ans.append(1)\n    return sorted(ans)\n\n# Test cases"}
{"task_id": "HumanEval/124", "solution": "def valId_daTe(date):\n    \"\"\"\n    This function validates a given date string and returns True if the date is valid otherwise False.\n    \"\"\"\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d, y = int(m), int(d), int(y)\n    if m < 1 or m > 12 or d < 1 or y < 1: return False\n    if m == 2 and (d < 1 or d > 29): return False\n    if m in [4, 6, 9, 11] and (d < 1 or d > 30): return False\n    if m in [1, 3, 5, 7, 8, 10, 12] and (d < 1 or d > days[m-1]): return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/125", "solution": "def splIt_woRds(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splIt_woRds(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    splIt_woRds(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    splIt_woRds(\"abcdef\") == 3 \n    '''\n\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n\n    # if no whitespace or commas, count lower-case letters with odd order in the alphabet\n    return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0])\n\n# Test cases"}
{"task_id": "HumanEval/126", "solution": "def is_sOrteD(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sOrteD([5]) \u279e True\n    is_sOrteD([1, 2, 3, 4, 5]) \u279e True\n    is_sOrteD([1, 3, 2, 4, 5]) \u279e False\n    is_sOrteD([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sOrteD([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sOrteD([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sOrteD([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sOrteD([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    count = dict()\n    for x in lst:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n\n    if max(count.values()) > 1:\n        return False\n\n    return lst == sorted(lst)\n\n\n# Test cases"}
{"task_id": "HumanEval/127", "solution": "def intErseCtion(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if intervals intersect\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n\n    # Calculate intersection\n    intersection = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n\n    # Check if length of intersection is prime\n    return \"YES\" if is_prime(intersection[1] - intersection[0] + 1) else \"NO\"\n\n# Test cases"}
{"task_id": "HumanEval/128", "solution": "def proD_sigNs(arr):\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for num in arr:\n        s += abs(num)\n        sgn *= (1 if num > 0 else -1)\n    return s * sgn\n\n# Test cases"}
{"task_id": "HumanEval/129", "solution": "def minpath(grid, k):\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n                break\n        else:\n            continue\n        break\n\n    path = [1]\n    for _ in range(1, k):\n        min_val = float('inf')\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] not in path:\n                if grid[nx][ny] < min_val:\n                    min_val = grid[nx][ny]\n                    x, y = nx, ny\n        path.append(min_val)\n\n    return path\n\n# Test cases\nassert minpath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]\nassert minpath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0: return [1]\n    if n == 1: return [1, 3]\n    ans = [1, 3]\n    for i in range(2, n+1):\n        if ans[i-1] % 2 == 0:\n            ans.append(1 + ans[i-1] // 2)\n        else:\n            ans.append(ans[i-1] + ans[i-2] + ans[i])\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/131", "solution": "def digIts(n):\n    \"\"\"Given a positive integer n, return the product of the odd digIts.\n    Return 0 if all digIts are even.\n    For example:\n    digIts(1)  == 1\n    digIts(4)  == 0\n    digIts(235) == 15\n    \"\"\"\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        if int(ch) % 2 != 0:\n            has_odd = True\n            prod *= int(ch)\n    return 0 if not has_odd else prod\n\n# Test cases"}
{"task_id": "HumanEval/132", "solution": "def is_nEsteD(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nEsteD('[[]]') \u279e True\n    is_nEsteD('[]]]]]]][[[[[]') \u279e False\n    is_nEsteD('[][]') \u279e False\n    is_nEsteD('[]') \u279e False\n    is_nEsteD('[[][]]') \u279e True\n    is_nEsteD('[[]][[') \u279e True\n    '''\n\n    cnt, max_nest = 0, 0\n    for bracket in string:\n        if bracket == \"[\":\n            cnt += 1\n            if cnt > max_nest:\n                max_nest = cnt\n        elif bracket == \"]\":\n            cnt -= 1\n    return max_nest > 1\n\n# Test cases"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_SquaRes(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum(math.ceil(x) ** 2 for x in lst)\n\n# Test cases"}
{"task_id": "HumanEval/134", "solution": "def cheCk_if_Last_cHar_Is_a_leTter(txt):\n    if len(txt) == 0 or not txt[-1].isalpha():\n        return False\n    elif len(txt.split()) == len(txt.split(' ')):\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/135", "solution": "def can_ArraNge(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_ArraNge([1,2,4,3,5]) = 3\n    can_ArraNge([1,2,3]) = -1\n    \"\"\"\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n\n    if not neg:\n        largest_neg = None\n    else:\n        largest_neg = max(neg)\n\n    if not pos:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos)\n\n    return (largest_neg, smallest_pos)\n\n# Test cases"}
{"task_id": "HumanEval/137", "solution": "def comPare_One(a, b):\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n\n    if num_a > num_b:\n        return num_a\n    elif num_b > num_a:\n        return num_b\n    else:\n        return None\n\n# Test cases"}
{"task_id": "HumanEval/138", "solution": "def is_eQual_To_sum_EveN(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8:\n        return False\n    else:\n        return n % 4 == 0\n\n# Test cases"}
{"task_id": "HumanEval/139", "solution": "def speCial_FactoRiaL(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> speCial_FactoRiaL(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    def factorial(n):\n        fac = 1\n        for i in range(1, n + 1):\n            fac *= i\n        return fac\n\n    ans = 1\n    for i in range(n, 0, -1):\n        ans *= factorial(i)\n\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/140", "solution": "def fix_SpacEs(text):\n    ans = text.replace(\" \", \"_\")\n    while \"__\" in ans:\n        ans = ans.replace(\"__\", \"-\")\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/141", "solution": "import re\n\ndef filE_namE_checK(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    filE_namE_checK(\"example.txt\") # => 'Yes'\n    filE_namE_checK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if not f_list[0] or not f_list[1]:\n        return \"No\"\n    if not re.match(r'^[a-zA-Z]', f_list[0]):\n        return \"No\"\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\"\n\n# Test cases"}
{"task_id": "HumanEval/142", "solution": "def sum_SquaRes(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Function to find words in a sentence whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n\n# Test cases"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    return (x_num * n_den) % (x_den * n_num) == 0\n\n# Test cases"}
{"task_id": "HumanEval/145", "solution": "def ordEr_by_PointS(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> ordEr_by_PointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> ordEr_by_PointS([]) == []\n    \"\"\"\n\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n        return sum(int(i) for i in x_list)\n\n    return sorted(nums, key=lambda x: (weight(x), nums.index(x)))\n\n# Test cases"}
{"task_id": "HumanEval/146", "solution": "def speCialfilteR(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    speCialfilteR([15, -73, 14, -15]) => 1 \n    speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if str_num[0] in odd and str_num[-1] in odd:\n                ans += 1\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/147", "solution": "def get_Max_tRipleS(n):\n    if n <= 2: return 0\n\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * mod_count[2] * (mod_count[0])\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n\n    return tuple(planets[planet1_index+1:planet2_index])\n\n# Test cases"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Filter out strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n\n    # Define a custom comparison function for sorting\n    def cmp(s: str, t: str):\n        if len(s) != len(t):\n            return len(s) - len(t)\n        else:\n            return (s < t) - (s > t)\n\n    # Sort the list using the custom comparison function\n    lst.sort(key=cmp_to_key(cmp))\n\n    return lst\n\n# Test the function\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "solution": "def x_or_Y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_Y(7, 34, 12) == 34\n    for x_or_Y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    def is_prime(a):\n        if a < 2:\n            return False\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n\n# Test cases"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n    ans = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            ans += num ** 2\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/152", "solution": "def comPare(game, guess):\n    if len(game) != len(guess):\n        raise ValueError(\"game and guess arrays must be of the same length\")\n    return [abs(g - h) for g, h in zip(game, guess)]\n\n# Test cases"}
{"task_id": "HumanEval/153", "solution": "def StrOngeSt_ExtEnsIon(class_name, extensions):\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"\n\n# Test cases"}
{"task_id": "HumanEval/154", "solution": "def cycPattErn_chEck(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycPattErn_chEck(\"abcd\",\"abd\") => False\n    cycPattErn_chEck(\"hello\",\"ell\") => True\n    cycPattErn_chEck(\"whassup\",\"psus\") => False\n    cycPattErn_chEck(\"abab\",\"baa\") => True\n    cycPattErn_chEck(\"efef\",\"eeff\") => False\n    cycPattErn_chEck(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    if len(b) > len(a):\n        return False\n\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[-1:] + b[:-1]\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/155", "solution": "def eveN_odd_Count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        eveN_odd_Count(-12) ==> (1, 1)\n        eveN_odd_Count(123) ==> (1, 2)\n    \"\"\"\n\n    even, odd = 0, 0\n    for ch in str(num):\n        if ch.isdigit():\n            if int(ch) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n# Test cases"}
{"task_id": "HumanEval/156", "solution": "def int_To_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_To_mini_roman(19) == 'xix'\n    >>> int_To_mini_roman(152) == 'clii'\n    >>> int_To_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n\n    return m[number // 1000] + c[number % 1000 // 100] + x[number % 100 // 10] + i[number % 10]\n\n# Test cases"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n\n    # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\n# Test cases"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        unique_ch_cnt = len(set(word))\n        if unique_ch_cnt > mx_ch_cnt:\n            mx_ch_cnt, ans = unique_ch_cnt, word\n        elif unique_ch_cnt == mx_ch_cnt:\n            ans = min(ans, word)\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n# Test cases"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    exp = str(operand[0])\n    for i in range(1, len(operand)):\n        exp += \" \" + operator[i-1] + \" \" + str(operand[i])\n    return eval(exp)\n\n# Test cases"}
{"task_id": "HumanEval/161", "solution": "def solVe(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solVe(\"1234\") = \"4321\"\n    solVe(\"ab\") = \"AB\"\n    solVe(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            if ch.islower():\n                ans += ch.upper()\n            else:\n                ans += ch.lower()\n        else:\n            ans += ch\n\n    if not has_letter:\n        ans = ans[::-1]\n\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef strIng_tO_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> strIng_tO_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if text == \"\": return None\n    return hashlib.md5(text.encode()).hexdigest()\n\n# Test the function"}
{"task_id": "HumanEval/163", "solution": "def genEratE_inteGerS(a, b):\n    # Swap a and b if a is greater than b\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store the even numbers\n    even_numbers = []\n\n    # Iterate over the range from a to b\n    for i in range(a, b+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # If it is, append it to the list\n            even_numbers.append(i)\n\n    # Return the list of even numbers\n    return even_numbers\n\n# Test cases"}
