{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(oOD2jfc: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    oOD2jfc.sort()\n    for idx in range(1, len(oOD2jfc)):\n        if oOD2jfc[idx] - oOD2jfc[idx - 1] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n    for I in paren_string:\n        if I == \"(\":\n            current_depth += 1\n            current_string.append(I)\n        elif I == \")\":\n            current_depth -= 1\n            current_string.append(I)\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string = []\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    # Using the modulus operator to get the decimal part of the number\n    return number % 1"}
{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(bEDLbd2: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(bEDLbd2) / len(bEDLbd2)\n    mad = sum(abs(x - mean) for x in bEDLbd2) / len(bEDLbd2)\n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    interspersed = []\n    for n in numbers[:-1]:\n        interspersed.extend([n, delimeter])\n    interspersed.append(numbers[-1])\n    return interspersed"}
{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif c == \")\":\n                depth -= 1\n        return max_depth\n\n    return [parse_paren_group(group.strip()) for group in paren_string.split()]"}
{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    product_value = 1\n    for num in numbers:\n        sum_value += num\n        product_value *= num\n    return (sum_value, product_value)"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_num = None\n    result = []\n    for n in numbers:\n        if max_num is None or n > max_num:\n            max_num = n\n        result.append(max_num)\n    return result"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(s: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not s:\n        return \"\"\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]"}
{"task_id": "HumanEval/11", "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, Y):\n        if i == Y:\n            return \"0\"\n        else:\n            return \"1\"\n\n    return \"\".join(xor(i, Y) for i, Y in zip(a, b))"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(input_list: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not input_list:\n        return None\n    return max(input_list, key=len)"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(kY8IF2: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(1, len(kY8IF2) + 1):\n        result.append(kY8IF2[:i])\n    return result"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split()\n    beats = [note_map[note] for note in notes]\n    return beats"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n    return times"}
{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n\n    number_list = numbers.split()\n    sorted_list = sorted(number_list, key=lambda x: value_map[x])\n    return ' '.join(sorted_list)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None or abs(elem - elem2) < distance:\n                    distance = abs(elem - elem2)\n                    closest_pair = (min(elem, elem2), max(elem, elem2))\n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    range_of_numbers = max_number - min_number\n\n    return [(num - min_number) / range_of_numbers for num in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for E in reversed(range(n)):\n        if n % E == 0:\n            return E"}
{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(m: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(m) + 1):\n        if m % i == 0:\n            fact.append(i)\n            m //= i\n        else:\n            i += 1\n    fact.append(m)\n    return fact"}
{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(nums: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    counts = {}\n    result = []\n    for num in nums:\n        if num not in counts:\n            counts[num] = 1\n            result.append(num)\n        else:\n            counts[num] += 1\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(Y):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if Y < 2:\n        return False\n    for k in range(2, int(Y ** 0.5) + 1):\n        if Y % k == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    R969c, end = -1.0, 1.0\n    while poly(xs, R969c) * poly(xs, end) > 0:\n        R969c *= 2.0\n        end *= 2.0\n    while end - R969c > 1e-10:\n        mid = (R969c + end) / 2.0\n        if poly(xs, mid) > 0:\n            end = mid\n        else:\n            R969c = mid\n    return R969c"}
{"task_id": "HumanEval/33", "solution": "def sort_third(r: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    r = list(r)\n    divisible_by_three = [r[i] for i in range(len(r)) if i % 3 == 0]\n    divisible_by_three.sort()\n    for i in range(len(r)):\n        if i % 3 == 0:\n            r[i] = divisible_by_three[i // 3]\n    return r"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    U = l[0]\n    for e in l:\n        if e > U:\n            U = e\n    return U"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for x in range(n):\n        if (x % 11 == 0 or x % 13 == 0):\n            count += str(x).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    xHd3E = l[::2]\n    odds = l[1::2]\n    xHd3E.sort()\n    ans = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            ans.append(xHd3E.pop(0))\n        else:\n            ans.append(odds[i//2])\n    return ans"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    def is_fib(n):\n        x = 0\n        y = 1\n        while y < n:\n            z = x + y\n            x = y\n            y = z\n        return y == n\n\n    i = 1\n    count = 0\n    while count < n:\n        if is_prime(i) and is_fib(i):\n            count += 1\n        i += 1\n    return i - 1"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(U: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(U)):\n        for j in range(i + 1, len(U)):\n            for k in range(j + 1, len(U)):\n                if U[i] + U[j] + U[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(Z):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(Z):\n        for j in range(i + 1, len(Z)):\n            if l1 + Z[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(R: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while R > 0:\n        ret = str(R % base) + ret\n        R = R // base\n    return ret"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    Eb09ob1 = [0, 0, 2, 0]\n    if n < 4:\n        return Eb09ob1[n]\n    else:\n        for i in range(4, n+1):\n            Eb09ob1.append(Eb09ob1[i-1] + Eb09ob1[i-2] + Eb09ob1[i-3] + Eb09ob1[i-4])\n        return Eb09ob1[n]"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(s: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(s) // 2):\n        if s[i] != s[-1 - i]:\n            return False\n    return True"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    QRf = 1\n    for i in range(n):\n        QRf = (QRf * 2) % p\n    return QRf"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for v in l:\n        if v >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    count = 0\n    for b in brackets:\n        if b == \"<\":\n            count += 1\n        elif b == \">\":\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l2: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l2 == sorted(l2) or l2 == sorted(l2, reverse=True)"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        if e1 in l2:\n            ret.add(e1)\n    return sorted(list(ret))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k):\n            if k % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for i in range(2, n):\n        while n % i == 0:\n            if is_prime(i):\n                largest_prime = i\n            n = n / i\n        if n == 1:\n            break\n    return largest_prime"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    count = 0\n    for b in brackets:\n        if b == \"(\":\n            count += 1\n        elif b == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Skip the first coefficient as it's the constant term and its derivative is always 0\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(D: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if D == 0:\n        return 0\n    if D == 1:\n        return 0\n    if D == 2:\n        return 1\n    fibfib_sequence = [0, 0, 1]\n    for i in range(3, D+1):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n    return fibfib_sequence[D]"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(H):\n    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in H)\n    if H.endswith('y') or H.endswith('Y'):\n        n_vowels += 1\n    return n_vowels"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    J = str(x)\n    if shift > len(J):\n        return J[::-1]\n    else:\n        return J[-shift:] + J[:-shift]"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    else:\n        return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for b in s.split(\" \"):\n        if b.isdigit():\n            lis.append(int(b))\n    return n - sum(lis)"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    if len(arr) == 0:\n        return []\n    even_arr = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if len(even_arr) == 0:\n        return []\n    smallest_even = min(even_arr, key=lambda x: (x[1], x[0]))\n    return [smallest_even[1], smallest_even[0]]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for d in lst:\n        frq[d] += 1\n    ans = -1\n    for i in range(len(frq) - 1, 0, -1):\n        if frq[i] >= i:\n            ans = i\n            break\n    return ans"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(hg8):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while hg8:\n        res.append(min(hg8) if switch else max(hg8))\n        hg8.remove(res[-1])\n        switch = not switch\n    return res"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, A):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= A or a + A <= b or b + A <= a:\n        return -1\n    s = (a + b + A) / 2\n    area = (s*(s-a)*(s-b)*(s-A)) ** 0.5\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(r, w):\n    if sum(r) > w:\n        return False\n    i, j = 0, len(r) - 1\n    while i < j:\n        if r[i] != r[j]:\n            return False\n        i += 1\n        j -= 1\n    return True"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    l1 = sum(len(i4) for i4 in lst1)\n    l2 = sum(len(i4) for i4 in lst2)\n    if l1 < l2:\n        return lst1\n    elif l2 < l1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for R in range(2, n):\n            if n % R == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 101) if is_prime(i)]\n    factors = []\n\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a = a / prime\n\n    return len(factors) == 3 and a == 1"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"\n    This function checks if a number x is a simple power of n.\n    \"\"\"\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n        if x.is_integer():\n            return True\n    return False"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    a = abs(a)\n    return round(a ** (1. / 3)) ** 3 == a"}
{"task_id": "HumanEval/78", "solution": "def hex_key(K6A):\n    \"\"\"\n    This function receives a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    for i in range(0, len(K6A)):\n        if K6A[i] in primes:\n            total += 1\n    return total"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "solution": "def is_happy(u):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(u) < 3:\n        return False\n    for i in range(len(u) - 2):\n        if len(set(u[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    g = len(string)\n    if g == 0 or g == 1:\n        return False\n    else:\n        for i in range(2, g):\n            if g % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 * (10 ** (n - 2))"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits\n    total_sum = sum(int(digit) for digit in binary)\n    \n    # Convert the sum to binary and return it\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, M):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == M\n    ]\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for J in s:\n        if J in d:\n            out += d[(d.index(J) + 2*2) % 26]\n        else:\n            out += J\n    return out"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(X5U):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    X5U = sorted(set(X5U))\n    if len(X5U) < 2:\n        return None\n    else:\n        return X5U[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n\n    # Split the string into sentences using regular expressions\n    sentences = re.split('[.!?]', S)\n\n    # Initialize the count of boredoms\n    count = 0\n\n    # Iterate over the sentences\n    for sentence in sentences:\n        # Remove leading and trailing spaces\n        sentence = sentence.strip()\n\n        # Check if the sentence starts with \"I\"\n        if len(sentence) > 0 and sentence[0] == 'I':\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/92", "solution": "def any_int(H, y, z):\n    if isinstance(H, int) and isinstance(y, int) and isinstance(z, int):\n        if (H + y == z) or (H + z == y) or (y + z == H):\n            return True\n    return False"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(X, chr(ord(X) + 2)) for X in vowels])\n    encoded_message = \"\"\n    for char in message:\n        if char in vowels:\n            encoded_message += vowels_replace[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for z in range(2, int(n ** 0.5) + 1):\n            if n % z == 0:\n                return False\n        return True\n\n    maxx = 0\n    for num in lst:\n        if isPrime(num) and num > maxx:\n            maxx = num\n\n    return sum(int(digit) for digit in str(maxx))"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dictionary):\n    if len(dictionary.keys()) == 0:\n        return False\n    else:\n        case_check = \"start\"\n        for key in dictionary.keys():\n            if not isinstance(key, str):\n                case_check = \"mixed\"\n                break\n            if case_check == \"start\":\n                if key.isupper():\n                    case_check = \"upper\"\n                elif key.islower():\n                    case_check = \"lower\"\n                else:\n                    case_check = \"mixed\"\n                    break\n            elif case_check == \"upper\" and not key.isupper():\n                case_check = \"mixed\"\n                break\n            elif case_check == \"lower\" and not key.islower():\n                case_check = \"mixed\"\n                break\n        if case_check == \"mixed\":\n            return False\n        else:\n            return True"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for F in range(2, n):\n        is_prime = True\n        for j in range(2, F):\n            if F % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(F)\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Extract the unit digits of the numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(u02I5):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if u02I5.count(\".\") == 1:\n        # remove trailing zeros\n        while u02I5[-1] == \"0\":\n            u02I5 = u02I5[:-1]\n    num = float(u02I5)\n    if u02I5[-2:] == \".5\":\n        if num > 0:\n            return ceil(num)\n        else:\n            return floor(num)\n    else:\n        return round(num)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i)\n    return stones"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    return s.replace(',', '').split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, j):\n    if x > j:\n        return -1\n    if j % 2 == 0:\n        return j\n    else:\n        return j - 1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    Q5952b7416Z9nz31v4 = []\n    for i in x:\n        if not any(int(digit) % 2 == 0 for digit in str(i)):\n            Q5952b7416Z9nz31v4.append(i)\n    return sorted(Q5952b7416Z9nz31v4)"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Create a dictionary to map numbers to their names\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Filter the array to only include numbers between 1 and 9\n    arr = [i for i in arr if 1 <= i <= 9]\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Replace each number in the array with its corresponding name\n    arr = [dic[i] for i in arr]\n\n    return arr"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            ret.append(factorial(i))\n        else:\n            ret.append(sum_to_n(i))\n    return ret"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return (even_palindrome_count, odd_palindrome_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    def digits_sum(j):\n        neg = 1\n        if j < 0:\n            j, neg = -1 * j, -1\n        return sum(int(digit) * neg for digit in str(j))\n\n    return sum(digits_sum(num) > 0 for num in arr)"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    \"\"\"\n    This function checks if it is possible to sort an array by performing\n    right shift operation on it.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    sorted_array = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_array:\n            return True\n        arr.insert(0, arr.pop())  # perform right shift operation\n    return False"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"\n    This function takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    \"\"\"\n    odd = 0\n    even = 0\n    for A in lst1:\n        if A % 2 == 1:\n            odd += 1\n    for A in lst2:\n        if A % 2 == 0:\n            even += 1\n    if odd <= even:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for E in list1:\n        if (list1.count(E) > t) and E != \"\":\n            t = list1.count(E)\n    for E in list1:\n        if list1.count(E) == t and E != \"\":\n            dict1[E] = t\n    return dict1"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    t = \"\".join([char for char in s if char not in c])\n    return (t, t == t[::-1])"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        count = sum(1 for char in arr if int(char) % 2 != 0)\n        res.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return res"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = 0\n    s = 0\n    for num in nums:\n        s += num\n        if s < min_sum:\n            min_sum = s\n        if s > 0:\n            s = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    import math\n    # Flatten the grid and count the number of 1s\n    flat_grid = [item for sublist in grid for item in sublist]\n    total_wells = sum(flat_grid)\n\n    # Calculate the number of buckets needed\n    buckets_needed = math.ceil(total_wells / capacity)\n\n    return buckets_needed"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda n: (count_ones(n), n))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    def check(s):\n        u11 = 0\n        for i in s:\n            if i == \"(\":\n                u11 = u11 + 1\n            else:\n                u11 = u11 - 1\n            if u11 < 0:\n                return False\n        return u11 == 0\n\n    s1, s2 = lst\n    return 'Yes' if check(s1 + s2) or check(s2 + s1) else 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    else:\n        return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # If the number of digits in the current element is at most 2, add it to the sum\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n\n    return total_sum\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(P):\n    if P % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [P]\n    while P > 1:\n        if P % 2 == 0:\n            P = P / 2\n        else:\n            P = 3 * P + 1\n            if P % 2 != 0:\n                odd_collatz.append(int(P))\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = map(int, date.split(\"-\"))\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        else:\n            return False\n\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "solution": "def split_words(aYM):\n    if \" \" in aYM:\n        return aYM.split()\n    elif \",\" in aYM:\n        return aYM.split(\",\")\n    else:\n        return sum(1 for c in aYM if c.islower() and (ord(c) - ord('a')) % 2 != 0)"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(G, 0) for G in lst])\n    for G in lst:\n        count_digit[G] += 1\n    if any(count_digit[G] > 2 for G in lst):\n        return False\n    return lst == sorted(lst)"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    return \"YES\" if is_prime(end - start + 1) else \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num < 0:\n            product_signs *= -1\n    return sum_magnitudes * product_signs"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for u in range(n):\n        for j in range(n):\n            if grid[u][j] == 1:\n                temp = []\n                if u != 0:\n                    temp.append(grid[u - 1][j])\n                if j != 0:\n                    temp.append(grid[u][j - 1])\n                if u != n - 1:\n                    temp.append(grid[u + 1][j])\n                if j != n - 1:\n                    temp.append(grid[u][j + 1])\n                temp.sort()\n                grid[u][j] = temp[k - 1]\n    return [grid[i][j] for i in range(n) for j in range(n) if grid[i][j] != val]"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        D410MH = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                D410MH.append(1 + i // 2)\n            else:\n                D410MH.append(D410MH[-1] + D410MH[-2] + D410MH[-3])\n        return D410MH"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            product *= int_digit\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for M in range(len(string)):\n        if string[M] == \"[\":\n            opening_bracket_index.append(M)\n        else:\n            closing_bracket_index.append(M)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(closing_bracket_index)):\n        if closing_bracket_index[i] in opening_bracket_index[cnt:]:\n            cnt += 1\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    import math\n    return sum(math.ceil(x) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1] == ' ':\n        return False\n    return txt[-1].isalpha() and txt[-2] == ' '"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    z = 1\n    while z < len(arr):\n        if arr[z] < arr[z-1]:\n            ind = z\n        z += 1\n    return ind - 1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n\n    if not negatives:\n        largest_negative = None\n    else:\n        largest_negative = max(negatives)\n\n    if not positives:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positives)\n\n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n        temp_a = float(temp_a)\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n        temp_b = float(temp_b)\n\n    if temp_a > temp_b:\n        return a if isinstance(a, (int, float)) else b\n    elif temp_b > temp_a:\n        return b if isinstance(b, (int, float)) else a\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 10:\n        return False\n    else:\n        return n % 4 == 0"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    F46eV009b8zH = 1\n    for i in range(1, n + 1):\n        fact_i *= i\n        F46eV009b8zH *= fact_i\n    return F46eV009b8zH"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    new_text = \"\"\n    start, end = 0, 0\n    for K in range(len(text)):\n        if text[K] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[K]\n            elif end - start > 0:\n                new_text += \"_\" + text[K]\n            else:\n                new_text += text[K]\n            start = K + 1\n            end = K + 1\n    return new_text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    YAx = file_name.split(sep=\".\")\n    if len(YAx) != 2:\n        return \"No\"\n    if not YAx[1] in suf:\n        return \"No\"\n    if len(YAx[0]) == 0:\n        return \"No\"\n    if not YAx[0][0].isalpha():\n        return \"No\"\n    if sum(c.isdigit() for c in YAx[0]) > 3:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    result = 0\n    for Q in range(len(lst)):\n        if Q % 3 == 0:\n            result += lst[Q] ** 2\n        elif Q % 4 == 0:\n            result += lst[Q] ** 3\n        else:\n            result += lst[Q]\n    return result"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    new_lst = []\n    for word in sentence.split():\n        if is_prime(len(word)):\n            new_lst.append(word)\n    return ' '.join(new_lst)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    a, b = map(int, x.split(\"/\"))\n    c, d = map(int, n.split(\"/\"))\n    return a * c % b * d == 0"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(M):\n        neg = 1\n        if M < 0:\n            M, neg = -1 * M, -1\n        return sum(map(int, str(M))) * neg\n\n    return sorted(nums, key=lambda x: (digits_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))  # convert to string to easily access digits\n            if int(str_num[0]) in (1, 3, 5, 7, 9) and int(str_num[-1]) in (1, 3, 5, 7, 9):\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    A = [i2 * i2 - i2 + 1 for i2 in range(1, n + 1)]\n    ans = []\n    for i2 in range(n):\n        for j in range(i2 + 1, n):\n            for k in range(j + 1, n):\n                if (A[i2] + A[j] + A[k]) % 3 == 0:\n                    ans.append((A[i2], A[j], A[k]))\n    return len(ans)"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    solar_system = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in solar_system or planet2 not in solar_system or planet1 == planet2:\n        return ()\n    planet1_index = solar_system.index(planet1)\n    planet2_index = solar_system.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return solar_system[planet1_index+1:planet2_index]"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst = [g for g in lst if len(g) % 2 == 0]\n    lst.sort()\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef x_or_y(F, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if is_prime(F):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i > 0 and isinstance(i, int) and i%2 != 0])"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - h) for g, h in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    This function takes a class name and a list of extensions as input.\n    It calculates the strength of each extension based on the number of uppercase\n    and lowercase letters in the extension's name. The strength is given by the\n    fraction of uppercase letters minus the number of lowercase letters.\n    The function returns a string in the format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, it chooses the\n    one that comes first in the list.\n    \"\"\"\n    strongest_extension = extensions[0]\n    strongest_strength = len([L for L in extensions[0] if L.isupper()]) - len(\n        [L for L in extensions[0] if L.islower()]\n    )\n    for extension in extensions:\n        strength = len([L for L in extension if L.isupper()]) - len(\n            [L for L in extension if L.islower()]\n        )\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    E = len(b)\n    pat = b + b\n    for i in range(len(a) - E + 1):\n        if pat[i:i+E] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    m = 12\n    res = \"\"\n    while number:\n        while number >= num[m]:\n            number -= num[m]\n            res += sym[m]\n        m -= 1\n    return res"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the triangle is right-angled\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)"}
{"task_id": "HumanEval/161", "solution": "def solve(Z):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(Z)\n    for i in Z:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    if flg == 0:\n        new_str.reverse()\n    return ''.join(new_str)"}
{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]"}
