{"date": "2024-12-10 00:38", "hash": "fe585eb4df8c88d844eeb463ea4d0302", "eval": {"HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": \n            cnt += 1\n            group += ch\n        elif ch == \")\": \n            cnt -= 1\n            group += ch\n            if cnt == 0: \n                results.append(group)\n                group = \"\"\n    return results", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    # Given a positive floating point number, it can be decomposed into\n    # and integer part (largest integer smaller than given number) and decimals\n    # (leftover part always smaller than 1).\n\n    # Return the decimal part of the number.\n    # >>> truncate_number(3.5)\n    # 0.5\n\n    # Convert the number to a string, split it at the decimal point,\n    # and return the second part as a float.\n    return float(str(number).split('.')[1])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3.5]], "plus_fail_tests": [[999.99999]]}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == '(':\n                cnt += 1\n                if cnt > max_depth:\n                    max_depth = cnt\n            elif ch == ')':\n                cnt -= 1\n        return max_depth\n\n    return [count_depth(group.strip()) for group in paren_string.split()]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    # >>> intersperse([], 4)\n    # []\n    # >>> intersperse([1, 2, 3], 4)\n    # [1, 4, 2, 4, 3]\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i < len(numbers) - 1:  # Don't append delimeter after the last number\n            res.append(delimeter)\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Check if in given list of numbers, are any two numbers closer to each other than\n    # given threshold.\n    # >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    # False\n    # >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    # True\n\n    sorted_numbers = sorted(numbers)\n    for i in range(1, len(sorted_numbers)):\n        if sorted_numbers[i] - sorted_numbers[i - 1] < threshold:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(x - mean) for x in numbers]\n    mad = sum(abs_diffs) / len(abs_diffs)\n    return mad", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    # Find the shortest palindrome that begins with a supplied string.\n    # Algorithm idea is simple:\n    # - Find the longest postfix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # >>> make_palindrome('')\n    # ''\n    # >>> make_palindrome('cat')\n    # 'catac'\n    # >>> make_palindrome('cata')\n    # 'catac'\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    # Input are two strings a and b consisting only of 1s and 0s.\n    # Perform binary XOR on these inputs and return result also as a string.\n    # >>> string_xor('010', '110')\n    # '100'\n\n    # Check if the lengths of the strings are equal\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length\")\n\n    # Perform XOR operation on each pair of corresponding characters\n    xor_result = [str(int(a[i]) ^ int(b[i])) for i in range(len(a))]\n\n    # Join the result into a string and return\n    return ''.join(xor_result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return (s, p)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_nums = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_nums.append(max(max_nums[i-1], numbers[i]))\n\n    return max_nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["asdfgh"]], "plus_fail_tests": [["Hello there!"]]}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n    # Use a set to automatically remove duplicates and count the distinct characters\n    distinct_characters = set(string)\n    # Subtract the number of non-alphabetic characters from the set\n    distinct_characters -= set('abcdefghijklmnopqrstuvwxyz')\n    # Return the count of distinct characters\n    return len(distinct_characters)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abcde"]], "plus_fail_tests": [["AbCdEfG"]]}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    # Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    # Return the string with numbers sorted from smallest to largest\n    # >>> sort_numbers('three one five')\n    # 'one three five'\n\n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert each word to its corresponding integer value using the 'to_int' dictionary\n    ints = [to_int[word] for word in words]\n\n    # Sort the integers\n    ints.sort()\n\n    # Convert the sorted integers back to words using the 'to_int' dictionary\n    sorted_words = [next(key for key, value in to_int.items() if value == i) for i in ints]\n\n    # Join the sorted words into a space-delimited string and return it\n    return ' '.join(sorted_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    # Find how many times a given substring can be found in the original string. Count overlaping cases.\n    # >>> how_many_times('', 'a')\n    # 0\n    # >>> how_many_times('aaa', 'a')\n    # 3\n    # >>> how_many_times('aaaa', 'aa')\n    # 3\n\n    occurences = 0\n    sub_len = len(substring)\n    for i in range(len(string)):\n        if string[i:i+sub_len] == substring:\n            occurences += 1\n    return occurences", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    # Return list of prime factors of given integer in the order from smallest to largest.\n    # Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    # Input number should be equal to the product of all factors\n    # >>> factorize(8)\n    # [2, 2, 2]\n    # >>> factorize(25)\n    # [5, 5]\n    # >>> factorize(70)\n    # [2, 5, 7]\n\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n = n // i\n        else:\n            i += 1\n    fact.append(n)\n    return fact", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[1024]]}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n        else: return 0\n\n    return [count_beats(note) for note in music_string.split()]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i - 1], numbers[i])\n\n    return min_pair", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1: return False\n    n_sqrt = int(n**0.5) + 1\n    for i in range(2, n_sqrt):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    num_cnt = dict()\n    for number in numbers:\n        if number in num_cnt:\n            num_cnt[number] += 1\n        else:\n            num_cnt[number] = 1\n\n    non_duplicates = [number for number, count in num_cnt.items() if count == 1]\n    return non_duplicates", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    return [n for n in l if n > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[4]]}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    # Sort the characters in both strings\n    s0 = sorted(s0)\n    s1 = sorted(s1)\n\n    # Compare the sorted strings\n    return s0 == s1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["eabcdzzzz", "dddzzzzzzzddeddabc"]], "plus_fail_tests": [["aaabbbccc", "abbabcbc"]]}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    # The number of collisions is equal to the number of cars moving in opposite directions.\n    # This is because each car moving left to right will collide with each car moving right to left.\n    # Therefore, the total number of collisions is n * n.\n    return n * n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    return sorted(set(l))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    return max(l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    # Return n-th Fibonacci number.\n    # >>> fib(10)\n    # 55\n    # >>> fib(1)\n    # 1\n    # >>> fib(8)\n    # 21\n\n    if n == 0: return 0\n    if n <= 2: return 1\n\n    a, b = 1, 1\n    for _ in range(n - 2):\n        a, b = b, a + b\n    return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    # Change numerical base of input number x to base.\n    # return string representation after the conversion.\n    # base numbers are less than 10.\n    # >>> change_base(8, 3)\n    # '22'\n    # >>> change_base(8, 2)\n    # '1000'\n    # >>> change_base(7, 2)\n    # '111'\n\n    if x == 0: return \"0\"\n    ret = \"\"\n\n    while x:\n        ret = str(x % base) + ret\n        x //= base\n\n    return ret", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_sequence = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_sequence.append(fibfib_sequence[-1] + fibfib_sequence[-2] + fibfib_sequence[-3])\n        return fibfib_sequence[-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    third = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = third.pop(0)\n    return l", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    words = s.split(\" \")\n    apples = int(words[2])\n    oranges = int(words[6])\n    return n - apples - oranges", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["5 apples and 6 oranges", 19]], "plus_fail_tests": [["10 apples and 20 oranges", 50]]}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    # Return 2^n modulo p (be aware of numerics).\n    # >>> modp(3, 5)\n    # 3\n    # >>> modp(1101, 101)\n    # 2\n    # >>> modp(0, 101)\n    # 1\n    # >>> modp(3, 11)\n    # 8\n    # >>> modp(100, 101)\n    # 1\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = (res * x) % p\n        x = (x * x) % p\n        n = n // 2\n    return res", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 1]]}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    # Check if the cube root of the absolute value of a is an integer\n    return abs(a) ** (1. / 3.) % 1 == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[64]], "plus_fail_tests": [[125]]}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    j = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even[j]\n            j += 1\n    return l", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    cnt = 0\n    for x in brackets:\n        if x == \"<\":\n            cnt += 1\n        elif x == \">\":\n            cnt -= 1\n            if cnt < 0:\n                return False\n    return cnt == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    # Given length of a side and high return area for a triangle.\n    return 0.5 * a * h", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    # xs represent coefficients of a polynomial.\n    # xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    #  Return derivative of this polynomial in the same form.\n    # >>> derivative([3, 1, 2, 4, 5])\n    # [1, 4, 12, 20]\n    # >>> derivative([1, 2, 3])\n    # [2, 6]\n\n    # The derivative of a constant is 0, so if the list has only one element, return [0]\n    if len(xs) == 1:\n        return [0]\n\n    # The derivative of x^n is n*x^(n-1)\n    # So, we start from the second element (index 1) and multiply each element by its index\n    # We also remove the first element (index 0) as it is not included in the derivative\n    return [i * xs[i] for i in range(1, len(xs))]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1]]], "plus_fail_tests": [[[0]]]}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    # For a given number n, find the largest number that divides n evenly, smaller than n\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[500027]]}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    # Checks if given string is a palindrome\n    return text == text[::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    # Return median of elements in the list l.\n    # >>> median([3, 1, 2, 4, 5])\n    # 3\n    # >>> median([-10, 4, 6, 1000, 10, 20])\n    # 15.0\n\n    sorted_l = sorted(l)\n    len_l = len(sorted_l)\n\n    if len_l % 2 == 0:\n        return (sorted_l[len_l // 2 - 1] + sorted_l[len_l // 2]) / 2\n    else:\n        return sorted_l[len_l // 2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [i+1 for i in l]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) <= w:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    # Circular shift the digits of the integer x, shift the digits right by shift\n    # and return the result as a string.\n    # If shift > number of digits, return digits reversed.\n    # >>> circular_shift(12, 1)\n    # \"21\"\n    # >>> circular_shift(12, 2)\n    # \"12\"\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    else: return s[-shift:] + s[:-shift]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    # Return sorted unique common elements for two lists.\n    return sorted(list(set(l1) & set(l2)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    # Return True is list elements are monotonically increasing or decreasing.\n    # >>> monotonic([1, 2, 4, 20])\n    # True\n    # >>> monotonic([1, 20, 4, 10])\n    # False\n    # >>> monotonic([4, 1, 0, -10])\n    # True\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    # pairs_sum_to_zero takes a list of integers as an input.\n    # it returns True if there are two distinct elements in the list that\n    # sum to zero, and False otherwise.\n    # >>> pairs_sum_to_zero([1, 3, 5, 0])\n    # False\n    # >>> pairs_sum_to_zero([1, 3, -2, 1])\n    # False\n    # >>> pairs_sum_to_zero([1, 2, 3, 7])\n    # False\n    # >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    # True\n    # >>> pairs_sum_to_zero([1])\n    # False\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    # Initialize smallest even value and its index as None\n    smallest_even_val, smallest_even_idx = None, None\n\n    # Iterate over the array\n    for idx, val in enumerate(arr):\n        # If the value is even and (smallest_even_val is None or val is smaller than smallest_even_val)\n        if val % 2 == 0 and (smallest_even_val is None or val < smallest_even_val):\n            smallest_even_val, smallest_even_idx = val, idx\n\n    # Return the smallest even value and its index as a list\n    return [smallest_even_val, smallest_even_idx] if smallest_even_val is not None else []", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    cnt = 0\n    for x in brackets:\n        if x == \"(\":\n            cnt += 1\n        elif x == \")\":\n            cnt -= 1\n            if cnt < 0:\n                return False\n    return cnt == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    # Given an array arr of integers, find the minimum number of elements that\n    # need to be changed to make the array palindromic. A palindromic array is an array that\n    # is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    # For example:\n    # smallest_change([1,2,3,5,4,7,9,6]) == 4\n    # smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    # smallest_change([1, 2, 3, 2, 1]) == 0\n\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n\n    # Calculate the sum of the digits in the binary representation\n    sum_of_digits = sum(int(digit) for digit in binary)\n\n    # Convert the sum to binary and return it as a string\n    return bin(sum_of_digits)[2:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1000]], "plus_fail_tests": [[10]]}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    return sorted_list[1] if sorted_list[0] != sorted_list[1] else None", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 2, 2, 2, 2, 2, 3, 3, 3, 3]]]}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    # Given list of integers, return list in strange order.\n    # Strange sorting, is when you start with the minimum value,\n    # then maximum of the remaining integers, then minimum and so on.\n\n    # Examples:\n    # strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    # strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    # strange_sort_list([]) == []\n\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j:\n        ans.append(sorted_list[i])\n    return ans", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "import re\ndef is_bored(S):\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Count the number of sentences starting with \"I\"\n    boredoms = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return boredoms", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Is the sky blue?"]], "plus_fail_tests": [["In the morning, I like to have a cup of coffee to start my day off right. How about you?"]]}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "def encode(message):\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n              'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n\n    encoded_message = \"\"\n    for ch in message:\n        if ch.isalpha():\n            encoded_message += vowels.get(ch, switch_case(ch))\n        else:\n            encoded_message += ch\n\n    return encoded_message", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["TEST"]], "plus_fail_tests": [["abcdefghijklmnopqrstuvwxyz"]]}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n\n    primes = [i for i in range(2, a + 1) if isprime[i]]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "def check_dict_case(dictionary):\n    keys = list(dictionary.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if not isinstance(k, str):\n            return False\n        if k != k.lower() and k != k.upper():\n            return False\n        if k != k.lower():\n            lower = False\n        if k != k.upper():\n            upper = False\n    return lower or upper", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"p": "pineapple", "5": "banana", "a": "apple"}]], "plus_fail_tests": [[{"1": "apple", "2": "banana", "3": "cherry"}]]}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "def search(lst):\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n\n    max_num = -1\n    for num in sorted(count.keys(), reverse=True):\n        if count[num] >= num:\n            max_num = num\n            break\n\n    return max_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0):\n            cnt += str(i).count('7')\n    return cnt", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[555555]]}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    sum1 = sum(len(word) for word in lst1)\n    sum2 = sum(len(word) for word in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum2 < sum1:\n        return lst2\n    else:\n        return lst1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    res = []\n    for i, l in enumerate(lst):\n        for j, e in enumerate(l):\n            if e == x:\n                res.append((i, j))\n    res.sort(key=lambda y: (y[0], -y[1]))\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if the length of the string is a prime number\n    return is_prime(len(string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n - 1))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[6]]}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    # takes as input string encoded with encode_cyclic function. Returns decoded string.\n\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle operation\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n        if s[i].lower() == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex = ['2', '3', '5', '7', 'B', 'D']\n\n    # Count the number of prime hexadecimal digits\n    count = sum(1 for digit in num if digit in prime_hex)\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "def add(lst):\n    # Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    # Examples:\n    #     add([4, 2, 6, 7]) ==> 2 \n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Get the unit digits of the numbers\n    a = abs(a) % 10\n    b = abs(b) % 10\n    # Return the product of the unit digits\n    return a * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    # Convert the string to a float\n    val = float(value)\n\n    # If the absolute difference between the float and its integer part is 0.5,\n    # round it away from zero.\n    if abs(val - int(val)) == 0.5:\n        # If the float is positive, round it up. If it's negative, round it down.\n        return int(val) + 1 if val > 0 else int(val) - 1\n    else:\n        # If the float is not equidistant from two integers, round it to the nearest integer.\n        return round(val)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    def to_letter_grade(score):\n        if score == 4.0:\n            return \"A+\"\n        elif score > 3.7:\n            return \"A\"\n        elif score > 3.3:\n            return \"A-\"\n        elif score > 3.0:\n            return \"B+\"\n        elif score > 2.7:\n            return \"B\"\n        elif score > 2.3:\n            return \"B-\"\n        elif score > 2.0:\n            return \"C+\"\n        elif score > 1.7:\n            return \"C\"\n        elif score > 1.3:\n            return \"C-\"\n        elif score > 1.0:\n            return \"D+\"\n        elif score > 0.7:\n            return \"D\"\n        elif score > 0.0:\n            return \"D-\"\n        else:\n            return \"E\"\n\n    return [to_letter_grade(grade) for grade in grades]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    # Check if one of the numbers is equal to the sum of the other two\n    if x + y == z or x + z == y or y + z == x:\n        return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    # prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    # >>> prime_fib(1)\n    # 2\n    # >>> prime_fib(2)\n    # 3\n    # >>> prime_fib(3)\n    # 5\n    # >>> prime_fib(4)\n    # 13\n    # >>> prime_fib(5)\n    # 89\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        fib_sequence = [0, 1]\n        while len(fib_sequence) <= n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return fib_sequence[n]\n\n    i = 1\n    prime_fib_numbers = []\n    while len(prime_fib_numbers) < n:\n        fib_number = fibonacci(i)\n        if is_prime(fib_number):\n            prime_fib_numbers.append(fib_number)\n        i += 1\n\n    return prime_fib_numbers[-1]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12]]}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    # Given a string s, count the number of uppercase vowels in even indices.\n    #  \n    # For example:\n    # count_upper('aBCdEf') returns 1\n    # count_upper('abcdefg') returns 0\n    # count_upper('dBBE') returns 0\n\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            cnt += 1\n    return cnt", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "import math\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    # >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    # -0.5\n    # >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    # 1.0\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n\n    # Newton-Raphson method\n    x = 0.0\n    while abs(func(x)) > 1e-6:\n        x = x - func(x) / derivative(x)\n    return x", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[9450000, 9, 9450000, -7, 3, 2, 6, 8, 2, -4, -10, 6, 5, -1]]]}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(',', '').split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Elephant,giraffe,,lion,zebra"]]}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n\n    while x % n == 0:\n        x /= n\n\n    return x == 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 2]]}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    # Reverse the range if x is greater than y\n    if x > y:\n        x, y = y, x\n\n    # Check if x is odd, if so, increment x by 1 to make it even\n    if x % 2 != 0:\n        x += 1\n\n    # Check if x is still greater than y, if so, return -1\n    if x > y:\n        return -1\n\n    # Return the biggest even number in the range\n    return y if y % 2 == 0 else y - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[13, 12]], "plus_fail_tests": [[100, 6]]}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    result = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = factorial(i)\n        else:\n            result[i] = sum_to_n(i)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[4]]}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_cnt += 1\n            else:\n                odd_cnt += 1\n    return (even_cnt, odd_cnt)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[123]], "plus_fail_tests": [[1000]]}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n        return sum(int(i) for i in l) > 0\n    return sum(judge(x) for x in arr)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[-1, 0, 1]]]}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "import math\ndef max_fill(grid, capacity):\n    # Flatten the grid and count the number of 1s\n    flat_grid = [item for sublist in grid for item in sublist]\n    total_wells = sum(flat_grid)\n\n    # Calculate the number of buckets needed\n    buckets_needed = math.ceil(total_wells / capacity)\n\n    return buckets_needed", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 1, 1, 1], [1, 1, 1, 1]], 9]], "plus_fail_tests": [[[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]], 2]]}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    # Implement a function that takes an non-negative integer and returns an array of the first n\n    # integers that are prime numbers and less than n.\n    # for example:\n    # count_up_to(5) => [2,3]\n    # count_up_to(11) => [2,3,5,7]\n    # count_up_to(0) => []\n    # count_up_to(20) => [2,3,5,7,11,13,17,19]\n    # count_up_to(1) => []\n    # count_up_to(18) => [2,3,5,7,11,13,17]\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i * i, n, i):\n                isprime[j] = False\n    return ans", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            if ch == '(':\n                cnt += 1\n            elif ch == ')':\n                cnt -= 1\n                if cnt < 0:\n                    return False\n        return cnt == 0\n\n    str1, str2 = lst[0], lst[1]\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            new_str = str1[:i] + str1[i:] + str2[:j] + str2[j:]\n            if valid_parens(new_str):\n                return 'Yes'\n    return 'No'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[")())", "(()()("]]], "plus_fail_tests": [[["", ""]]]}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return arr[:k]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-3, -4, 5], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 3]]}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n                break\n        else:\n            continue\n        break\n\n    path = [grid[x][y]]\n    grid[x][y] = 0\n    for _ in range(k - 1):\n        min_val = float('inf')\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] < min_val:\n                min_val = grid[nx][ny]\n                x, y = nx, ny\n        path.append(grid[x][y])\n        grid[x][y][y] = 0\n    return path", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9]]}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            count[word] = count.get(word, 0) + 1\n    max_count = max(count.values())\n    for key, value in count.items():\n        if value == max_count:\n            ans[key] = value\n    return ans", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If the intervals don't intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    return \"YES\" if is_prime(length) else \"NO\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 1], [0, 4]]], "plus_fail_tests": [[[10, 20], [15, 25]]]}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    # Given a list of numbers, return whether or not they are sorted\n    # in ascending order. If list has more than 1 duplicate of the same\n    # number, return False. Assume no negative numbers and only integers.\n\n    # Examples\n    # is_sorted([5]) \u279e True\n    # is_sorted([1, 2, 3, 4, 5]) \u279e True\n    # is_sorted([1, 3, 2, 4, 5]) \u279e False\n    # is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    # is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    # is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    # is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    # is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n\n    count = dict()\n    for x in lst:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n\n    if max(count.values()) > 1:\n        return False\n\n    return lst == sorted(lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4]]]}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    # Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    # The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    # as follows: start with any positive integer n. Then each term is obtained from the \n    # previous term as follows: if the previous term is even, the next term is one half of \n    # the previous term. If the previous term is odd, the next term is 3 times the previous\n    # term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    # Note: \n    #     1. Collatz(1) is [1].\n    #     2. returned list sorted in increasing order.\n\n    # For example:\n    # get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 != 0:\n            ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Mapping of numbers to their corresponding words\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Filtering the array to only include numbers between 1 and 9 inclusive\n    arr = [x for x in arr if 1 <= x <= 9]\n\n    # Sorting and reversing the array\n    arr.sort(reverse=True)\n\n    # Mapping the numbers in the array to their corresponding words\n    return [num_to_word[x] for x in arr]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0: return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_lst1 = sum(x % 2 != 0 for x in lst1)\n    even_lst2 = sum(x % 2 == 0 for x in lst2)\n    return \"YES\" if odd_lst1 <= even_lst2 else \"NO\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the result string is a palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    def digits(x: int) -> int:\n        return len(str(abs(x)))\n\n    return sum(x for x in arr[:k] if digits(x) <= 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 != 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    # Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    # of nums.\n    # Example\n    # minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for num in nums:\n        s += num\n        ans = min(ans, s)\n        if s > 0:\n            s = 0\n    return ans", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    # Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    # >>> largest_prime_factor(13195)\n    # 29\n    # >>> largest_prime_factor(2048)\n    # 2\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i * i, n + 1, i):\n                isprime[j] = False\n\n    primes = [i for i in range(2, n + 1) if isprime[i]]\n    for prime in primes[::-1]:\n        if n % prime == 0:\n            return prime", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[456745]]}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d, y = int(m), int(d), int(y)\n    if m < 1 or m > 12 or d < 1 or y < 1: return False\n    if m == 2 and (d < 1 or d > 29): return False\n    if m in [4, 6, 9, 11] and (d < 1 or d > 30): return False\n    if d > days[m-1]: return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    # Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    # should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    # Examples\n    # split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"abcdef\") == 3 \n\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n\n    # if no whitespaces or commas, count lower-case letters with odd order in the alphabet\n    return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for num in arr:\n        s += abs(num)\n        sgn *= -1 if num < 0 else 1\n    return sgn * s", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    return [word for word in s.split() if count_consonants(word) == n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    def judge(n):\n        return all(int(d) % 2 != 0 for d in str(n))\n\n    return sorted([i for i in x if judge(i)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    ans = []\n    template = \"the number of odd elements in the string i of the input.\"\n    for i, s in enumerate(lst):\n        odd_digits = sum(1 for c in s if int(c) % 2 != 0)\n        ans.append(template.replace('i', str(odd_digits)))\n    return ans", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    # In this Kata, you have to sort an array of non-negative integers according to\n    # number of ones in their binary representation in ascending order.\n    # For similar number of ones, sort based on decimal value.\n\n    # It must be implemented like this:\n    # >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    # >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    # >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        return (x1 - y1) if x1 != y1 else (x - y)\n\n    return sorted(arr, key=cmp_to_key(cmp))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    # Given a positive integer n, you have to make a pile of n levels of stones.\n    # The first level has n stones.\n    # The number of stones in the next level is:\n    #     - the next odd number if n is odd.\n    #     - the next even number if n is even.\n    # Return the number of stones in each level in a list, where element at index\n    # i represents the number of stones in the level (i+1).\n\n    # Examples:\n    # >>> make_a_pile(3)\n    # [3, 5, 7]\n\n    ans, num = [], n\n    for i in range(n):\n        ans.append(num)\n        num = num + 2 if n % 2 == 0 else num + 2\n    return ans", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    cnt, max_nest = 0, 0\n    for char in string:\n        if char == \"[\":\n            cnt += 1\n            if cnt > max_nest:\n                max_nest = cnt\n        elif char == \"]\":\n            cnt -= 1\n    return max_nest > 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["[[]"]], "plus_fail_tests": [["[[][]["]]}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    return sum(int(abs(num) + 0.5) ** 2 for num in lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1.4, 4.2, 0]]], "plus_fail_tests": [[[0, 3.3, 7.7, -2.2]]]}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    # Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    # Example\n    # is_equal_to_sum_even(4) == False\n    # is_equal_to_sum_even(6) == False\n    # is_equal_to_sum_even(8) == True\n\n    # If n is even, it can be written as the sum of 4 even numbers (2, 2, 2, 2)\n    if n % 2 == 0:\n        return True\n    # If n is odd, it can be written as the sum of 4 even numbers (2, 2, 2, 1) if n > 7\n    elif n > 7:\n        return True\n    # If n is less than or equal to 7, it cannot be written as the sum of 4 even numbers\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[41]]}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    # Check if there are more than 3 digits in the file name\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count(\".\") != 1:\n        return \"No\"\n\n    # Split the file name into two parts before and after the dot\n    f_list = file_name.split(\".\")\n\n    # Check if the first part of the file name is not empty and starts with a letter\n    if not f_list[0].isalpha() or not f_list[0]:\n        return \"No\"\n\n    # Check if the second part of the file name is one of the allowed extensions\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    # If all checks pass, return 'Yes'\n    return \"Yes\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["MY16FILE3.exe"]], "plus_fail_tests": [["hello world.exe"]]}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Create a function that takes integers, floats, or strings representing\n    # real numbers, and returns the larger variable in its given variable type.\n    # Return None if the values are equal.\n    # Note: If a real number is represented as a string, the floating point might be . or ,\n\n    # compare_one(1, 2.5) \u279e 2.5\n    # compare_one(1, \"2,3\") \u279e \"2,3\"\n    # compare_one(\"5,1\", \"6\") \u279e \"6\"\n    # compare_one(\"1\", 1) \u279e None\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n\n    if num_a > num_b:\n        return a if isinstance(a, (int, float)) else b\n    elif num_b > num_a:\n        return b if isinstance(b, (int, float)) else a\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": [["-4,1", "-4.0"]]}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    if n <= 2: return 0\n\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    mod_count = [0] * 3\n\n    for num in a:\n        mod_count[num % 3] += 1\n\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6\n    count += mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    count += mod_count[0] * (mod_count[0] - 1) // 2 * mod_count[2]\n    count += mod_count[1] * (mod_count[1] - 1) // 2 * mod_count[0]\n    count += mod_count[2] * (mod_count[2] - 1) // 2 * mod_count[0]\n    count += mod_count[0] * (mod_count[0] - 1) // 2 * mod_count[1]\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[3]]}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0 or not txt[-1].isalpha():\n        return False\n    elif len(txt) == 1:\n        return True\n    elif txt[-2].isalpha():\n        return False\n    else:\n        return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaaaa aaaaa 1A"]]}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    ans = text.replace(\"  \", \"-\")\n    ans = ans.replace(\" \", \"_\")\n    return ans", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Yellow Yellow  Dirty  Fellow"]], "plus_fail_tests": [["Hello,   world!"]]}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    # Function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    # Sort the list based on the sum of digits and index\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    return nums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 11, -1, -11, -12]]], "plus_fail_tests": [[[1, 2, 3]]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -1, -1, -1, -1, -1, -1, -1, -1]]], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12]]]}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n\n    return m[number // 1000] + c[number % 1000 // 100] + x[number % 100 // 10] + i[number % 10]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    # The Brazilian factorial is defined as:\n    # brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    # where n > 0\n\n    # For example:\n    # >>> special_factorial(4)\n    # 288\n\n    # The function will receive an integer as input and should return the special\n    # factorial of this integer.\n\n    def factorial(n):\n        fac = 1\n        for i in range(1, n + 1):\n            fac *= i\n        return fac\n\n    for i in range(n, 0, -1):\n        ans *= factorial(i)\n\n    return ans", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[2]]}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    # Swap a and b if a is greater than b\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store the even numbers\n    even_numbers = []\n\n    # Iterate over the range from a to b\n    for i in range(a, b+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # If the number is even, append it to the list\n            even_numbers.append(i)\n\n    # Return the list of even numbers\n    return even_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 10]], "plus_fail_tests": [[6, 12]]}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "def digits(n):\n    # Given a positive integer n, return the product of the odd digits.\n    # Return 0 if all digits are even.\n    # For example:\n    # digits(1)  == 1\n    # digits(4)  == 0\n    # digits(235) == 15\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        digit = int(ch)\n        if digit % 2 != 0:\n            has_odd = True\n            prod *= digit\n    return 0 if not has_odd else prod", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even, odd = 0, 0\n    for ch in str(abs(num)):  # use abs to handle negative numbers\n        if int(ch) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word))\n        if ch_cnt > mx_ch_cnt:\n            mx_ch_cnt, ans = ch_cnt, word\n        elif ch_cnt == mx_ch_cnt:\n            ans = min(ans, word)\n    return ans", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    # Initialize an empty list to store the numbers that meet the conditions\n    ans = []\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Convert the number to a string to easily access its digits\n        num_str = str(abs(num))\n\n        # Check if the first and last digits of the number are odd\n        if num_str[0] in [\"1\", \"3\", \"5\", \"7\", \"9\"] and num_str[-1] in [\"1\", \"3\", \"5\", \"7\", \"9\"]:\n            # Check if the number is greater than 10\n            if num > 10:\n                # If all conditions are met, add the number to the list\n                ans.append(num)\n\n    # Return the number of elements in the list\n    return len(ans)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the triangle is right-angled\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    exp = str(operand[0])\n    for i in range(1, len(operand)):\n        exp += \" \" + operator[i-1] + \" \" + str(operand[i])\n    return eval(exp)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n    else:\n        start = min(planets.index(planet1), planets.index(planet2))\n        end = max(planets.index(planet1), planets.index(planet2))\n        return tuple(planets[start+1:end])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    # Create a function that returns a tuple (a, b), where 'a' is\n    # the largest of negative integers, and 'b' is the smallest\n    # of positive integers in a list.\n    # If there is no negative or positive integers, return them as None.\n\n    # Examples:\n    # largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    # largest_smallest_integers([]) == (None, None)\n    # largest_smallest_integers([0]) == (None, None)\n\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n\n    if not neg:\n        largest_neg = None\n    else:\n        largest_neg = max(neg)\n\n    if not pos:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos)\n\n    return (largest_neg, smallest_pos)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - h) for g, h in zip(game, guess)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    ans = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            ans += num ** 2\n    return ans", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Split the strings into numerators and denominators\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of the numerators and denominators\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product is a whole number\n    if product_num % product_den == 0:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(a):\n        if a < 2:\n            return False\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Delete the strings that have odd lengths from the list\n    lst = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort the list by length of each word, and then alphabetically\n    lst.sort(key=lambda s: (len(s), s))\n\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    # Given a string 'text', return its md5 hash equivalent string.\n    # If 'text' is an empty string, return None.\n\n    # >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\n    if text == \"\": return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "def solve(s):\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            if ch.islower():\n                ans += ch.upper()\n            else:\n                ans += ch.lower()\n        else:\n            ans += ch\n\n    if not has_letter:\n        ans = ans[::-1]\n\n    return ans", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    # Check if the words are the same\n    if a == b:\n        return True\n    # Check if the second word is empty\n    if b == \"\":\n        return True\n    # Check if the second word is a substring in the first word\n    if b in a:\n        return True\n    # Check if any rotation of the second word is a substring in the first word\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    # If none of the above conditions are met, return False\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0: return [1]\n    if n == 1: return [1, 3]\n    ans = [1, 3]\n    for i in range(2, n+1):\n        if ans[i-1] % 2 == 0:\n            ans.append(1 + ans[i-1] // 2)\n        else:\n            ans.append(ans[i-1] + ans[i-2] + ans[i])\n    return ans", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2]]}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    prime_numbers = [i for i in lst if is_prime(i)]\n    if prime_numbers:\n        largest_prime = max(prime_numbers)\n        return sum(int(digit) for digit in str(largest_prime))\n    else:\n        return 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}, "pass_at_k": {"base": {"pass@1": 0.7804878048780488}, "plus": {"pass@1": 0.7073170731707317}}}