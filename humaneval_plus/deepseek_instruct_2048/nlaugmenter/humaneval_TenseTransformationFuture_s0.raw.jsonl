{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in will give list of numbers, will be any two numbers closer to each other than \n     will give threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    result = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i+1])\n                start = i+1\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it will be decomposed into \n    an integer part (largest integer smaller than will give number) and a decimal \n    (leftover part always smaller than 1). \n\n    It will return the decimal part of the number.\n    \"\"\"\n    return number - int(number)\n\n# Test cases"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation \n     around the mean of this dataset. \n     Mean Absolute Deviation is the average absolute difference between each \n     element and a centerpoint (mean in this case): \n     MAD= average| x-x_mean|\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(x - mean) for x in numbers]\n    mad = sum(abs_diffs) / len(abs_diffs)\n    return mad\n\n# Test the function\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test case 1 failed\"\nassert mean_absolute_deviation([1.0, 1.0, 1.0, 2.0, 2.0]) == 0.8, \"Test case 2 failed\"\nassert mean_absolute_deviation([-1.0, -1.0, 1.0, 1.0]) == 0.0, \"Test case 3 failed\"\n"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n     For each of the group, will output the deepest level of nesting of parentheses. \n     E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results\n\n# Test cases"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that will contain will give substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Testing the function"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n\n# Test cases"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_num = numbers[0]\n    result = [max_num]\n\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n\n    return result\n\n# Testing the function"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that will begin with a will supply string.\n     Algorithm idea will be simple: \n    -will Find the longest postfix of will supply string that will be a palindrome. \n    -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n# Test cases"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input will be two strings a and b consisting only of 1s and 0s. \n    will Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure both strings are of the same length\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''\n    for i in range(max_len):\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n# Test cases"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string))]\n\n# Testing the function"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n\n# Test cases"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set(string.lower())\n    count = sum(1 for char in distinct_characters if char.isalpha())\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n# Test the function"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n     Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n     Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n# Test cases"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a given list of numbers (of length at least two) select and return two that will be the closest to each \n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), will apply a linear transform to that list,\n     such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n# Test the function"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter will give list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n# Testing the function"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of will give string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n# Testing the function"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that will divide n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Test the function"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test cases"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, will remove all elements that will occur more than once. \n    Will keep order of elements will left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, this function flips lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string\n\n# Testing the function"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n# Test cases"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that will start with a will give prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n# Testing the function"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n > 0]\n\n# Testing the function"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a will give number will be prime, and false otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs will be coefficients of a polynomial. \n     find_zero will find x such that poly(x)= 0. \n     find_zero will return only only zero point, even if there will be many. \n     Moreover, find_zero only will take list xs having even number of coefficients \n     and largest non zero coefficient as it will guarantee \n     a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    if max(xs) == 0:\n        raise ValueError(\"The largest coefficient must be non-zero.\")\n\n    # Use the bisection method to find the root\n    a = -1000\n    b = 1000\n    while abs(a - b) > 1e-6:\n        c = (a + b) / 2\n        if poly(xs, a) * poly(xs, c) <= 0:\n            b = c\n        else:\n            a = c\n    return (a + b) / 2\n\n# Test cases"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function will take a list l and will return a list l' such that \n     l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n     to the values of the corresponding indicies of l, but will sort.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    divisible_by_three = [(i, v) for i, v in enumerate(l) if i % 3 == 0]\n    divisible_by_three.sort(key=lambda x: x[1])\n    sorted_values = [v for _, v in divisible_by_three]\n\n    result = l[:]\n    for i, v in divisible_by_three:\n        result[i] = sorted_values.pop(0)\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Test the function"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n# Testing the function"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = l[:]\n    result[::2] = even_indices_values\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/38", "solution": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string will encode with encode_cyclic function. Returns will decode string. \n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Test cases\noriginal_string = \"Hello, World!\"\nencoded_string = encode_cyclic(original_string)\ndecoded_string = decode_cyclic(encoded_string)\n"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n# Test cases"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero will take a list of integers as an input. \n     it will return True if there will be three distinct elements in the list that \n     sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        l_ptr = i + 1\n        r_ptr = n - 1\n        while l_ptr < r_ptr:\n            cur_sum = l[i] + l[l_ptr] + l[r_ptr]\n            if cur_sum < 0:\n                l_ptr += 1\n            elif cur_sum > 0:\n                r_ptr -= 1\n            else:\n                return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that will be a perfectly straight infinitely long line. \n     n cars will be driving will left to right;   simultaneously, a different set of n cars \n     will be driving right to left.    The two sets of cars will start out being very far from \n     each other.   All cars will move in the same speed.   Two cars will be said to collide \n     when a car that will be moving will left to right will hit a car that will be moving right to left. \n     However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n     in their trajectory as if they will not collide. \n\n     This function will output the number of such collisions. \n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return n * (n - 1) // 2\n\n# Test cases"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements will increment by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]\n\n# Testing the function"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero will take a list of integers as an input. \n     it will return True if there will be two distinct elements in the list that \n     sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n     return string representation after the conversion. \n     base numbers will be less than 10.\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n# Test cases"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"\n    return 0.5 * a * h\n\n# Test the function\nassert triangle_area(5, 3) == 7.5, \"Test case 1 failed\"\nassert triangle_area(10, 2) == 10.0, \"Test case 2 failed\"\nassert triangle_area(3, 4) == 6.0, \"Test case 3 failed\"\n"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n# Test cases"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n# Test cases"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if the given string will be a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# Test cases"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (will be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)\n\n# Test cases"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string will encode with encode_shift function. Returns will decode string. \n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\n\n# Testing\noriginal_text = \"hello\"\nencoded_text = encode_shift(original_text)\ndecoded_text = decode_shift(encoded_text)\n"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l will be below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n# Testing the function"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n# Testing the function"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words will have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n\n# Test cases"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n# Testing the function"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True will be list elements will be monotonically increasing or decreasing.\n    \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n        return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n# Test cases"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\n# Test cases"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test cases"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n will be a function that will sum numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))\n\n# Test cases"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs will represent coefficients of a polynomial. \n     xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n      Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Skip the first coefficient as it's the constant term and its derivative is always 0\n    return [i*xs[i] for i in range(1, len(xs))]\n\n# Test cases"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_values = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_values.append(fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3])\n        return fibfib_values[n]\n\n# Test cases"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n     and return the result as a string. \n     If shift> number of digits, return digits will reverse.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = list(str(x))\n    if shift > len(digits):\n        return ''.join(digits[::-1])\n    else:\n        return ''.join(digits[-shift:] + digits[:-shift])\n\n# Test cases"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the ASCII codes of the uppercase characters in the string.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that will represent a number of apples and oranges \n    that will be distributed in a basket of fruit this basket will contain apples, oranges, and mango fruits. \n    You will be given the string that will represent the total number of the oranges and apples and an integer \n    that will represent the total number of the fruits in the basket. Return the number of the mango fruits in the basket. \n    \"\"\"\n    # Parse the string to get the number of apples and oranges\n    apples, oranges = map(int, s.split()[::2])\n\n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n\n    return mangoes\n\n# Test cases"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    smallest_even = [float('inf'), -1]\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even[0]:\n            smallest_even = [num, i]\n    return smallest_even if smallest_even[1] >= 0 else []\n\n# Test cases"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    '''\n    You will be given a non-empty list of positive integers. Return the greatest integer that will be greater than \n     zero, and will have a frequency greater than or equal to the value of the integer itself. \n     The frequency of an integer will be the number of times it will appear in the list.\n     If no such a value exist, return -1. \n     Examples: \n         search([4, 1, 2, 2, 3, 1])== 2 \n         search([1, 2, 2, 3, 3, 3, 4, 4, 4])== 3 \n         search([5, 5, 4, 4, 4])==-1 \n     '''\n    # Count the frequency of each number in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate from the maximum number in the list to 1\n    for num in range(max(lst), 0, -1):\n        # If the frequency of the current number is greater than or equal to the value of the number, return the number\n        if num in freq and freq[num] >= num:\n            return num\n\n    # If no such a value exist, return -1\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))  # pop smallest\n        if lst:  # if there are still elements\n            result.append(lst.pop())  # pop largest\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. will Return the area of \n     the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n     Otherwise return-1 \n     Three sides will make a valid triangle when the sum of any two sides will be greater \n     than the third side. \n     Example: \n     triangle_area(3, 4, 5)== 6.00 \n     triangle_area(1, 2, 10)==-1 \n     '''\n    # Check if the sides can form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides can't form a valid triangle\n        return -1\n\n# Test the function"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) <= w:\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, will find the minimum number of elements that \n     will need to be change to make the array palindromic. A palindromic array will be an array that \n     will be read the same backwards and forwards. In one change, you can will change one element to any other element. \n\n     For example: \n     will smallest_change([1,2,3,5,4,7,9,6])== 4 \n     smallest_change([1, 2, 3, 4, 3, 2, 2])== 1 \n     smallest_change([1, 2, 3, 2, 1])== 0 \n    \"\"\"\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n\n# Test cases"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1\n\n# Test cases"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(n):\n    \"\"\"\n    This function checks if a number can be expressed as the product of 3 prime numbers.\n    \"\"\"\n    # List of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check if the number is in the list of primes\n    if n in primes:\n        return False\n    \n    # Check if the number can be expressed as the product of 3 primes\n    for i in primes:\n        if n % i == 0:\n            for j in primes:\n                if n % j == 0 and j != i:\n                    for k in primes:\n                        if n % k == 0 and k != j and k != i:\n                            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n        if x == int(x):\n            continue\n        else:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(a ** (1. / 3.))\n    # Check if the cube of the cube root equals the original number\n    return cube_root ** 3 == abs(a)\n\n# Test cases"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex = ['2', '3', '5', '7', 'B', 'D']\n\n    # Initialize the count\n    count = 0\n\n    # Iterate over the input string\n    for digit in num:\n        # If the digit is a prime hexadecimal digit, increment the count\n        if digit in prime_hex:\n            count += 1\n\n    return count\n\n# Test the function\nassert hex_key(\" AB\") == 1\nassert hex_key(\" 1077E\") == 2\nassert hex_key(\" ABED1A33\") == 4\nassert hex_key(\" 123456789ABCDEF0\") == 6\nassert hex_key(\" 2020\") == 2"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary = ' '.join(binary)\n    return \" db\" + binary + \"db\"\n\n# Test cases"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Test the function"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    \"\"\"Write a function that will take a string and will return True if the string\n     length will be a prime number or False otherwise \n     Examples \n     prime_length('Hello ')== True\n     prime_length('abcdcba ')== True\n     prime_length('kittens ')== True\n     prime_length('orange ')== False\n    \"\"\"\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n     positive integers that will start or will end with 1. \n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n - 1))\n\n# Test cases"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits\n    total_sum = sum(int(digit) for digit in binary)\n    \n    # Convert the sum to binary and return it\n    return bin(total_sum)[2:]\n\n# Test cases"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that will be at odd indices.. \n\n    Examples: \n        add([4, 2, 6, 7])==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n# Test cases"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    result = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        result.append(new_word)\n    return ' '.join(result)\n\n# Test cases"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    if not lst:\n        return []\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, item in enumerate(row):\n            if item == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda y: (y[0], -y[1]))\n    return coordinates\n\n# Test cases"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n# Test cases"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string + \" \"\n\n# Test cases"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))  # remove duplicates\n    lst.sort()  # sort the list\n    return lst[1] if len(lst) > 1 else None\n\n# Test cases"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You will be given a string of words, and your task will be to count the number \n     of boredoms. A boredom will be a sentence that will start with the word\" I\". \n     Sentences will be delimited by '. ', '? 'or '!'\n   \n     For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Count the number of sentences starting with 'I'\n    boredoms = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return boredoms\n\n# Test cases"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97).upper() if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97) % 26 + 97).upper() if char.islower() else chr((ord(char) - 65) % 26 + 65)\n        else:\n            encoded_message += char\n    return encoded_message\n\n# Test cases"}
{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_and_sum_of_digits(lst):\n    largest_prime = max(num for num in lst if is_prime(num))\n    return sum_of_digits(largest_prime)\n\n# Test cases"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    keys_lower = [key.islower() for key in dictionary.keys() if isinstance(key, str)]\n    keys_upper = [key.isupper() for key in dictionary.keys() if isinstance(key, str)]\n    return all(keys_lower) or all(keys_upper)\n\n# Test cases"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes\n\n# Test cases"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Extract the unit digits of the numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Test cases"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, will count the number of uppercase vowels in even will indice. \n    \n     For example: \n     count_upper('aBCdEf ') will return 1 \n     count_upper('abcdefg ') will return 0 \n     count_upper('dBBE ') will return 0 \n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n# Test cases"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return round(num + 0.5)\n    else:\n        return round(num - 0.5)\n\n# Test cases"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i)\n    return stones\n\n# Test cases"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.split(', ')\n\n# Test cases"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function will take two positive numbers x and y and will return the \n     biggest even integer number that will be in the range [x, y] inclusive. If \n     there will be no such number, then the function should return-1. \n\n     For example: \n     choose_num(12, 15)= 14 \n     choose_num(13, 12)=-1 \n    \"\"\"\n    if x > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1\n\n# Test cases"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n\n# Test cases"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n     elements that will haven't any even digit. \n\n     Note: will Return list should will be sorted in increasing order. \n    \n     For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        \"\"\"Check if a number has an even digit.\"\"\"\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])\n\n# Test cases"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Define the mapping from numbers to their names\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Filter out the numbers that are not between 1 and 9 inclusive\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Replace each number by its corresponding name\n    arr = [num_to_name[num] for num in arr]\n\n    return arr\n\n# Test the function"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    def sum_to_n(x):\n        return sum(range(1, x + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            count += 1\n    if count > 1:\n        return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_lst1 = sum([i % 2 != 0 for i in lst1])\n    even_lst2 = sum([i % 2 == 0 for i in lst2])\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases"}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Create an empty dictionary\n    hist = {}\n    # Split the string into words\n    words = test.split()\n    # Iterate over the words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in hist:\n            hist[word] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            hist[word] = 1\n    # Find the maximum count\n    max_count = max(hist.values(), default=0)\n    # Return a dictionary containing only the words with the maximum count\n    return {word: count for word, count in hist.items() if count == max_count}\n\n# Test the function"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all the characters in s that will be equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the result string is a palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)\n\n# Test the function"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n     of nums.\n     Example \n     minSubArraySum([2, 3, 4, 1, 2, 4])== 1 \n     minSubArraySum([-1,-2,-3])==-6 \n    \"\"\"\n    if not nums:\n        return 0\n\n    min_sum = current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n\n# Test cases"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    # Flatten the grid and count the number of 1s\n    flat_grid = [item for sublist in grid for item in sublist]\n    total_wells = sum(flat_grid)\n\n    # Calculate the number of buckets needed\n    buckets_needed = math.ceil(total_wells / capacity)\n\n    return buckets_needed\n\n# Test the function"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n# Test cases"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    consonant_count = lambda word: sum(1 for ch in word if ch not in vowels)\n    return [word for word in words if consonant_count(word) == n]\n\n# Test cases"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'AEIOUaeiou'\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n\n# Test cases"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Initialize counters for open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # Iterate over each string in the list\n    for string in lst:\n        # Iterate over each character in the string\n        for char in string:\n            # If the character is an open parenthesis, increment the counter\n            if char == '(':\n                open_count += 1\n            # If the character is a close parenthesis, increment the counter\n            elif char == ')':\n                close_count += 1\n\n    # If the number of open parentheses is greater than or equal to the number of close parentheses,\n    # it's possible to make a good string\n    if open_count >= close_count:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n     of length k with the maximum k numbers in arr.\n\n     Example 1: \n\n         Input: arr= [-3,-4, 5], k= 3 \n         Output: [-4,-3, 5] \n\n     Example 2: \n\n         Input: arr= [4,-4, 4], k= 2 \n         Output: [4, 4] \n\n     Example 3: \n\n         Input: arr= [-3, 2, 1, 2,-1,-2, 1], k= 1 \n         Output: [2] \n\n     will Note: \n         1. The length of the array will be in the range of [1, 1000]. \n         2. The elements in the array will be in the range of [-1000, 1000]. \n         3. 0 <= k <= len(arr) \n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return arr[:k]\n\n# Test the function"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions. \n    \n\n     Examples \n     solution([5, 8, 7, 1])==> 12 \n     solution([3, 3, 3, 3, 3])==> 9 \n     solution([30, 13, 24, 321])==> 0 \n    \"\"\"\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n     the sum of the elements with at most two digits from the first k elements of arr.\n\n     Example: \n\n         Input: arr= [111,21,3,4000,5,6,7,8,9], k= 4 \n         Output: 24# sum of 21+ 3 \n\n     Constraints: \n         1. 1 <= len(arr) <= 100 \n         2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum to 0\n    sum_val = 0\n\n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # If the number of digits in the current element is at most 2, add it to sum\n        if len(str(arr[i])) <= 2:\n            sum_val += arr[i]\n\n    return sum_val\n\n# Test the function\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    def collatz(n):\n        result = []\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            result.append(n)\n        return result\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    return sorted([n for n in collatz(n) if is_odd(n)])\n\n# Test cases"}
{"task_id": "HumanEval/124", "solution": "import re\n\ndef valid_date(date):\n    \"\"\"\n    This function validates a date string in the format mm-dd-yyyy.\n    It returns True if the date is valid, False otherwise.\n    \"\"\"\n    # Check if the date is not empty\n    if not date.strip():\n        return False\n\n    # Check if the date is in the correct format\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for each month\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n    elif (day < 1 or day > 31):\n        return False\n\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ', ' in txt:\n        return txt.split(', ')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    else:\n        for i in range(len(lst)-1):\n            if lst[i] >= lst[i+1]:\n                return False\n        return True\n\n# Test cases"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If the intervals don't intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\n# Test cases"}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        product = 1\n        sum_magnitudes = 0\n        for num in arr:\n            product *= (1 if num > 0 else -1)\n            sum_magnitudes += abs(num)\n        return product * sum_magnitudes\n\n# Test cases"}
{"task_id": "HumanEval/129", "solution": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    pq, visited, res = [], set(), []\n    for r in range(n):\n        for c in range(n):\n            pq.append((grid[r][c], r, c))\n    heapq.heapify(pq)\n    while len(res) < k:\n        v, r, c = heapq.heappop(pq)\n        if (r, c) not in visited:\n            res.append(v)\n            visited.add((r, c))\n            for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n                if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:\n                    heapq.heappush(pq, (grid[nr][nc], nr, nc))\n    return res\n\n# Test cases"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n    elif n == 2:\n        return [0, 3, 2]\n    else:\n        sequence = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i])\n        return sequence\n\n# Test cases"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n     Return 0 if all digits will be even. \n     For example: \n     digits(1)  == 1 \n     digits(4)  == 0 \n     digits(235)== 15 \n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    odd_digits = [d for d in digits if d % 2 != 0]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for d in odd_digits:\n            product *= d\n        return product\n\n# Test cases"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of numbers, rounds each element in the list to the upper int(Ceiling) \n    and returns the sum of the squares of these numbers.\n    \"\"\"\n    return sum(int(-x) ** 2 if x < 0 else int(x) ** 2 for x in lst)\n\n# Test cases"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1].isalpha():\n        return False\n    else:\n        return True\n\n# Test cases"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    This function will return the largest index of an element which \n    will be not greater than or equal to the element immediately preceding it. \n    If no such element will exist then return -1.\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    neg_max = None\n    pos_min = None\n\n    for num in lst:\n        if num < 0:\n            if neg_max is None or num > neg_max:\n                neg_max = num\n        elif num > 0:\n            if pos_min is None or num < pos_min:\n                pos_min = num\n\n    return (neg_max, pos_min)\n\n# Test cases"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if isinstance(a, str) or isinstance(b, str):\n        return None\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n\n# Test cases"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    for i in range(2, n, 2):\n        for j in range(2, n, 2):\n            for k in range(2, n, 2):\n                for l in range(2, n, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    result = []\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            if i + 1 < len(text) and text[i+1] == ' ':\n                result.append('-')\n                while i < len(text) and text[i] == ' ':\n                    i += 1\n            else:\n                result.append('_')\n                i += 1\n        else:\n            result.append(text[i])\n            i += 1\n    return ''.join(result)\n\n# Test cases"}
{"task_id": "HumanEval/141", "solution": "import re\n\ndef file_name_check(file_name):\n    \"\"\"\n    Check if a file name is valid based on the given conditions.\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No '\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No '\n\n    # Split the file name into the name and extension parts\n    name, extension = file_name.split('.')\n\n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No '\n\n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No '\n\n    return 'Yes '\n\n# Test cases"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n# Test cases"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n# Test cases"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the numerator and denominator of the simplified expression\n    new_num = x_num * n_num\n    new_den = x_den * n_den\n\n    # Check if the simplified expression is a whole number\n    if new_num % new_den == 0:\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which will sort the will give list of integers \n     in ascending order according to the sum of their digits. \n     Note: if there will be several items with similar sum of their digits, \n     will order them will base on their index in original list.\n\n     For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n\n# Test cases"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * (i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])\n\n# Test cases"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort()\n    lst.sort(key=len)\n    return lst\n\n# Test the function"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n will be \n     a prime number and should return the value of y otherwise. \n\n     Examples: \n     for x_or_y(7, 34, 12)== 34 \n     for x_or_y(15, 8, 5)== 5 \n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Test cases"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    else:\n        return sum([i**2 if i > 0 and i % 2 != 0 else 0 for i in lst])\n\n# Test cases"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - h) for g, h in zip(game, guess)]\n\n# Test cases"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = 0\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}. {strongest_extension}\"\n\n# Test cases"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    \"\"\"\n    This function checks if the second word or any of its rotations is a substring of the first word.\n    \"\"\"\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        b = b[-1:] + b[:-1]\n        if b in a:\n            return True\n\n    # If no rotation of b is a substring of a, return False\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n# Test cases"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test cases"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word\n\n# Test cases"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if number > need:\n        return [number + need, remaining]\n    else:\n        if number + need > remaining:\n            return [number + remaining, 0]\n        else:\n            return [number + need, remaining - (number + need)]\n\n# Test cases"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Initialize the result as the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation and update the result\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n# Test cases"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string. \n     If 'text' will be an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# Testing the function"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    # Swap a and b if a is greater than b\n    if a > b:\n        a, b = b, a\n\n    # Generate a list of even numbers between a and b\n    even_numbers = [i for i in range(a, b+1) if i % 2 == 0]\n\n    return even_numbers\n\n# Test cases"}
