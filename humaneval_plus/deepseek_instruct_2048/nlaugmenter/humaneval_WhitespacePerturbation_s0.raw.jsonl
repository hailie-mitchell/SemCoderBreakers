{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, there are two numbers closer to each other\n    than given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] <= threshold:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    groups = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[start:i+1])\n    return groups\n\n# Test the function"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimal\n    part (leftover part always smaller than 1).\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)\n\n# Test cases"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a central point (mean in this case):\n    MAD = average | x -  x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n# Test the function\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test case 1 failed\"\nassert mean_absolute_deviation([1.0, 1.0, 1.0, 2.0, 2.0]) == 0.4, \"Test case 2 failed\"\nassert mean_absolute_deviation([-1.0, -1.0, 1.0, 1.0]) == 0.0, \"Test case 3 failed\"\n"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()() ) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the string into groups\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the depths of each group\n    depths = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize a counter for the current depth and the maximum depth\n        current_depth = max_depth = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the current depth\n            if char == '(':\n                current_depth += 1\n                # If the current depth is greater than the maximum depth, update the maximum depth\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            # If the character is a closing parenthesis, decrement the current depth\n            elif char == ')':\n                current_depth -= 1\n\n        # Append the maximum depth to the depths list\n        depths.append(max_depth)\n\n    # Return the depths list\n    return depths\n\n# Test the function with the provided example"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Testing the function"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return  a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n\n# Test cases"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_nums = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_nums.append(max(max_nums[i-1], numbers[i]))\n\n    return max_nums\n\n# Testing the function"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n   - Find the longest postfix of supplied string that is a palindrome.\n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n# Test cases"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure both strings are of the same length\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n# Test cases"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n# Testing the function"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n\n# Test cases"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n# Test cases"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n# Test the function"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n# Define a dictionary to map the words to their corresponding numbers\nnum_dict = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numbers from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two',  'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine' .\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert the words to numbers using the num_dict and sort them\n    sorted_nums = sorted(words, key=lambda x: num_dict[x])\n\n    # Convert the sorted numbers back to words and join them into a string\n    sorted_numbers = ' '.join(sorted_nums)\n\n    return sorted_numbers\n\n# Test the function"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]\n\n# Test the function\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n# Testing the function"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n# Testing the function"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Testing the function"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test cases"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string\n\n# Testing the function"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n# Test cases"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n# Testing the function"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the l ist.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n > 0]\n\n# Testing the function"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial. \n    find_zero find x such that poly(x)= 0.\n    find_zero returns only onlyzeropoint,e ven ifthere are  many.\n    Moreover, find_ze roonly takes lis t xs having e ven number of coefficients \n    and largest non ze r o coef ficient asit guar antees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 0:\n        xs.append(0)\n    n = len(xs)\n    x_start = max(xs) * 2\n    x_end = -max(xs) * 2\n    while x_start - x_end > 1e-6:\n        x_mid = (x_start + x_end) / 2\n        if poly(xs, x_mid) > 0:\n            x_start = x_mid\n        else:\n            x_end = x_mid\n    return x_end\n\n# Test cases"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    div_by_three.sort()\n\n    # Replace elements at indices divisible by 3 with sorted elements\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = div_by_three[i // 3]\n\n    return l\n\n# Test cases"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Test the function"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n# Testing the function"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    l_prime = l[:]\n    for i in range(0, len(l), 2):\n        l_prime[i] = even_indices_values.pop(0)\n    return l_prime\n\n# Test cases"}
{"task_id": "HumanEval/38", "solution": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Test cases\noriginal_string = \"Hello, World!\"\nencoded_string = encode_cyclic(original_string)\ndecoded_string = decode_cyclic(encoded_string)\n"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    count = 0\n    while count < n:\n        f = fib(i)\n        if is_prime(f):\n            count += 1\n        i += 1\n    return fib(i-1)\n\n# Test cases"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    This function calculates the number of collisions between two sets of cars moving in opposite directions.\n    The first set of cars are moving from right to left, while the second set are moving from left to right.\n    The function assumes that the cars are infinitely strong and ready to collide with each other.\n    As a result, they continue moving in their trajectory as if they did not collide.\n\n    The function takes an integer n as input, representing the number of cars in each set.\n    The function returns the number of such collisions.\n    \"\"\"\n    # Calculate the number of collisions\n    # Each car in the first set will collide with each car in the second set\n    # So, the total number of collisions is n * n\n    return n * n\n\n# Test the function"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]\n\n# Testing the function"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number  x to  base.\n    return string representation after the conversion.\n    base n umber s are l e ss than  10.\n    \"\"\"\n    if not 2 <= base <= 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n\n# Test cases"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"\n    return 0.5 * a * h\n\n# Test the function\nassert triangle_area(5, 3) == 7.5, \"Test case 1 failed\"\nassert triangle_area(10, 2) == 10.0, \"Test case 2 failed\"\nassert triangle_area(3, 4) == 6.0, \"Test case 3 failed\"\n"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        return fib[n]\n\n# Test cases"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list  l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n# Test cases"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome.\n    \"\"\"\n    return text == text[::-1]\n\n# Test cases"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of nume rics) .\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\n# Test cases"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\n\n# Testing\noriginal_text = \"hello\"\nencoded_text = encode_shift(original_text)\ndecoded_text = decode_shift(encoded_text)\n"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n# Testing the function"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n\n# Test cases"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n# Testing the function"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True is list elements are mono tonic ally increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n# Testing the function"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\n# Test cases"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n.  Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test cases"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))\n\n# Test cases"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0]+ xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_n_3 = 0\n        fibfib_n_2 = 0\n        fibfib_n_1 = 1\n        for _ in range(3, n+1):\n            fibfib_n = fibfib_n_1 + fibfib_n_2 + fibfib_n_3\n            fibfib_n_3 = fibfib_n_2\n            fibfib_n_2 = fibfib_n_1\n            fibfib_n_1 = fibfib_n\n        return fibfib_n\n\n# Test cases"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if i == len(s) - 1 and s[i] == 'y':\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n# Test cases"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    # Split the string to get the number of apples and oranges\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[2])\n\n    # Subtract the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n\n    return mangoes\n\n# Test cases"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num <= smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_even_index]\n\n# Test cases"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the keys in the dictionary in descending order\n    for num in sorted(freq.keys(), reverse=True):\n        # If the frequency of the current number is greater than or equal to the value of the number itself, return the number\n        if freq[num] >= num:\n            return num\n\n    # If no such number is found, return -1\n    return -1\n\n# Test the function with the examples from the problem statement"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n# Test cases"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) <= w:\n        return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n\n# Test cases"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n\n    # If the total number of characters in lst1 is less than lst2, return lst1\n    if total_chars1 < total_chars2:\n        return lst1\n    # If the total number of characters in lst2 is less than lst1, return lst2\n    elif total_chars2 < total_chars1:\n        return lst2\n    # If the total number of characters in both lists are equal, return lst1\n    else:\n        return lst1\n\n# Test cases"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(n):\n    \"\"\"\n    This function checks if a given number can be expressed as the product of 3 prime numbers.\n    It assumes that the given number is less than 100.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        This helper function checks if a given number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    count = 0\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == n:\n                    count += 1\n    return count >= 1\n\n# Test cases"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 0:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1\n\n# Test cases"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.    Note: you  may assume the input is always valid.\n    Example:\n    iscube(1) ==> True\n    iscube(2) ==> False   iscube(-1) ==> True     iscube(64) == > True    iscube(0) ==> True\n    iscube(180 ) ==> False\n    '''\n    x = round(a ** (1. / 3))\n    return x ** 3 == a\n\n# Test cases"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in prime_hex_digits)\n\n# Test cases"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary_str = 'db' + binary + 'db'\n    return binary_str\n\n# Test cases"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Test the function"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    \"\"\"\n    This function checks if the length of a string is a prime number.\n    \"\"\"\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1. \n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n-1))\n\n# Test cases"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    # Calculate the sum of the digits\n    total_sum = sum(int(digit) for digit in binary)\n    # Convert the sum to binary and return as a string\n    return bin(total_sum)[2:]\n\n# Test cases"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Test cases"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n\n# Test cases"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda y: (y[0], -y[1]))\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n# Test cases"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * (ord(char.lower()) - ord('a'))\n            encrypted_char = chr((shift + 1) % 26 + ord('a'))\n            encrypted_string += encrypted_char.upper() if char.isupper() else encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n# Test cases"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))  # remove duplicates\n    lst.sort()  # sort the list\n    return lst[1] if len(lst) > 1 else None\n\n# Test cases"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\" .\n    Sentences are delimited by '.', '?' or'!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Count the number of sentences starting with \"I\"\n    boredoms = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return boredoms\n\n# Test the function"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2) % 26 + ord('A') if char.isupper() else (ord(char) + 2) % 26 + ord('a'))\n            else:\n                encoded_message += char.upper() if char.islower() else char.lower()\n        else:\n            encoded_message += char\n    return encoded_message\n\n# Test cases"}
{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_and_sum_of_digits(lst):\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return None\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n\n# Test cases"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    if not d:  # if the dictionary is empty, return False\n        return False\n    keys_lower = all(isinstance(k, str) and k.islower() for k in d.keys())\n    keys_upper = all(isinstance(k, str) and k.isupper() for k in d.keys())\n    return keys_lower or keys_upper\n\n# Test cases"}
{"task_id": "HumanEval/96", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n# Test cases"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Extract the unit digits of the numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Test cases"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n   \n    For example:\n    count_upper('aB CdEf' ) returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBB E') returns 0 \n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n# Test cases"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return round(num + 0.5)\n    else:\n        return round(num - 0.5)\n\n# Test cases"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones\n\n# Testing the function"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]\n\n# Test cases"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusively. If \n    there's no such number, the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14   choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n# Test cases"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n  \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])\n\n# Test cases"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Define the mapping from numbers to their names\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Filter out numbers not in the range 1-9 and sort the remaining numbers\n    arr = sorted([num for num in arr if 1 <= num <= 9])\n\n    # Reverse the array\n    arr = arr[::-1]\n\n    # Replace each number with its corresponding name\n    arr = [num_to_name[num] for num in arr]\n\n    return arr\n\n# Test the function"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    def sum_to_n(x):\n        return sum(range(1, x + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i:] + arr[:i] == sorted(arr):\n                return True\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases"}
{"task_id": "HumanEval/111", "solution": "def histogram(s):\n    # Split the string into a list of words\n    words = s.split()\n\n    # Create an empty dictionary to store the histogram\n    hist = {}\n\n    # Iterate over the list of words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in hist:\n            hist[word] += 1\n        # Otherwise, add the word to the dictionary with a count of 1\n        else:\n            hist[word] = 1\n\n    # Find the maximum count\n    max_count = max(hist.values(), default=0)\n\n    # Create a new dictionary to store the words with the maximum count\n    result = {word: count for word, count in hist.items() if count == max_count}\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all the characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)\n\n# Test the function"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\n# Test cases"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    # Flatten the grid and sort the wells in descending order\n    wells = sorted(sum(grid, []), reverse=True)\n    # Initialize the number of buckets and the total number of wells\n    num_buckets = 0\n    total_wells = len(wells)\n    # Loop through the wells\n    for well in wells:\n        # Calculate the number of buckets needed for this well\n        buckets_needed = math.ceil(well / capacity)\n        # If there are enough buckets, decrease the well by the capacity\n        if num_buckets >= buckets_needed:\n            num_buckets -= buckets_needed\n        # If there are not enough buckets, increase the number of buckets\n        else:\n            num_buckets += (buckets_needed - num_buckets)\n    # Return the total number of wells\n    return total_wells\n\n# Test the function"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n# Test cases"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    return [word for word in s.split() if count_consonants(word) == n]\n\n# Test cases"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word.strip()\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\n# Test cases"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Initialize a counter for open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # Iterate over each string in the list\n    for string in lst:\n        # Iterate over each character in the string\n        for char in string:\n            # If the character is an open parenthesis, increment the counter\n            if char == '(':\n                open_count += 1\n            # If the character is a close parenthesis, increment the counter\n            elif char == ')':\n                close_count += 1\n\n    # If the number of open parentheses is equal to the number of close parentheses, return 'Yes'\n    if open_count == close_count:\n        return 'Yes'\n    # Otherwise, return 'No'\n    else:\n        return 'No'\n\n# Test the function"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements from the sorted array\n    return arr[:k]\n\n# Test the function"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n       Input: arr =[111,21,3,4000,5,6,7,8,9], k =4\n       Output: 24 # sum of 2 1  + 3\n    Constraints:\n       1.  1<= len(arr) <= 100\n    2. 1 <= k <= len(arr) \n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n\n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # If the number of digits in the current element is at most 2, add it to sum\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n\n    return sum\n\n# Test the function\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    odd_numbers = [n] + [x for x in collatz(n) if x % 2 != 0 and x != n]\n    return sorted(list(set(odd_numbers)))\n\n# Test cases"}
{"task_id": "HumanEval/124", "solution": "import re\n\ndef valid_date(date):\n    \"\"\"\n    This function validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\n       And the number of days is not less than 1 or higher than 29 days for the month 2.\n    3. The month should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    For example:\n    valid_date('03-11-2000') => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040') => False\n    valid_date('06-04-2020')=> True\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if date is not empty\n    if date:\n        # Check if date is in correct format\n        if re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n            month, day, year = map(int, date.split('-'))\n            # Check if month is valid\n            if 1 <= month <= 12:\n                # Check if day is valid for February\n                if month == 2:\n                    if 1 <= day <= 29:\n                        return True\n                # Check if day is valid for 30 day months\n                elif month in [4, 6, 9, 11]:\n                    if 1 <= day <= 30:\n                        return True\n                # Check if day is valid for 31 day months\n                elif month in [1, 3, 5, 7, 8, 10, 12]:\n                    if 1 <= day <= 31:\n                        return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    # Check if list is sorted in ascending order\n    if lst == sorted(lst):\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Check if the intervals intersect\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n\n    # Calculate the intersection\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length of the intersection is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n\n    return \"YES\"\n\n# Test cases"}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum\n\n# Test cases"}
{"task_id": "HumanEval/129", "solution": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    visited = set([(0, 0)])\n\n    while heap:\n        val, x, y, path = heapq.heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(heap, (grid[nx][ny], nx, ny, new_path))\n\n# Test cases\ngrid1 = [[1,2,3], [4,5,6], [7,8,9]]\nk1 = 3"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 3]\n    if n == 2:\n        return [0, 3, 2]\n    if n == 3:\n        return [0, 3, 2, 8]\n\n    tri_seq = [0, 3, 2, 8]\n    for i in range(4, n+1):\n        if i % 2 == 0:\n            tri_seq.append(1 + i // 2)\n        else:\n            tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i - 3])\n    return tri_seq\n\n# Test cases"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0\n\n# Test cases"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    return sum(int(num ** 2) for num in lst)\n\n# Test cases"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n\n    # Check if the last character is a letter\n    if txt[-1].isalpha():\n        # Check if the last character is not part of a word\n        if len(txt) == 1 or not txt[-2].isalpha():\n            return True\n\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it.  If\n    no such element exists, then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n     can_arrange([1,2,4,3,5]) = 3\n     can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n\n# Test cases"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Check if both inputs are of the same type\n    if type(a) != type(b):\n        return None\n\n    # If inputs are integers or floats, return the larger one\n    if isinstance(a, (int, float)):\n        return max(a, b)\n\n    # If inputs are strings, replace ',' with '.' and convert to floats\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        return max(a, b)\n\n# Test cases"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8:\n        return False\n    else:\n        return n % 4 == 0\n\n# Test cases"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/140", "solution": "import re\n\ndef fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n\n    # If there are more than 2 consecutive underscores, replace them with -\n    text = re.sub(r'_{3,}', '-', text)\n\n    # If there are leading or trailing underscores, remove them\n    text = text.strip('_')\n\n    return text\n\n# Test cases"}
{"task_id": "HumanEval/141", "solution": "import re\n\ndef file_name_check(file_name):\n    \"\"\"\n    This function checks if a file name is valid based on the given conditions.\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a letter\n    if not re.match(r'^[a-zA-Z].*', file_name.split('.')[0]):\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n\n# Test cases"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum\n\n# Test cases"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n# Test cases"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    return (x_num * n_den) == (n_num * x_den)\n\n# Test cases"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    # Create a list of tuples where each tuple contains a number and its sum of digits\n    nums_with_points = [(num, sum(map(int, str(abs(num)))) if num >= 0 else -sum(map(int, str(abs(num))))) for num in nums]\n    # Sort the list of tuples first by the sum of digits, then by the original index\n    nums_with_points.sort(key=lambda x: (x[1], nums.index(x[0])))\n    # Return the list of numbers sorted by the sum of their digits\n    return [num for num, _ in nums_with_points]\n\n# Test the function\nassert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\nassert order_by_points([]) == []"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Test the function"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    planet1 = planet1.strip().capitalize()\n    planet2 = planet2.strip().capitalize()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])\n\n# Test cases"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda s: (len(s), s))\n    return lst\n\n# Test the function\nassert sorted_list_sum([\"aa\", \"a\",\"a aa\"]) == [\" aa\"]\nassert sorted_list_sum([\"ab \",\"a\", \"aaa\", \"cd\"]) == [\" ab \", \"cd\"]"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is a prime number, otherwise return y.\"\"\"\n    return x if is_prime(n) else y\n\n# Test cases"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    odd_squares = [n**2 for n in lst if isinstance(n, int) and n > 0 and n % 2 != 0]\n    return sum(odd_squares) * 2\n\n# Test cases"}
{"task_id": "HumanEval/152", "solution": "def compare(scores, guesses):\n    if len(scores) != len(guesses):\n        raise ValueError(\"Scores and guesses must be of the same length\")\n    return [abs(s - g) if s != g else 0 for s, g in zip(scores, guesses)]\n\n# Test cases"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_strength = -float('inf')\n    strongest_extension = None\n\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n\n# Test cases"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    \"\"\"\n    This function checks if any rotation of the second string is a substring of the first string.\n    \"\"\"\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # If b is not a substring, check all rotations of b\n    for i in range(len(b)):\n        b = b[-1:] + b[:-1]\n        if b in a:\n            return True\n\n    # If no rotation of b is a substring of a, return False\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n# Test cases"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the triangle is right-angled\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test cases"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word\n\n# Test cases\nassert find_max([\"name\", \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        total = number + need\n        left = 0\n    else:\n        total = number + remaining\n        left = need - remaining\n    return [total, left]\n\n# Test cases"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Check if the length of operator and operand are valid\n    if len(operator) + 1 != len(operand):\n        raise ValueError(\"The length of operator list is equal to the length of operand list minus one.\")\n    if len(operand) < 2:\n        raise ValueError(\"Operand list has at least two operands.\")\n    if len(operator) < 1:\n        raise ValueError(\"Operator list has at least one operator.\")\n\n    # Build the algebraic expression\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n\n    # Evaluate the algebraic expression\n    return eval(expression)\n\n# Test the function"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    has_letters = False\n    result = ''\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letters:\n        result = result[::-1]\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# Test cases"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    # Swap a and b if a is greater than b\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store the even numbers\n    even_numbers = []\n\n    # Iterate over the range from a to b\n    for i in range(a, b+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # If the number is even, append it to the list\n            even_numbers.append(i)\n\n    # Return the list of even numbers\n    return even_numbers\n\n# Test the function"}
