{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in Given list Of numbers, are any Two numbers closer to each Other Than\n    Given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] <= threshold:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n    result = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i+1])\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an Integer part (largest integer smaller than given number) and decimals\n    (left over part always smaller than 1).\n\n    Return the Decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Test the function"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate mean absolute deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a central point (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n\n# Test the function"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a Number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results\n\n# Test the function\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter a list of strings Only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]\n\n# Test cases"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n\n# Test cases"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the Shortest Palindrome That Begins With a Supplied string.\n    Algorithm idea is simple:\n    - find the longest suffix of supplied string that is a palindrome.\n    - append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n# Test cases"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Check if the inputs are valid\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    if not all(x in '01' for x in a) or not all(x in '01' for x in b):\n        raise ValueError(\"Input strings must only contain 1s and 0s\")\n\n    # Perform XOR operation\n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n# Test cases"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string))]\n\n# Test the function"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a String containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n\n# Test cases"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n# Test cases"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'O|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numerals from 'ZERO' to 'NINE'.\n    Valid choices are 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT' AND 'NINE'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('THREE ONE FIVE')\n    'ONE FIVE THREE'\n    \"\"\"\n    num_dict = {\n        'ZERO': 0,\n        'ONE': 1,\n        'TWO': 2,\n        'THREE': 3,\n        'FOUR': 4,\n        'FIVE': 5,\n        'SIX': 6,\n        'SEVEN': 7,\n        'EIGHT': 8,\n        'NINE': 9\n    }\n\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n# Test cases"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two), select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]\n\n# Test the function"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any Python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n# Testing the function"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length Of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n# Testing the function"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For A given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Test cases"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test cases"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of Integers, Remove all elements that occur more than once.\n    keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    counts = {}\n    result = []\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n        if counts[num] == 1:\n            result.append(num)\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For A given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string\n\n# Test cases"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" ConCateNate list oF strings inTo a siNgle sTring\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n# Testing the function"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n# Test cases"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n > 0]\n\n# Testing the function"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return True if a Given number is Prime, and False otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are CoefFicieNts Of a poLynomIal.\n    find_ZerO find x SucH ThAt poly(x) = 0.\n    Find_ZEro Returns only onLY Zero Point, even iF there are manY.\n    MoreOvER, fInD_ZeRo onlY takes list xs hAViNG EveN nUMBer Of COeFficiEntS\n    anD LarGest nOn zErO cOEFFicIent as it gUARAntees\n    a solUtIOn.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 0:\n        return None\n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        return None\n    return -largest_coeff / (2 * xs[1])\n\n# Test cases"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This FuncTion tAkeS a list l and ReturNs a list l' such ThaT\n    l' is idEntICaL tO l in the INdiCies that are noT DIvisIble by threE, while its valUes at ThE InDiCIeS that Are diviSIbLE By tHrEE Are EqUAl\n    To the ValUes OF thE corrEspOnDiNG INdiCies of l, but SORTed.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    sorted_third = sorted([l[i] for i in range(len(l)) if (i+1) % 3 == 0])\n    l_prime = l.copy()\n    for i in range(len(l)):\n        if (i+1) % 3 == 0:\n            l_prime[i] = sorted_third.pop(0)\n    return l_prime\n\n# Test cases"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Test the function"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n# Testing the function"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices\n    are equal to the values of the even indices of l, but sorted.\n    \"\"\"\n    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    l_prime = l[:]\n    for i in range(0, len(l), 2):\n        l_prime[i] = even_indices_values.pop(0)\n    return l_prime\n\n# Test cases"}
{"task_id": "HumanEval/38", "solution": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Test cases\noriginal_string = \"Hello, World!\"\nencoded_string = encode_cyclic(original_string)\ndecoded_string = decode_cyclic(encoded_string)\n"}
{"task_id": "HumanEval/39", "solution": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int) -> int:\n    i, count = 1, 0\n    while count < n:\n        f = fibonacci(i)\n        if is_prime(f):\n            count += 1\n        i += 1\n    return fibonacci(i - 1)\n\n# Test cases"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triPles_Sum_to_ZerO takeS a list of iNtegers As aN inpuT.\n    it REtUrNs True if THerE are three distINCt elEments in the list tHat\n    sum to zero, And False otHeRWiSe.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinite long line.\n    n Cars are driving left to right; simultaneously, a different set of n Cars\n    are driving right to left. The two sets of cars start out very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the Number of such collisions.\n    \"\"\"\n    # Initialize the count of collisions\n    collision_count = 0\n\n    # Each car is represented by a tuple (direction, position).\n    # Direction is 1 for moving right to left and -1 for moving left to right.\n    # Position is the distance from the start of the road.\n    cars = [(1, i) for i in range(n)] + [(-1, i) for i in range(n)]\n\n    # Sort the cars by their positions.\n    cars.sort(key=lambda x: x[1])\n\n    # Iterate over the sorted list of cars.\n    for i in range(2*n):\n        # If two cars collide, increment the collision count.\n        if cars[i][0] + cars[i+1][0] == 0:\n            collision_count += 1\n\n    return collision_count\n\n# Test the function"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]\n\n# Testing the function"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Changes the numerical base of input number x to base.\n    Returns string representation after the conversion.\n    Base numbers are less than 10.\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n# Test cases"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Test the function"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n# Test cases"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of Elements in The list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n# Test cases"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# Test cases"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (Be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\n# Test cases"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\n\n# Testing\noriginal_string = \"hello\"\nencoded_string = encode_shift(original_string)\ndecoded_string = decode_shift(encoded_string)\n"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(i < t for i in l)\n\n# Test cases"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n# Testing the function"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    CheCk if Two woRds Have tHe samE characTerS.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n\n# Test the function"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n# Test cases"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n# Test cases"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\n# Test cases"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test cases"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n\n# Test cases"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represents coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * X^2 + ....\n     Return derivative of this Polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - 2):\n            a, b, c = b, c, a + b + c\n        return c\n\n# Test cases"}
{"task_id": "HumanEval/64", "solution": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"\n    Write a function vowels_count which takes a String representing\n    A word as input and returns The number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'Y' IS also A\n    Vowel, but only when it is AT the end of the given word.\n\n    example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    digits = list(str(x))\n    if shift > len(digits):\n        return ''.join(digits[::-1])\n    else:\n        return ''.join(digits[-shift:] + digits[:-shift])\n\n# Test cases"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    Write a function that takes a string as input and returns the sum of the uppercase characters only.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[2])\n    return n - apples - oranges\n\n# Test cases"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    if not arr:\n        return []\n\n    smallest_even = float('inf')\n    smallest_even_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num <= smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_even_index]\n\n# Test cases"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    '''\n    You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than \n    zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElf. \n    The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n    IF nO Such a vaLue exIst, return -1.\n    exampLEs:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    from collections import Counter\n    c = Counter(lst)\n    max_freq = max(c.values())\n    for i in range(1, max_freq+1):\n        nums_with_freq_i = [k for k, v in c.items() if v == i]\n        if nums_with_freq_i:\n            return max(nums_with_freq_i)\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    '''\n    GivEn list of IntegErs, return list in StranGe ordEr.\n    StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n    tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n    exAMPleS:\n    sTRAngE_sORt_List([1, 2, 3, 4]) == [1, 4, 2, 3]\n    sTraNge_SOrt_List([5, 5, 5, 5]) == [5, 5, 5, 5]\n    sTraNgE_sORT_LisT([]) == []\n    '''\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop())\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n# Test cases"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    is_balanced = q == q[::-1]\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    sum_q = sum(q)\n    return is_balanced and sum_q <= w\n\n# Test cases"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n    Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n    iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n    for exAmpLe:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Initialize the count of changes to 0\n    changes = 0\n\n    # Iterate over the first half of the array\n    for i in range(len(arr)//2):\n        # If the elements at the current index and its corresponding index from the end are not the same\n        if arr[i] != arr[-i-1]:\n            # Increment the count of changes\n            changes += 1\n\n    # Return the count of changes\n    return changes\n\n# Test cases"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    # Calculate total number of characters in both lists\n    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n\n    # If total characters in lst1 is less than lst2, return lst1\n    if total_chars1 < total_chars2:\n        return lst1\n    # If total characters in lst2 is less than lst1, return lst2\n    elif total_chars2 < total_chars1:\n        return lst2\n    # If total characters in both lists are equal, return lst1\n    else:\n        return lst1\n\n# Test cases"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and is_prime(a)\n\n# Test cases"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 1:\n        return True\n    if x == 1 or x == 0:\n        return True\n    if n == 0 and x != 1:\n        return False\n    while x > 1:\n        x /= n\n        if x == int(x):\n            continue\n        else:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS True \n    if THiS iNgegER is a Cube of some intEGEr nuMber.\n    Note: yoU may assume thE inpuT iS AlWaYS vAlid.\n    EXamples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    x = round(a ** (1. / 3))\n    return x ** 3 == a\n\n# Test cases"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n\n    # Initialize the count of prime hexadecimal digits\n    count = 0\n\n    # Iterate over each character in the input string\n    for char in num:\n        # If the character is a prime hexadecimal digit, increment the count\n        if char in prime_hex_digits:\n            count += 1\n\n    return count\n\n# Test the function"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary_str = ''.join(['1' if bit == '0' else '0' for bit in binary])\n    return f\"db{binary_str}Db\"\n\n# Test cases"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of letter grades.\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Test the function\nassert(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-'])"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    length = len(string)\n    if length == 0 or length == 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n    POsItIve iNTegErs that start oR ENd wiTh 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return 2 * 5**(n-2)\n\n# Test cases"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits in the binary representation\n    sum_of_digits = sum(int(digit) for digit in binary)\n    \n    # Convert the sum to binary and return as a string\n    return bin(sum_of_digits)[2:]\n\n# Test cases"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n# Test cases"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word, key=lambda c: -ord(c))) for word in words]\n    return ' '.join(ordered_words)\n\n# Test cases"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n    whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n    eAch row may conTain a DiFFeReNT nUmber Of columNS.\n    GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n    And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n    each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n    Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n    AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n    \n    ExampleS:\n    get_Row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_RoW([], 1) == []\n    GeT_ROw([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, item in enumerate(row):\n            if item == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return array\n    else:\n        sum_of_indices = array[0] + array[-1]\n        if sum_of_indices % 2 == 0:\n            return sorted(array)\n        else:\n            return sorted(array, reverse=True)\n\n# Test cases"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lM'\n    encrypt('asdfghjkl') returns 'ewHjklnOp'\n    encrypt('gf') returns 'Kj'\n    encrypt('et') returns 'Ix'\n    \"\"\"\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n# Test cases"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n# Test cases"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Count the number of sentences starting with 'I' or 'i'\n    boredom_count = sum(1 for sentence in sentences if sentence[0].lower() == 'i')\n\n    return boredom_count\n\n# Test cases"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2) % 26 + ord('A') if char.isupper() else ord(char) + 2 % 26 + ord('a'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n\n# Test cases"}
{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"\n    You are given a list of Integers.\n    You need to find the largest PRIME Value And return The sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the OUTPUT Should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the OUTPUT should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] The Output should be 11\n    For lst = [0,81,12,3,1,21] the Output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum_digits(max_prime)\n\n# Test cases"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    keys_lower = [key.islower() for key in dictionary.keys()]\n    keys_upper = [key.isupper() for key in dictionary.keys()]\n    return all(keys_lower) or all(keys_upper)\n\n# Test cases"}
{"task_id": "HumanEval/96", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n# Test cases"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Convert the numbers to strings to easily access the digits\n    a = str(a)\n    b = str(b)\n\n    # Initialize the product to 0\n    product = 0\n\n    # Iterate over each digit in the second number\n    for digit in b:\n        # Multiply the current digit by the first number and add it to the product\n        product += int(a) * int(digit)\n\n    return product\n\n# Test the function with the examples from the problem statement"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n    \n    FoR example:\n    count_UPPer('abCdEf') returNs 1\n    count_upper('AbcdeFg') REtUrNS 0\n    cOunt_uPper('dBBe') ReTURns 0\n    \"\"\"\n    upper_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in upper_vowels:\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return round(num + 0.5)\n    else:\n        return round(num - 0.5)\n\n# Test cases"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    if n <= 0:\n        return []\n    else:\n        result = [n]\n        while n > 0:\n            n = n + 1 if n % 2 == 0 else n + 2\n            if n <=0:\n                break\n            result.append(n)\n        return result\n\n# Test cases"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(',', '').split()\n\n# Test cases"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This Function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. if \n    there's No Such number, Then the Function should return -1.\n\n    For EXample:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    else:\n        if x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n\n# Test cases"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg).replace(\"0b\", \"\")\n\n# Test cases"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])\n\n# Test cases"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out non-integer and numbers outside the range 1-9\n    arr = [i for i in arr if isinstance(i, int) and 1 <= i <= 9]\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Map each number to its corresponding name\n    num_to_name = {\n        1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\",\n        6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"\n    }\n    arr = [num_to_name[i] for i in arr]\n\n    return arr\n\n# Test cases"}
{"task_id": "HumanEval/106", "solution": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            count += 1\n    return count <= 1\n\n# Test cases"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"\n    This function takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"Yes\".\n    OTHERWISE, return \"No\".\n    For Example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"Yes\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"No\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n\n    if len(odd_lst1) <= len(even_lst2):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Test cases"}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Split the string into words\n    words = test.split()\n\n    # Create an empty dictionary to store the letter counts\n    letter_counts = {}\n\n    # Iterate over each word\n    for word in words:\n        # Convert the word to lowercase\n        word = word.lower()\n\n        # Iterate over each letter in the word\n        for letter in word:\n            # If the letter is already in the dictionary, increment its count\n            if letter in letter_counts:\n                letter_counts[letter] += 1\n            # Otherwise, add the letter to the dictionary with a count of 1\n            else:\n                letter_counts[letter] = 1\n\n    # Find the maximum count\n    max_count = max(letter_counts.values(), default=0)\n\n    # Create a new dictionary to store the letters with the maximum count\n    max_letters = {letter: count for letter, count in letter_counts.items() if count == max_count}\n\n    return max_letters\n\n# Test the function"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the resulting string is a palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)\n\n# Test the function"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {i+1} of the {i+1}nput.\")\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\n# Test cases"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    # Flatten the grid and count the number of 1s\n    flat_grid = [item for sublist in grid for item in sublist]\n    total_water = sum(flat_grid)\n\n    # Calculate the number of buckets needed\n    buckets_needed = math.ceil(total_water / capacity)\n\n    return buckets_needed\n\n# Test cases"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n# Test cases"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    consonants = [word for word in words if sum(1 for char in word if char not in vowels) == n]\n    return consonants\n\n# Test cases"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n\n# Test cases"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Check if the list has exactly two strings\n    if len(lst) != 2:\n        return 'No'\n\n    # Check if the strings contain only '(' and ')'\n    for string in lst:\n        if not set(string).issubset('()'):\n            return 'No'\n\n    # Check if the total number of '(' and ')' in both strings is even\n    total_parens = sum(string.count('(') for string in lst)\n    if total_parens % 2 != 0:\n        return 'No'\n\n    # Check if the number of '(' in the first string is greater than or equal to the number of ')' in the second string\n    first_string_open_parens = lst[0].count('(')\n    second_string_closed_parens = lst[1].count(')')\n    if first_string_open_parens < second_string_closed_parens:\n        return 'No'\n\n    return 'Yes'\n\n# Test cases"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sorted list \n    oF LeNgTh k wiTH thE maximum k numbers in arr.\n\n    ExampLE 1:\n\n        inpuT: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    ExaMple 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        OutPut: [4, 4]\n\n    ExAmPLe 3:\n\n        inPUt: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        outpuT: [2]\n\n    Note:\n        1. ThE LeNGTh oF tHE ArrAy WIlL be in thE raNge OF [1, 1000].\n        2. ThE elemEntS in tHe ARRAy wIll be in the rANGE of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return arr[:k]\n\n# Test cases"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n    thE sum Of ThE eleMEntS with at most twO digits FRom tHe first k eleMents of arr.\n\n    ExampLe:\n\n        InpUt: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        oUtPuT: 24 # sum Of 21 + 3\n\n    constRaints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Filter the first k elements of arr that have at most two digits\n    filtered_arr = [x for x in arr[:k] if x >= 0 and x <= 99]\n\n    # Return the sum of the filtered elements\n    return sum(filtered_arr)\n\n# Test the function\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(list(set(odd_numbers)))\n\n# Test cases"}
{"task_id": "HumanEval/124", "solution": "import re\n\ndef valid_date(date):\n    \"\"\"\n    This function validates a given date string and\n    returns True if the date is valid, otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. \n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-Dd-yyyy\n\n    For example: \n    valid_date('03-11-2000') => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040') => False\n    valid_date('06-04-2020') => True\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Check if the date is in the correct format\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for each month\n    if month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    elif month == 2 and day < 1 or day > 29:\n        return False\n    elif month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return [word.swapcase() for word in txt.split(',')]\n    else:\n        return sum(1 for c in txt if c.islower())\n\n# Test cases"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    if max(count_dict.values()) > 1:\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Check if intervals intersect\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        # Calculate intersection length\n        intersection_length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n        # Check if intersection length is a prime number\n        if intersection_length < 2:\n            return \"NO\"\n        for i in range(2, int(intersection_length**0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases"}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1)\n        sum_of_magnitudes += abs(num)\n    return sign_product * sum_of_magnitudes\n\n# Test cases"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    N = len(grid)\n    flattened_grid = [item for sublist in grid for item in sublist]\n    sorted_grid = sorted(flattened_grid)\n    min_path = sorted_grid[:k]\n    return min_path\n\n# Test cases"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    sequence = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence\n\n# Test cases"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    all_even = True\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            product *= digit\n            all_even = False\n    return 0 if all_even else product\n\n# Test cases"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    Round each element in the list to the upper int(ceiling) first.\n    Examples:\n    For lst = [1,2,3] the OUTPUT Should be 14\n    For lst = [1,4,9] the OUTPUT Should be 98\n    For lst = [1,3,5,7] The Output Should be 84\n    For lst = [1.4,4.2,0] the OUTPUT should be 29\n    For lst = [-2.4,1,1] the OUTPUT should be 6\n    \"\"\"\n    return sum(int(round(i ** 2)) for i in lst)\n\n# Test cases"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    # Remove leading and trailing spaces\n    txt = txt.strip()\n\n    # If the string is empty, return False\n    if not txt:\n        return False\n\n    # Split the string into words\n    words = txt.split(' ')\n\n    # Get the last word\n    last_word = words[-1]\n\n    # Get the last character of the last word\n    last_char = last_word[-1]\n\n    # Check if the last character is a letter\n    if last_char.isalpha():\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    This function returns the largest index of an element which is not greater than\n    or equal to the element immediately preceding it. If no such element exists, it\n    returns -1. The given array will not contain duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    '''\n    CreAte a FunctIon That rEturnS a tuple (a, b), wheRe 'a' Is\n    the LarGEsT oF negATivE integers, and 'b' IS The sMallest\n    of pOsitive integErs in a list.\n    IF tHErE iS No NegatIve or poSItIVE inTeGERs, return tHeM As none.\n\n    EXamPleS:\n    LarGest_sMalLeSt_INTEgeRs([2, 4, 1, 3, 5, 7]) == (None, 1)\n    larGEST_smallest_iNtEGers([]) == (NonE, None)\n    LarGest_sMAlLesT_IntEgErs([0]) == (nOne, NOne)\n    '''\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return largest_negative, smallest_positive\n\n# Test cases"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Check if both inputs are of the same type\n    if type(a) != type(b):\n        return None\n\n    # If both inputs are integers or floats, return the larger one\n    if type(a) in (int, float):\n        return max(a, b)\n\n    # If both inputs are strings, convert them to floats and return the larger one\n    if type(a) == str:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        return max(a, b)\n\n    # If none of the above conditions are met, return None\n    return None\n\n# Test cases"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8:\n        return False\n    else:\n        return n % 4 == 0\n\n# Test cases"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n        return fact * special_factorial(n - 1)\n\n# Test cases"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    new_text = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char.isspace():\n            consecutive_spaces += 1\n            if consecutive_spaces <= 2:\n                new_text += '_'\n        else:\n            new_text += char.replace(' ', '_')\n            consecutive_spaces = 0\n    return new_text\n\n# Test cases"}
{"task_id": "HumanEval/141", "solution": "import re\n\ndef file_name_check(file_name):\n    \"\"\"\n    This function checks if a file name is valid based on the following conditions:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'.\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the Latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    if re.search(r'\\d{4,}', file_name):\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into the name and extension\n    name, extension = file_name.split('.')\n\n    # Check if the name starts with a letter\n    if not name[0].isalpha():\n        return 'No'\n\n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n\n# Test cases"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n# Test cases"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    words = sentence.split(' ')\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Split the strings into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the new numerators and denominator\n    new_num = x_num * n_num\n    new_den = x_den * n_den\n\n    # Check if the new numerator is a whole number\n    if new_num % new_den == 0:\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to their sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    for example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))\n\n# Test cases"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n# Test the function"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index > planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n        return tuple(planets[i] for i in range(planet1_index+1, planet2_index))\n\n# Test cases"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    lst = [i for i in lst if len(i) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n\n# Test cases\nassert sorted_list_sum([\"aa\", \"A\", \"AaA\"]) == [\"Aa\"]\nassert sorted_list_sum([\"ab\", \"A\", \"AaA\", \"Cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is a prime number, otherwise return y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Test cases"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n    return sum(odd_squares) * 2\n\n# Test cases"}
{"task_id": "HumanEval/152", "solution": "def compare(scores, guesses):\n    if len(scores) != len(guesses):\n        raise ValueError(\"Scores and guesses must be of the same length\")\n    return [abs(score - guess) if score != guess else 0 for score, guess in zip(scores, guesses)]\n\n# Test cases"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strengths = {}\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        strengths[extension] = strength\n    strongest_extension = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_extension}\"\n\n# Test cases"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    # Convert both strings to lowercase for case insensitive comparison\n    a = a.lower()\n    b = b.lower()\n\n    # Check if b is a substring of a or any of its rotations\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[-1:] + b[:-1]  # rotate b\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n# Test cases\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the triangle is a right-angled triangle\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word.lower()))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word\n\n# Test cases"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n# Test cases"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Initialize the result as the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    reversed_s = s[::-1]\n    result = ''\n    for char in reversed_s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n\n    if result == s:\n        return result[::-1]\n    else:\n        return result\n\n# Test cases"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n    if 'text' is aN emPTy StRing, return nOne.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# Test the function"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\n# Test cases"}
