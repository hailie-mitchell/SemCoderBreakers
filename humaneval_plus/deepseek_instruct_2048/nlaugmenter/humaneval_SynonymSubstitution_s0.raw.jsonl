{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than \n     grant threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            temp += char\n        elif char == \")\":\n            stack.pop()\n            temp += char\n            if not stack:\n                result.append(temp)\n                temp = \"\"\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be disintegrate into \n     and integer region (largest integer smaller than given number) and decimals \n     (leftover function always little than 1). \n\n     Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)\n\n# Test cases"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation \n     around the mean of this dataset. \n     Mean Absolute Deviation is the average absolute difference between each \n     element and a centerpoint (mean in this case ): \n     MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n\n# Test the function\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test case 1 failed\"\nassert mean_absolute_deviation([1.0, 1.0, 1.0, 2.0, 2.0]) == 0.4, \"Test case 2 failed\"\nassert mean_absolute_deviation([-1.0, -1.0, 1.0, 1.0]) == 0.0, \"Test case 3 failed\"\n"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by space. \n     For each of the group, output the thick grade of nesting of digression. \n     E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the string into groups\n    groups = paren_string.split()\n\n    # Initialize a list to store the maximum depth of each group\n    max_depths = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize a counter for the current depth and the maximum depth\n        current_depth = 0\n        max_depth = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an open parenthesis, increment the current depth\n            if char == '(':\n                current_depth += 1\n\n                # If the current depth is greater than the maximum depth, update the maximum depth\n                if current_depth > max_depth:\n                    max_depth = current_depth\n\n            # If the character is a close parenthesis, decrement the current depth\n            elif char == ')':\n                current_depth -= 1\n\n        # Append the maximum depth to the list\n        max_depths.append(max_depth)\n\n    return max_depths\n\n# Test the function"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain grant substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Testing the function"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), numbers[0]*numbers[1])\n\n# Test cases"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    max_num = numbers[0]\n    result = [max_num]\n\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n\n    return result\n\n# Testing the function\nassert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a issue string.\n     Algorithm theme is elementary: \n     - rule the longest suffix of issue string that is a palindrome. \n     - Append to the conclusion of the string reversion of a string prefix that come before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n# Test cases"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and zero. \n     Perform binary XOR on these inputs and return result besides as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Check if the lengths of the strings are equal\n    if len(a) != len(b):\n        raise ValueError(\"Both strings should have the same length\")\n\n    # Perform XOR operation\n    result = []\n    for i in range(len(a)):\n        # XOR operation\n        result.append(str(int(a[i]) ^ int(b[i])))\n\n    return \"\".join(result)\n\n# Test the function"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n# Test cases"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integer a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the remark string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n# Test the function"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n\n# Test cases"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set(string.lower())\n    count = sum(1 for char in distinct_characters if char.isalpha())\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'oxygen':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n# Test the function"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space - delimited string of numberals from' zero' to' nine'. \n     Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n     Return the chain with numbers sorted from minor to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n# Test cases"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n     other and return them in order (smaller number, larger phone number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n     such that the minor number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n# Test the function"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integer\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n# Testing the function"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n# Testing the function"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest phone number that divide n evenly, little than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Test the function"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test cases"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once. \n    observe holy order of element left the like as in the remark.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n\n# Test the function"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n# Test cases"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a grant prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n# Testing the function"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n > 0]\n\n# Testing the function"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial. \n     find_zero find x such that poly(x) = 0. \n     find_zero returns merely merely zero distributor point, even if there be many. \n     furthermore, find_zero entirely take list xs having even number of coefficients \n     and big non zero coefficient as it guarantees \n     a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 0 and xs[0] != 0:\n        return -xs[1]/xs[0]\n    else:\n        return 0\n\n# Test cases"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that \n     l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are adequate \n     to the value of the equate indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    divisible_by_three = [(i, v) for i, v in enumerate(l) if i % 3 == 0]\n    sorted_values = sorted(v for _, v in divisible_by_three)\n    l_prime = l[:]\n    for (i, _), sorted_value in zip(divisible_by_three, sorted_values):\n        l_prime[i] = sorted_value\n    return l_prime\n\n# Test cases"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Test the function"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n# Testing the function"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    sorted_even_values = sorted(even_indices_values)\n    l[::2] = sorted_even_values\n    return l\n\n# Test cases"}
{"task_id": "HumanEval/38", "solution": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. recurrence decode drawstring. \n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Test cases\noriginal_string = \"Hello, World!\"\nencoded_string = encode_cyclic(original_string)\ndecoded_string = decode_cyclic(encoded_string)\n"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n# Test cases"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input. \n     it return True if there be three distinct elements in the list that \n     kernel to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly square boundlessly long line. \n     n car are drive exit to correctly;   simultaneously, a unlike set of n car \n     are drive right to left.    The two sets of cars start out be very far from \n     each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n     when a car that's move left to proper hit a car that's move good to left. \n     However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n     in their trajectory as if they did not clash. \n\n     This function output the number of such collisions. \n    \"\"\"\n    # The number of collisions is equal to the number of cars moving right to left\n    # because each car moving right to left will collide with each car moving left to right.\n    return n\n\n# Test the function\nassert car_race_collision(10) == 10, \"Test case 1 failed\"\nassert car_race_collision(100) == 100, \"Test case 2 failed\"\nassert car_race_collision(1000) == 1000, \"Test case 3 failed\"\n"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]\n\n# Testing the function"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input. \n    it return True if there be two distinct elements in the list that \n    kernel to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation of the number after the conversion. \n    base number are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '01'*base))\n"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area of a triangle.\n    \"\"\"\n    return 0.5 * a * h\n\n# Test the function\nassert triangle_area(5, 3) == 7.5, \"Test case 1 failed\"\nassert triangle_area(10, 2) == 10.0, \"Test case 2 failed\"\nassert triangle_area(3, 4) == 6.0, \"Test case 3 failed\"\n"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n# Test cases"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n# Test cases"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# Testing the function"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)\n\n# Test cases"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift routine. rejoinder decoded string. \n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\n# Testing\noriginal_text = \"hello world\"\nencoded_text = encode_shift(original_text)\ndecoded_text = decode_shift(encoded_text)\n"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n# Testing the function"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n# Testing the function"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same character.\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n\n# Test cases"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n# Testing the function"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increase or decrease.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n# Test cases"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\n# Test cases"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and not a flower.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test cases"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))\n\n# Test cases"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial. \n     xs[0] + xs[1] * x + xs[2] * x^2 +.... \n      Return derivative of this polynomial in the same mannequin.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i*xs[i] for i in range(1, len(xs))]\n\n# Test cases"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_values = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_values.append(fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3])\n        return fibfib_values[n]\n\n# Test cases"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits veracious by shift\n     and return the resultant role as a bowed stringed instrument. \n     If shift > numeral of digits, return finger reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = list(str(x))\n    if shift > len(digits):\n        return ''.join(digits[::-1])\n    else:\n        return ''.join(digits[shift:] + digits[:shift])\n\n# Test cases"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    # Split the string to get the number of apples and oranges\n    apples, oranges = map(int, s.split()[2::2])\n    # Subtract the number of apples and oranges from the total fruit to get the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n\n# Test cases"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even_node = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [smallest_even_node[1], smallest_even_node[0]]\n\n# Test cases"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the keys in the dictionary in descending order\n    for num in sorted(freq.keys(), reverse=True):\n        # If the frequency of the current number is greater than or equal to the value of the number, return the number\n        if freq[num] >= num:\n            return num\n\n    # If no such number is found, return -1\n    return -1\n\n# Test the function"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))  # get the minimum\n        if len(lst) > 0:\n            result.append(lst.pop())  # get the maximum\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, \n    return the surface area of the spherical triangulum polygon \n    to 2 decimal points if the three sides form a valid triangle. \n    Otherwise, return -1.\n\n    A valid triangle is one where the sum of any two sides is greater \n    than the third side.\n\n    Example: \n    triangle_area(3, 4, 5) returns 6.00\n    triangle_area(1, 2, 10) returns -1\n    \"\"\"\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n\n# Test cases"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to w\n    if sum(q) <= w:\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n\n# Test cases"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in both lists\n    total_chars_lst1 = sum(len(s.strip()) for s in lst1)\n    total_chars_lst2 = sum(len(s.strip()) for s in lst2)\n\n    # Return the list with the lesser total number of characters\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Test cases"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    factors = []\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        for i in range(2, n + 1):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n                prime_factors(n // i)\n                break\n\n    prime_factors(a)\n    return len(factors) == 3 and a == factors[0] * factors[1] * factors[2]\n\n# Test cases"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 1:\n        return False\n    else:\n        i = 1\n        while i <= x:\n            if n ** i == x:\n                return True\n            i += 1\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(a ** (1. / 3.))\n    # Check if the cube of the cube root equals the original number\n    return cube_root ** 3 == abs(a)\n\n# Test cases"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex = ['2', '3', '5', '7', 'B', 'D', 'F']\n\n    # Initialize the count\n    count = 0\n\n    # Iterate over the input string\n    for digit in num:\n        # If the digit is a prime hexadecimal digit, increment the count\n        if digit.upper() in prime_hex:\n            count += 1\n\n    return count\n\n# Test the function"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \" db\" + binary + \"db \"\n\n# Test cases"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPA scores and returns a list of corresponding letter grades.\n    \"\"\"\n    # Define the grade scale\n    grade_scale = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Loop through the list of GPA scores\n    for grade in grades:\n        # Find the corresponding letter grade using the grade scale\n        for gpa in sorted(grade_scale.keys(), reverse=True):\n            if grade >= gpa:\n                letter_grades.append(grade_scale[gpa])\n                break\n\n    return letter_grades\n\n# Test the function"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n - 1))\n\n# Test cases"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the number to binary and remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    # Calculate the sum of the digits\n    sum_of_digits = sum(int(digit) for digit in binary_str)\n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(sum_of_digits)[2:]\n    return binary_sum\n\n# Test cases\nassert solve(1000) == \"1\"\nassert solve(150) == \"110\"\nassert solve(147) == \"1100\""}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integer lst, add the even element that cost at curious indices.\"\"\"\n    return sum(el for idx, el in enumerate(lst) if idx % 2 == 0 and el % 2 == 0)\n\n# Test cases"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n\n# Test cases"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested list, \n    which be similar to matrix, however, unlike matrices, \n    each row may contain a different phone number of columns. \n    hold lst, and integer x, find integers x in the list,\n    and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n    each tuple is a coordinate - (row, column), starting with 0. \n    Sort coordinates initially by row in ascending order. \n    Besides, sort coordinates of the course by column in descending order. \n\n    Examples: \n    get_row ([ \n      [ 1,2,3,4,5,6 ], \n      [ 1,2,3,4,1,6 ], \n      [ 1,2,3,4,5,1 ] \n    ], 1) returns [ (0, 0), (1, 4), (1, 0), (2, 5), (2, 0) ] \n    get_row ([ ], 1) returns [ ] \n    get_row ([ [ ], [ 1 ], [ 1, 2, 3 ] ], 3) returns [ (2, 2) ] \n    \"\"\"\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n\n    # Iterate over the rows\n    for i in range(len(lst)):\n        # Iterate over the columns\n        for j in range(len(lst[i])):\n            # If the value at the current coordinate is x, append the coordinate to the list\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n\n    # Sort the coordinates first by row in ascending order, then by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n\n    return coordinates\n\n# Test the function"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        # Calculate the union and sum of the first and last elements\n        union = array[0] + array[-1]\n        total_sum = sum(array)\n        \n        # If the union is odd, sort in ascending order\n        if union % 2 != 0:\n            return sorted(array)\n        # If the sum is even, sort in descending order\n        else:\n            return sorted(array, reverse=True)\n\n# Test cases"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_s += chr((ord(char) - ascii_offset + 2) % 26 + ascii_offset)\n        else:\n            encrypted_s += char\n    return encrypted_s\n\n# Test cases"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return None if second_smallest == float('inf') else second_smallest\n\n# Test cases"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task equal to reckon the number \n     of boredoms. A boredom is a sentence that starts with the word \" I \". \n     Sentences are delimited by'.','?' or'!'. \n   \n     For exemplar:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Count the number of sentences starting with \" I \"\n    boredoms = sum(1 for sentence in sentences if sentence.startswith('I '))\n\n    return boredoms\n\n# Test cases"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) - 32) % 26 + 65) if char.isupper() else chr((ord(char) - 32) % 26 + 97)\n            else:\n                encoded_message += chr((ord(char) - 65) % 26 + 65) if char.isupper() else chr((ord(char) - 97) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message\n\n# Test cases"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers. \n     You need to find the large choice value and return the sum of its digits. \n\n     example: \n     For lst = [ 0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3 ] the output signal should equal 10 \n     For lst = [ 1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1 ] the output should exist 25 \n     For lst = [ 1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3 ] the output should be 13 \n     For lst = [ 0,724,32,71,99,32,6,0,5,91,83,0,5,6 ] the output should exist 11 \n     For lst = [ 0,81,12,3,1,21 ] the output should be 3 \n     For lst = [ 0,8,1,2,1,7 ] the output should embody 7 \n     \" \" \"\n    \"\"\"\n    # Find the maximum value in the list\n    max_value = max(lst)\n\n    # Convert the maximum value to a string to easily access its digits\n    str_max_value = str(max_value)\n\n    # Sum the digits of the maximum value\n    sum_of_digits = sum(int(digit) for digit in str_max_value)\n\n    return sum_of_digits\n\n# Test cases"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    keys_lower = [key.islower() for key in dictionary.keys() if isinstance(key, str)]\n    keys_upper = [key.isupper() for key in dictionary.keys() if isinstance(key, str)]\n    return all(keys_lower) or all(keys_upper)\n\n# Test cases"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes\n\n# Test cases"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Get the last digit of each number\n    last_digit_a = abs(a) % 10\n    last_digit_b = abs(b) % 10\n\n    # Multiply the last digits together\n    result = last_digit_a * last_digit_b\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)\n\n# Test cases"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    float_val = float(value)\n    int_val = int(float_val)\n    decimal = float_val - int_val\n\n    if decimal < 0.5:\n        return int_val\n    elif decimal > 0.5:\n        return int_val + 1\n    else:\n        if int_val < 0:\n            return int_val - 1\n        else:\n            return int_val + 1\n\n# Test cases"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    pile = [n]\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(n + 2*i)\n        else:\n            pile.append(n + 2*i)\n    return pile\n\n# Test the function"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.split(',')\n\n# Test cases"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1\n\n# Test cases"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n\n# Test cases"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n     elements that taken't any tied digit. \n\n     Note: return list should be sorted in increase order. \n    \n     For exemplar:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_repeated_digit(n):\n        digits = set()\n        while n:\n            digit = n % 10\n            if digit in digits:\n                return True\n            digits.add(digit)\n            n //= 10\n        return False\n\n    return sorted([num for num in x if not has_repeated_digit(num)])\n\n# Test cases"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Define the mapping from numbers to their names\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Filter the array to only include numbers between 1 and 9 inclusive\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Replace each number in the array with its corresponding name\n    arr = [num_to_name[num] for num in arr]\n\n    return arr\n\n# Test the function"}
{"task_id": "HumanEval/106", "solution": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef union_of_numbers(n):\n    if n == 0:\n        return 0\n    else:\n        return n + union_of_numbers(n-1)\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(union_of_numbers(i))\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        elif num < 0:\n            num = str(num)\n            for digit in num[1:]:\n                if int(digit) >= 0 and int(digit) <= 9:\n                    count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    if arr[-1] > arr[0]:\n        count += 1\n    return count <= 1\n\n# Test cases"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_lst1 = sum(x % 2 != 0 for x in lst1)\n    even_lst2 = sum(x % 2 == 0 for x in lst2)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases"}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Create an empty dictionary to store the letter counts\n    letter_counts = {}\n\n    # Split the string into words\n    words = test.split()\n\n    # Iterate over each word\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in letter_counts:\n            letter_counts[word] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            letter_counts[word] = 1\n\n    # Find the maximum count\n    max_count = max(letter_counts.values()) if letter_counts else 0\n\n    # Return a dictionary of words with the maximum count\n    return {word: count for word, count in letter_counts.items() if count == max_count}\n\n# Test the function"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Remove characters in c from s\n    for ch in c:\n        s = s.replace(ch, '')\n\n    # Check if the result string is a palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)\n\n# Test cases"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(c) % 2 for c in s)\n        template = \"the number of odd elements {}n the str{}ng {} of the {}nput.\"\n        result.append(template.format(odd_digits, odd_digits, odd_digits, odd_digits))\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimal sum of any non-empty subarray of nums.\n    Example:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\n# Test cases"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    # Flatten the grid and sort the list in descending order\n    wells = sorted(sum(grid, []))[::-1]\n    # Initialize the number of buckets and the total number of water units\n    num_buckets, total_units = 0, 0\n    # Iterate over the sorted list of wells\n    for well in wells:\n        # If the total number of water units plus the capacity of the next bucket \n        # is less than or equal to the capacity of the bucket, \n        # add the well to the total number of water units\n        if total_units + capacity <= well:\n            total_units += well\n        # Otherwise, add the well to the total number of water units \n        # and increment the number of buckets\n        else:\n            total_units += well\n            num_buckets += 1\n    # Return the number of buckets\n    return num_buckets\n\n# Test the function"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n# Test cases"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    consonant_words = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            consonant_words.append(word)\n\n    return consonant_words\n\n# Test cases"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    word = word.strip()\n    if len(word) < 3:\n        return ''\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n\n# Test cases"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Initialize counters for open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # Iterate over each string in the list\n    for string in lst:\n        # Iterate over each character in the string\n        for char in string:\n            # If the character is an open parenthesis, increment the counter\n            if char == '(':\n                open_count += 1\n            # If the character is a close parenthesis, increment the counter\n            elif char == ')':\n                close_count += 1\n\n    # If the number of open parentheses is equal to the number of close parentheses,\n    # return 'Yes' because it's possible to make a balanced string\n    if open_count == close_count:\n        return 'Yes'\n    # If the number of open parentheses is not equal to the number of close parentheses,\n    # return 'No' because it's not possible to make a balanced string\n    else:\n        return 'No'\n\n# Test cases"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n     of length k with the maximum k issue in arr.\n\n     model 1: \n\n         stimulation: arr = [ -3, -4, 5 ], k = 3 \n         Output: [ -4, -3, 5 ] \n\n     exemplar 2: \n\n         Input: arr = [ 4, -4, 4 ], k = 2 \n         output signal: [ 4, 4 ] \n\n     Example 3: \n\n         Input: arr = [ -3, 2, 1, 2, -1, -2, 1 ], k = 1 \n         output signal: [ 2 ] \n\n     Note: \n         1. The length of the array will be in the stove of [ 1, 1000 ]. \n         2. The elements in the array will be in the range of [ -1000, 1000 ]. \n         3. 0 < = k < = len(arr) \n     \" \" \"\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements from the sorted array\n    return arr[:k]\n\n# Test cases"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non - empty array of integers arr and an integer k, return\n     the sum of the elements with at most two digits from the inaugural k elements of arr.\n\n     exemplar: \n\n         Input: arr = [ 111,21,3,4000,5,6,7,8,9 ], k = 4 \n         output signal: 24 # sum of 21 + 3 \n\n     Constraints: \n         1. 1 < = len(arr) < = 100 \n         2. 1 < = k < = len(arr)\n     \" \" \"\n    \"\"\"\n    # Check if the constraints are satisfied\n    if not 1 <= len(arr) <= 100 or not 1 <= k <= len(arr):\n        return \"Constraints not satisfied\"\n\n    # Filter the first k elements of arr that have at most two digits\n    filtered_arr = [num for num in arr[:k] if len(str(abs(num))) <= 2]\n\n    # Return the sum of the filtered elements\n    return sum(filtered_arr)\n\n# Test the function"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    def collatz(n):\n        seq = []\n        while n != 1:\n            seq.append(n)\n            n = n // 2 if n % 2 == 0 else 3 * n + 1\n        seq.append(1)\n        return seq\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    return sorted([x for x in collatz(n) if is_odd(x)])\n\n# Test cases"}
{"task_id": "HumanEval/124", "solution": "import re\n\ndef valid_date(date):\n    \"\"\"\n    This function validates a date string based on the following rules:\n    1. The date string should be in the format: mm - doctor of divinity - yyyy\n    2. The month should be between 1 and 12\n    3. The day should be between 1 and 31, except for February which can be 1-29\n    4. For months with 30 days, the day should be between 1 and 30\n    5. The year should be a 4-digit number\n    \"\"\"\n    # Check if the date string is in the correct format\n    if not re.match(r'\\d{2} - \\d{2} - \\d{4}', date):\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = map(int, date.split(' - '))\n\n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is between 1 and 31\n    if day < 1 or day > 31:\n        return False\n\n    # Check if the day is valid for February\n    if month == 2:\n        if day > 29:\n            return False\n\n    # Check if the day is valid for April, June, September, and November\n    if month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n\n    # Check if the year is a 4-digit number\n    if year < 1000 or year > 9999:\n        return False\n\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            count += 1\n        if lst[i] == lst[i + 1] and i < len(lst) - 2 and lst[i + 1] < lst[i + 2]:\n            count += 1\n        if count > 1:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Check if intervals intersect\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n\n    # Calculate intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = end - start + 1\n\n    # Check if length of intersection is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\n# Test cases"}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod = 1\n    for num in arr:\n        if num < 0:\n            prod *= -1\n        elif num > 0:\n            prod *= 1\n        else:\n            return 0\n    return abs(prod)\n\n# Test cases"}
{"task_id": "HumanEval/129", "solution": "import heapq\n\ndef minPath(grid, k):\n    N = len(grid)\n    pq, seen, ans = [], set(), []\n    for r in range(N):\n        for c in range(N):\n            pq.append((grid[r][c], r, c))\n    heapq.heapify(pq)\n    while len(ans) < k:\n        v, r, c = heapq.heappop(pq)\n        if (r, c) in seen:\n            continue\n        seen.add((r, c))\n        ans.append(v)\n        for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n            if 0 <= nr < N and 0 <= nc < N and (nr, nc) not in seen:\n                heapq.heappush(pq, (grid[nr][nc], nr, nc))\n    return ans\n\n# Test cases"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n < 1:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 2]\n    # Initialize the list with the first three numbers of the sequence\n    trib = [3, 2, 8]\n    for i in range(3, n):\n        if trib[i-1] % 2 == 0:\n            trib.append(1 + trib[i-1] // 2)\n        else:\n            trib.append(trib[i-1] + trib[i-2] + trib[i])\n    return trib\n\n# Test the function"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n    return 0 if not has_odd else product\n\n# Test cases"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers. \n     You need to return the sum of squared numeral in the feed list,\n     round each element in the list to the upper int(Ceiling) first. \n     Examples: \n     For lst = [ 1,2,3 ] the output should be 14 \n     For lst = [ 1,4,9 ] the output signal should be 98 \n     For lst = [ 1,3,5,7 ] the output signal should be 84 \n     For lst = [ 1.4,4.2,0 ] the output should be 29 \n     For lst = [ -2.4,1,1 ] the output should embody 6 \n    \n\n     \" \" \"\n    \"\"\"\n    return sum(int(abs(num) + 0.5) ** 2 for num in lst)\n\n# Test cases"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    # Remove leading and trailing spaces\n    txt = txt.strip()\n    # Check if the string is empty\n    if not txt:\n        return False\n    # Check if the last character is a letter\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    max_exponent = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            exponent = 0\n            while arr[i] * 2 <= arr[i-1]:\n                arr[i] *= 2\n                exponent += 1\n            max_exponent = max(max_exponent, exponent)\n    return max_exponent\n\n# Test cases"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    max_damaging = None\n    min_positive = None\n\n    for num in lst:\n        if num < 0 and (max_damaging is None or num > max_damaging):\n            max_damaging = num\n        elif num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n\n    return (max_damaging, min_positive)\n\n# Test cases"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if a == b:\n        return None\n    else:\n        return max(a, b)\n\n# Test cases"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\"\"\"\n    return n % 4 == 0\n\n# Test cases"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/140", "solution": "import re\n\ndef fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace all sequences of more than 2 underscores with -\n    text = re.sub(r'_{3,}', '-', text)\n    return text\n\n# Test cases"}
{"task_id": "HumanEval/141", "solution": "import re\n\ndef file_name_check(file_name):\n    \"\"\"\n    This function checks if a file name is valid based on the given conditions.\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    if re.search(r'\\d{4,}', file_name):\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into the name part and the extension part\n    name, extension = file_name.split('.')\n\n    # Check if the name part starts with a letter and is not empty\n    if not re.match(r'^[a-zA-Z]', name):\n        return 'No'\n\n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all checks pass, the file name is valid\n    return 'Yes'\n\n# Test cases"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = \" \".join(words[1:-1])\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Simplify the fractions by multiplying numerators and denominators\n    num = x_num * n_num\n    den = x_den * n_den\n\n    # Check if the result is a whole number\n    return num % den == 0\n\n# Test cases"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integer \n     in ascending ordering according to the sum of their digit. \n     Note: if there are respective detail with like sum of their digits, \n     ordain them based on their index in original list.\n\n     For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Helper function to calculate the sum of digits\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    # Sort the list based on the sum of digits and the original index\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    return nums\n\n# Test cases"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1 = planet1.strip()\n    planet2 = planet2.strip()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])\n\n# Test cases"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Remove leading and trailing whitespaces and drawstrings\n    lst = [s.strip() for s in lst]\n    # Sort the list by length of each word, and then alphabetically\n    lst.sort(key=lambda s: (len(s), s))\n    return lst\n\n# Test the function"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n# Test cases"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    odd_numbers = [num for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0]\n    return sum([num**2 for num in odd_numbers])\n\n# Test cases"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    if len(game) != len(guess):\n        raise ValueError(\"game and guess must be the same length\")\n    return [abs(g - h) for g, h in zip(game, guess)]\n\n# Test cases"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_strength = -float('inf')\n    strongest_extension = ''\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}. {strongest_extension}\"\n\n# Test cases"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    # Check if b is a substring of a\n    if b in a:\n        return True\n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n# Test cases"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the triangle is a right-angle triangle\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word.strip()))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word.strip()\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word.strip())\n    return max_word\n\n# Test cases"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n# Test cases"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n# Test cases"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string. \n     If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# Test cases"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\n# Test cases"}
