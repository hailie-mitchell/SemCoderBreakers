{"date": "2024-12-10 00:50", "hash": "fe585eb4df8c88d844eeb463ea4d0302", "eval": {"HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in gave list of numbers, was any two numbers closer to each other than \n     gave threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into \n     and integer part (largest integer smaller than gave number) and decimalled \n     (leftover part always smaller than 1). \n\n     Returned the decimal part of the number.\n    \"\"\"\n    # Using the modulus operator to get the decimal part of the number\n    return number % 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    groups = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current_group:\n                stack.append(current_group)\n                current_group = \"\"\n            stack.append(char)\n        elif char == \")\":\n            stack.append(char)\n            current_group = \"\".join(stack[-2:])\n            if stack.count(\"(\") == stack.count(\")\"):\n                groups.append(current_group)\n                stack = []\n                current_group = \"\"\n        else:\n            raise ValueError(\"Invalid character in input string\")\n    if stack:\n        raise ValueError(\"Unbalanced parentheses in input string\")\n    return groups", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["(()()) ((())) () ((())()())"]], "plus_fail_tests": [["(())"]]}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n     For each of the group, outputted the deepest level of nesting of parentheses. \n     E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contained gave substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation \n     around the mean of this dataset. \n     Mean Absolute Deviation was the average absolute difference between each \n     element and a centerpoint (mean in this case): \n     MAD= average| x-x_mean|\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(x - mean) for x in numbers]\n    mad = sum(abs_diffs) / len(abs_diffs)\n    return mad", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input was two strings a and b consisting only of 1s and 0s. \n     Performed binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure both strings are of the same length\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''\n    for i in range(max_len):\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_num = numbers[0]\n    result = [max_num]\n\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that began with a supplied string.\n     Algorithm idea was simple: \n    -Found the longest postfix of supplied string that was a palindrome. \n    -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string))]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["asdfgh"]], "plus_fail_tests": [["Hello there!"]]}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, found out how many distinct characters (regardless of case) did it consisted of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, removed all elements that occurred more than once. \n    Kept order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    counts = {}\n    result = []\n    for num in numbers:\n        if num not in counts:\n            counts[num] = 1\n            result.append(num)\n        else:\n            counts[num] += 1\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4, 4]]]}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter gave list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n     Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n     Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "import math\ndef find_zero(xs: list):\n    \"\"\"\n    xs was coefficients of a polynomial. \n    find_zero found x such that poly(x)= 0. \n    find_zero returned only only zero point, even if there was many. \n    Moreover, find_zero only took list xs having even number of coefficients \n    and largest non zero coefficient as it guaranteed \n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 0:\n        return -xs[-1] / xs[-2]\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-10, -2]]], "plus_fail_tests": [[[5, 10, -3, 1]]]}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a gave number was prime, and false otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that was a perfectly straight infinitely long line. \n     n cars was driving left to right;   simultaneously, a different set of n cars \n     was driving right to left.    The two sets of cars started out being very far from \n     each other.   All cars moved in the same speed.   Two cars were said to collide \n     when a car that was moving left to right hit a car that was moving right to left. \n     However, the cars was infinitely sturdy and strong; as a result, they continued moving \n     in their trajectory as if they did not collide. \n\n     This function outputted the number of such collisions. \n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return n * (n - 1) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[5]]}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[4]]}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flips lowercase characters to uppercase and uppercased to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words had the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["eabcdzzzz", "dddzzzzzzzddeddabc"]], "plus_fail_tests": [["aaabbbccc", "abbabcbc"]]}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    divisible_by_three = [v for i, v in enumerate(l) if (i+1) % 3 == 0]\n    divisible_by_three.sort()\n    for i, v in enumerate(l):\n        if (i+1) % 3 == 0:\n            l[i] = divisible_by_three.pop(0)\n    return l", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], "plus_fail_tests": [[[9, 12, 15, 6, 3, 8, 10, 23, 7]]]}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Alone"]], "plus_fail_tests": [["JBXFOFH"]]}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l was below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n> 1 and was not a prime.\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n     return string representation after the conversion. \n     base numbers was less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not 2 <= base <= 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_values = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_values.append(fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3])\n        return fibfib_values[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you were given a string that represented a number of apples and oranges \n    that was distributed in a basket of fruit this basket contained \n    apples, oranges, and mango fruits. Gave the string that represented the total number of \n    the oranges and apples and an integer that represented the total number of the fruits \n    in the basket return the number of the mango fruits in the basket. \n    for example: \n    fruit_distribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n    fruit_distribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n    fruit_distribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n    fruit_distribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n    \"\"\"\n    apples = int(s.split(\"apples\")[0].split(\"and\")[1].strip())\n    oranges = int(s.split(\"oranges\")[0].split(\"apples\")[0].split(\"and\")[1].strip())\n    return n - apples - oranges", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["5 apples and 6 oranges", 19]], "plus_fail_tests": [["10 apples and 20 oranges", 50]]}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero took a list of integers as an input. \n     it returned True if there was two distinct elements in the list that \n     sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n     other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"\n    return 0.5 * a * h", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that started with a gave prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Write a function that took an integer a and returned True \n     if this ingeger was a cube of some integer number. \n     Note: you may assumed the input was always valid. \n     Examples: \n     iscube(1)==> True\n     iscube(2)==> False\n     iscube(-1)==> True\n     iscube(64)==> True\n     iscube(0)==> True\n     iscube(180)==> False\n     '''\n    x = round(a ** (1. / 3))\n    return x ** 3 == a or (x+1) ** 3 == a or (x-1) ** 3 == a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[-1]], "plus_fail_tests": [[-8]]}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            factors.append(i)\n            n //= i\n            if len(factors) > 3 or n == 1:\n                break\n\n    return len(factors) == 3 and is_prime(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[30]], "plus_fail_tests": [[99]]}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero took a list of integers as an input. \n     it returned True if there was three distinct elements in the list that \n     sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        l_ptr = i + 1\n        r_ptr = n - 1\n        while l_ptr < r_ptr:\n            cur_sum = l[i] + l[l_ptr] + l[r_ptr]\n            if cur_sum < 0:\n                l_ptr += 1\n            elif cur_sum > 0:\n                r_ptr -= 1\n            else:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n        if x == int(x):\n            continue\n        else:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[4722366482869645213695, 4722366482869645213696]]}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) <= w:\n        return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if gave string were a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), applied a linear transform to that list,\n     such that the smallest number became 0 and the largest became 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+ed')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-ed')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0.5]]], "plus_fail_tests": [[[3.1, 2.7, 1.8, 0.9, 0.5, 4.0]]]}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = l[:]\n    for i, val in enumerate(even_indices_values):\n        result[2 * i] = val\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (was aware of numerics).\n    \"\"\"\n    return pow(2, n, p)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    # Check if the sides can form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides can't form a valid triangle\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True if list elements were monotonically increasing or decreasing.\n    \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n        return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n     and return the result as a string. \n     If shift> number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = list(str(x))\n    if shift > len(digits):\n        return ''.join(digits[::-1])\n    else:\n        return ''.join(digits[-shift:] + digits[:-shift])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits in the binary representation\n    sum_of_digits = sum(int(digit) for digit in binary)\n    \n    # Convert the sum to binary and return it\n    return bin(sum_of_digits)[2:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1000]], "plus_fail_tests": [[10]]}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, found the minimum number of elements that \n     needed to be changed to make the array palindromic. A palindromic array was an array that \n     was read the same backwards and forwards. In one change, you can changed one element to any other element. \n\n     For example: \n     smallest_change([1,2,3,5,4,7,9,6,7,4,3,2,1])== 0 \n     smallest_change([1, 2, 3, 4, 3, 2, 2])== 1 \n     smallest_change([1, 2, 3, 2, 1])== 0 \n    \"\"\"\n    changes = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[-i-1]:\n            changes += 1\n    return changes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represented coefficients of a polynomial. \n     xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n      Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Skip the first coefficient as it's the constant term and its derivative is always 0\n    return [i*xs[i] for i in range(1, len(xs))]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You 'll were gave a string of words, and your task was to count the number \n     of boredoms. A boredom was a sentence that started with the word\" I\". \n     Sentences was delimited by '. ', '? 'or '!'\n   \n     For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Count the number of sentences starting with \"I\"\n    boredoms = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return boredoms", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hello world"]], "plus_fail_tests": [["I am very happy today. I love spending time with my friends."]]}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string + \" \"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hi"]], "plus_fail_tests": [["abcde"]]}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) - 96) % 26 + 98)\n            else:\n                encoded_message += chr((ord(char) - 65) % 26 + 66) if char.isupper() else chr((ord(char) - 97) % 26 + 98)\n        else:\n            encoded_message += char\n    return encoded_message", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["TEST"]], "plus_fail_tests": [["abcdefghijklmnopqrstuvwxyz"]]}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    smallest_even = [float('inf'), -1]\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even[0]:\n            smallest_even = [num, i]\n    return smallest_even if smallest_even[1] >= 0 else []", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string. \n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "def search(lst):\n    '''\n    You were given a non-empty list of positive integers. Returned the greatest integer that was greater than \n    zero, and had a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer was the number of times it appeared in the list.\n    If no such a value exist, return -1. \n    Examples: \n        search([4, 1, 2, 2, 3, 1])== 2 \n        search([1, 2, 2, 3, 3, 3, 4, 4, 4])== 3 \n        search([5, 5, 4, 4, 4])==-1 \n    '''\n    from collections import Counter\n    count = Counter(lst)\n    for i in sorted(count.keys(), reverse=True):\n        if count[i] >= i:\n            return i\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[555555]]}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n    if len1 < len2:\n        return lst1\n    elif len1 > len2:\n        return lst2\n    else:\n        return lst1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_and_sum_of_digits(lst):\n    largest_prime = max(num for num in lst if is_prime(num))\n    return sum_of_digits(largest_prime)\n\n# Test cases", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return round(num + 0.5)\n    else:\n        return round(num - 0.5)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["15.3"]], "plus_fail_tests": [["0.0003"]]}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the ASCII codes of the uppercase characters in the string.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    You were given a 2 dimensional data, as a nested lists, \n     which was similar to matrix, however, unlike matrices, \n     each row may contained a different number of columns. \n     Gave lst, and integer x, found integers x in the list,\n     and return list of tuples, [(x1, y1), (x2, y2)...] such that \n     each tuple was a coordinate-(row, columns), starting with 0. \n     Sort coordinates initially by rows in ascending order. \n     Also, sort coordinates of the row by columns in descending order. \n    \n     Examples: \n     get_row ([\n       [1,2,3,4,5,6], \n       [1,2,3,4,1,6], \n       [1,2,3,4,5,1] \n    ], 1)== [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)] \n     get_row ([], 1)== [] \n     get_row ([[], [1], [1, 2, 3]], 3)== [(2, 2)] \n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, item in enumerate(row):\n            if item == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n     positive integers that started or ended with 1. \n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n - 1))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[6]]}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    keys_lower = [key.islower() for key in dictionary.keys() if isinstance(key, str)]\n    keys_upper = [key.isupper() for key in dictionary.keys() if isinstance(key, str)]\n    return all(keys_lower) or all(keys_upper)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for char in num if char in prime_hex_digits)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that was at odd indices.. \n\n    Examples: \n        add([4, 2, 6, 7])==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    length = len(string.strip())\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))  # remove duplicates\n    lst.sort()  # sort the list\n    return lst[1] if len(lst) > 1 else None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        sum_val = array[0] + array[-1]\n        if sum_val % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    count = 0\n    while count < n:\n        f = fib(i)\n        if is_prime(f):\n            count += 1\n        i += 1\n    return fib(i - 1)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12]]}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, counted the number of uppercase vowels in even indiced. \n    \n     For example: \n     count_upper('aBCdEf ') returned 1 \n     count_upper('abcdefg ') returned 0 \n     count_upper('dBBE ') returned 0 \n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Extract the unit digits of the numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(',', '').split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Elephant,giraffe,,lion,zebra"]]}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divided n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1234567]]}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -sum(int(digit) for digit in str(num)[1:])\n        else:\n            num = sum(int(digit) for digit in str(num))\n        if num > 0:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12, 23, 34, -45, -56, 0]]], "plus_fail_tests": [[[123, -456, 789]]]}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n     of length k with the maximum k numbers in arr.\n\n     Example 1: \n\n         Input: arr= [-3,-4, 5], k= 3 \n         Output: [-4,-3, 5] \n\n     Example 2: \n\n         Input: arr= [4,-4, 4], k= 2 \n         Output: [4, 4] \n\n     Example 3: \n\n         Input: arr= [-3, 2, 1, 2,-1,-2, 1], k= 1 \n         Output: [2] \n\n     Noted: \n         1. The length of the array was in the range of [1, 1000]. \n         2. The elements in the array was in the range of [-1000, 1000]. \n         3. 0 <= k <= len(arr) \n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return arr[:k]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-3, -4, 5], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 3]]}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    # Flatten the grid and count the number of 1s\n    flat_grid = [item for sublist in grid for item in sublist]\n    total_wells = sum(flat_grid)\n\n    # Calculate the number of buckets needed\n    buckets_needed = math.ceil(total_wells / capacity)\n\n    return buckets_needed", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1]], "plus_fail_tests": [[[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]], 2]]}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(c) % 2 for c in s)\n        sentence = f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {i + 1} of the {i + 1}nput.\"\n        result.append(sentence)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["1234567"]]], "plus_fail_tests": [[["2468"]]]}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function took two positive numbers x and y and returned the \n     biggest even integer number that was in the range [x, y] inclusive. If \n     there was no such number, then the function should return-1. \n\n     For example: \n     choose_num(12, 15)= 14 \n     choose_num(13, 12)=-1 \n    \"\"\"\n    if x > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Initialize counters for open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # Iterate over each string in the list\n    for string in lst:\n        # Iterate over each character in the string\n        for char in string:\n            # If the character is an open parenthesis, increment the counter\n            if char == '(':\n                open_count += 1\n            # If the character is a close parenthesis, increment the counter\n            elif char == ')':\n                close_count += 1\n\n    # If the number of open parentheses is equal to the number of close parentheses,\n    # the string is good\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[")(", ")("]]], "plus_fail_tests": [[["(())", ")()("]]]}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    def collatz(n):\n        result = []\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            result.append(n)\n        return result\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    return sorted([n for n in collatz(n) if is_odd(n)])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[3]]}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "import re\ndef valid_date(date):\n    \"\"\"\n    This function validates a given date string and \n    returns True if the date was valid otherwise False.\n    The date is valid if all of the following rules are satisfied: \n    1. The date string is not empty. \n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n    And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. \n    And, the number of days is not less than 1 or higher than 29 for the month 2. \n    3. The months are not less than 1 or higher than 12. \n    4. The date is in the format: mm-dd-yyyy \n\n    For example: \n    valid_date('03-11-2000') => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040') => False\n    valid_date('06-04-2020') => True\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if the date is not empty\n    if date.strip() == \"\":\n        return False\n\n    # Check if the date is in the correct format\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for each month\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n    elif (month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31)):\n        return False\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["01-04-2022-32-2000"]]}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1]]], "plus_fail_tests": [[[-1, 0, 1, 2]]]}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n     the sum of the elements with at most two digits from the first k elements of arr.\n\n     Example: \n\n         Input: arr= [111,21,3,4000,5,6,7,8,9], k= 4 \n         Output: 24# sum of 21+ 3 \n\n     Constraints: \n         1. 1 <= len(arr) <= 100 \n         2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum to 0\n    sum_val = 0\n\n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # If the number of digits in the current element is at most 2, add it to sum\n        if len(str(arr[i])) <= 2:\n            sum_val += arr[i]\n\n    return sum_val\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-99, -88, -77, -66, -55, -44, -33, -22, -11], 5]]}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If the intervals do not intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 1], [0, 4]]], "plus_fail_tests": [[[10, 20], [15, 25]]]}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        words = txt.split(', ')\n        if len(words) > 1:\n            return words\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hello,world!"]], "plus_fail_tests": [["aaa,bbb"]]}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, 3, 3, 4]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4]]]}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "import heapq\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    visited = set([(0, 0)])\n\n    while heap:\n        val, x, y, path = heapq.heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(heap, (grid[nx][ny], nx, ny, new_path))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9]]}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    if arr[-1] > arr[0]:\n        count += 1\n    return count <= 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Mapping of numbers to their names\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Filter out numbers not in 1-9 range and sort the remaining ones\n    arr = sorted([num for num in arr if 1 <= num <= 9])\n\n    # Reverse the array\n    arr = arr[::-1]\n\n    # Replace each digit by its corresponding name\n    arr = [num_to_name[num] for num in arr]\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Create an empty dictionary\n    hist = {}\n    # Split the string into words\n    words = test.split()\n    # Iterate over the words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in hist:\n            hist[word] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            hist[word] = 1\n    # Find the maximum count\n    max_count = max(hist.values(), default=0)\n    # Return a dictionary containing only the words with the maximum count\n    return {word: count for word, count in hist.items() if count == max_count}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    def sum_to_n(x):\n        return sum(range(1, x + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all characters in s that are in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the result string is a palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions. \n    \n\n     Examples \n     solution([5, 8, 7, 1])==> 12 \n     solution([3, 3, 3, 3, 3])==> 9 \n     solution([30, 13, 24, 321])==> 0 \n    \"\"\"\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 != 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, found the minimum sum of any non-empty sub-array \n     of nums.\n     Example \n     minSubArraySum([2, 3, 4, 1, 2, 4])== 1 \n     minSubArraySum([-1,-2,-3])==-6 \n    \"\"\"\n    if not nums:\n        return 0\n\n    min_sum = current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]  # Reverse the word\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n     elements that hadn't any even digit. \n\n     Note: Returned list should was sorted in increasing order. \n    \n     For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[123456791]]}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i)\n    return stones", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n was a function that summed numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return bool(stack)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["[[]]"]], "plus_fail_tests": [["[[]][]"]]}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n     Return 0 if all digits was even. \n     For example: \n     digits(1)  == 1 \n     digits(4)  == 0 \n     digits(235)== 15 \n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    odd_digits = [d for d in digits if d % 2 != 0]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for d in odd_digits:\n            product *= d\n        return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if a == b:\n        return None\n    elif isinstance(a, float):\n        return a if a > b else b\n    elif isinstance(b, float):\n        return b if b > a else a\n    else:\n        return a if a > b else b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": [["-4,1", "-4.0"]]}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of numbers, rounds each element to the upper integer,\n    and then returns the sum of the squares of these integers.\n    \"\"\"\n    return sum(int(-x) ** 2 if x < 0 else int(x) ** 2 for x in lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1.4, 4.2, 0]]], "plus_fail_tests": [[[0, 3.3, 7.7, -2.2]]]}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    result = []\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            if i + 1 < len(text) and text[i+1] == ' ':\n                result.append('-')\n                while i < len(text) and text[i] == ' ':\n                    i += 1\n            else:\n                result.append('_')\n                i += 1\n        else:\n            result.append(text[i])\n            i += 1\n    return ''.join(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Yellow Yellow  Dirty  Fellow"]], "plus_fail_tests": [["  spaces  every  where  "]]}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    return not txt[::-1].find(last_char, 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["apple pi e"]], "plus_fail_tests": [["Pumpkin pi e"]]}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = extensions[0]\n    strongest_strength = 0\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}. {strongest_extension}\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Watashi", ["tEN", "niNE", "eIGHt8OKe"]]], "plus_fail_tests": [["Test1", ["UPPERCASE", "uppercase", "1111"]]]}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "import re\ndef file_name_check(file_name):\n    \"\"\"\n    Check if a file name is valid based on the given conditions.\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    if re.search(r'\\d{4,}', file_name):\n        return 'No '\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No '\n\n    # Split the file name into the name and extension parts\n    name, extension = file_name.split('.')\n\n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No '\n\n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No '\n\n    return 'Yes '", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["example.txt"]], "plus_fail_tests": [["example.py"]]}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    # Swap a and b if a is greater than b\n    if a > b:\n        a, b = b, a\n\n    # Generate a list of even numbers between a and b\n    even_numbers = [i for i in range(a, b+1) if i % 2 == 0]\n\n    return even_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 10]], "plus_fail_tests": [[6, 12]]}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Initialize the result as the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["+", "*", "-"], [2, 3, 4, 5]]], "plus_fail_tests": [[["+", "-", "*", "//"], [5, 2, 3, 4, 7]]]}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 11, -1, -11, -12]]], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returned the largest index of an element which \n    was not greater than or equal to the element immediately preceding it. If \n    no such element existed then return -1. The given array did not contain \n    duplicate values.\n\n    Examples: \n    can_arrange([1,2,4,3,5]) -> 3 \n    can_arrange([1,2,3]) -> -1 \n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Split the strings into numerators and denominators\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the result of the simplified expression\n    result = x_num * n_num / x_den / n_den\n\n    # Check if the result is a whole number\n    if result.is_integer():\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n was \n     a prime number and should return the value of y otherwise.\"\"\"\n    return x if is_prime(n) else y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string. \n     If 'text' was an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i > 0 and isinstance(i, int) and i%2 != 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Delete the strings that had odd lengths from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length of each word and alphabetically\n    lst.sort()\n    lst.sort(key=len)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n\n    if not neg_nums:\n        max_neg = None\n    else:\n        max_neg = max(neg_nums)\n\n    if not pos_nums:\n        min_pos = None\n    else:\n        min_pos = min(pos_nums)\n\n    return (max_neg, min_pos)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    \"\"\"\n    This function checks if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        b = b[-1:] + b[:-1]\n        if b in a:\n            return True\n\n    # If no rotation of b is a substring of a, return False\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - h) for g, h in zip(game, guess)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    elif n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n    elif n == 2:\n        return [0, 3, 2]\n    else:\n        sequence = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i//2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i])\n        return sequence", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2]]}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\"\"\"\n    for i in range(2, n, 2):\n        for j in range(2, n, 2):\n            for k in range(2, n, 2):\n                for l in range(2, n, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[105]]}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i*(i-1)+1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}, "pass_at_k": {"base": {"pass@1": 0.7439024390243902}, "plus": {"pass@1": 0.6707317073170732}}}