{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer than given threshold to each other.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n    result = []\n    stack = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            temp += char\n        elif char == \")\":\n            stack.pop()\n            temp += char\n            if not stack:\n                result.append(temp)\n                temp = \"\"\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating float point number, it can be decomposed into \n     and integer part (largest big integer smaller than given collapse number) and decimals \n     (leftover part character always smaller than 1). \n\n     Return the decimal part of the number.\n    \"\"\"\n    # Using the modulus operator to get the decimal part of the number\n    return number % 1"}
{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation \n     around the mean of this dataset. \n     Mean Absolute Deviation is the average median absolute difference between each \n     element chemical element and a centerpoint (mean in this case ): \n     MAD = average modal | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string drawstring represented multiple groups group for nested parentheses separated distinguish by spaces. \n     For each of the group, output the deepest cryptic level of nesting of parentheses digression. \n     E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results"}
{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain control given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting consist of a sum and a product merchandise of all the integers in a list.\n     Empty sum union should be equal to 0 and empty product intersection should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_num = numbers[0]\n    result = [max_num]\n\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n\n    return result"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins begin with a supplied string.\n     Algorithm idea mind is simple: \n     - Find detect the longest postfix suffix of supplied string that is a palindrome. \n     - Append to the end goal of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting consist only of 1s and 0s. \n     Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Check if the lengths of the strings are equal\n    if len(a) != len(b):\n        raise ValueError(\"Both strings must have the same length\")\n\n    # Perform XOR operation\n    result = ''\n    for i in range(len(a)):\n        # XOR operation\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common coarse divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest long of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set(string.lower())\n    count = sum(1 for char in distinct_characters if char.isalpha())\n    return count"}
{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space - delimited demarcate string of numberals from' zero' to' nine'. \n     Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n     Return the string with numbers sorted from smallest belittled to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n     other and return them in order ordering (smaller number issue, larger number numeral).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result"}
{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n     such that the smallest minor number will become 0 and the largest big will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find receive the largest number phone number that divides n evenly, smaller belittled than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once. \n    Keep retain order of elements that are left the same as in the input stimulation.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string"}
{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial. \n     find_zero find x such that poly(x) = 0. \n     find_zero returns render only only zero point, even if there are many. \n     Moreover furthermore, find_zero only takes list xs having even number issue of coefficients \n     and largest big non zero coefficient as it guarantees \n     a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"The number of coefficients must be even.\")\n    if max(xs) == 0:\n        raise ValueError(\"The largest coefficient must be non-zero.\")\n\n    # Use the bisection method to find the root\n    a = -1000\n    b = 1000\n    while abs(a - b) > 1e-6:\n        c = (a + b) / 2\n        if poly(xs, a) * poly(xs, c) <= 0:\n            b = c\n        else:\n            a = c\n    return (a + b) / 2"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    divisible_by_three.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three[i // 3]\n    return l"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit finger 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    new_list = l[:]\n    for i in range(0, len(l), 2):\n        new_list[i] = even_indices_values.pop(0)\n    return new_list"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string drawstring encoded with encode_cyclic function affair. Returns decoded decode string. \n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num: int) -> bool:\n        x = 0\n        y = 1\n        while y < num:\n            z = x + y\n            x = y\n            y = z\n        return y == num\n\n    i = 0\n    num = 0\n    while i < n:\n        num += 1\n        if is_prime(num) and is_fibonacci(num):\n            i += 1\n    return num"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input input signal. \n     it returns True if there are three distinct clear-cut elements in the list that \n     sum union to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        l_ptr = i + 1\n        r_ptr = n - 1\n        while l_ptr < r_ptr:\n            cur_sum = l[i] + l[l_ptr] + l[r_ptr]\n            if cur_sum < 0:\n                l_ptr += 1\n            elif cur_sum > 0:\n                r_ptr -= 1\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight neat infinitely long farseeing line. \n     n cars car are driving left bequeath to right;   simultaneously, a different unlike set bent of n cars cable car \n     are driving force right justly to left.    The two sets of cars start begin out being very far from \n     each other.   All cars car move motivate in the same speed.   Two cars are said to collide \n     when a car that's moving affect left bequeath to right good hits strike a car that's moving be active right to left. \n     However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n     in their trajectory as if they did not collide. \n\n     This function outputs the number act of such collisions collision. \n     \"\"\"\n    # The number of collisions is equal to the number of cars minus one.\n    # This is because each car will collide with every other car once.\n    # The number of cars minus one is the maximum number of collisions.\n    return n - 1"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input input signal. \n     it returns True if there are two distinct clear-cut elements in the list that \n     sum union to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation of the result after the conversion. \n    base numbers are less than 10.\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high gamey return area for a triangle triangulum.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string drawstring encoded with encode_shift function affair. Returns decoded decode string. \n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters character.\n    \"\"\"\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing decrease.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists tilt.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial. \n     xs[0] + xs[1] * x + xs[2] * x^2 +.... \n      Return derivative of this polynomial in the same form human body.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Skip the first coefficient as it's the constant term and its derivative is always 0\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - 2):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    digits = list(str(x))\n    if shift > len(digits):\n        return ''.join(digits[::-1])\n    else:\n        return ''.join(digits[-shift:] + digits[:-shift])"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    # Split the string to get the count of apples and oranges\n    apples, oranges = map(int, s.split()[::2])\n    # Subtract the count of apples and oranges from the total number of fruits\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    if not arr:\n        return []\n\n    even_nodes = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n\n    if not even_nodes:\n        return []\n\n    smallest_even_node = min(even_nodes, key=lambda x: (x[1], x[0]))\n\n    return [smallest_even_node[1], smallest_even_node[0]]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the keys in descending order\n    for num in sorted(freq.keys(), reverse=True):\n        # If the frequency of the number is greater than or equal to the number itself, return the number\n        if freq[num] >= num:\n            return num\n\n    # If no such number is found, return -1\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of \n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1 \n    Three sides make induce a valid triangle when the sum of any two sides is greater \n    than the third side. \n    Example exercise: \n    triangle_area(3, 4, 5) == 6.00 \n    triangle_area(1, 2, 10) == -1 \n    \"\"\"\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to w\n    if sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n\n    # Return the list with the lesser total number of characters\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 < total_chars1:\n        return lst2\n    else:\n        # If the total number of characters is equal, return the first list\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(n):\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n        if x == int(x):\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(a ** (1. / 3.))\n    # Check if the cube of the cube root equals the original number\n    return cube_root ** 3 == abs(a)"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex = ['2', '3', '5', '7', 'B', 'D']\n\n    # Initialize the count\n    count = 0\n\n    # Iterate over the input string\n    for digit in num:\n        # If the digit is a prime hexadecimal digit, increment the count\n        if digit in prime_hex:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \" db\" + binary + \"db \""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('Einsteinium')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers number of n-digit\n     positive integers integer that start or end with 1. \n     \" \" \"\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n - 1))"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    # Calculate the sum of the digits\n    total_sum = sum(int(digit) for digit in binary)\n    # Convert the sum to binary and return it\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements at odd indices index.\"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested cuddle lists, \n     which is similar alike to matrix, however, unlike matrices, \n     each row course may contain a different unlike number of columns column. \n     Given move over lst, and integer x, find line up integers integer x in the list,\n     and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n     each tuple is a coordinate - (row rowing, columns), starting with 0. \n     Sort coordinates initially by rows quarrel in ascending ascend order holy order. \n     Also, sort coordinates of the row by columns in descending descend order. \n    \n     Examples exemplar: \n     get_row ([ \n       [ 1,2,3,4,5,6 ], \n       [ 1,2,3,4,1,6 ], \n       [ 1,2,3,4,5,1 ] \n     ], 1) = = [ (0, 0), (1, 4), (1, 0), (2, 5), (2, 0) ] \n     get_row ([ ], 1) = = [ ] \n     get_row ([ [ ], [ 1 ], [ 1, 2, 3 ] ], 3) = = [ (2, 2) ] \n     \" \" \"\n    \"\"\"\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n\n    # Iterate over the rows\n    for i in range(len(lst)):\n        # Iterate over the columns\n        for j in range(len(lst[i])):\n            # If the element at the current position is x, add the coordinate to the list\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n\n    # Sort the coordinates first by row in ascending order, then by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n\n    return coordinates"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        sum_val = array[0] + array[-1]\n        if sum_val % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            char_ascii = ord(char.lower())\n            encrypted_char = chr((char_ascii - 97 + shift) % 26 + 97) if char.islower() else chr((char_ascii - 65 + shift) % 26 + 65)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))  # remove duplicates\n    lst.sort()  # sort the list\n    return lst[1] if len(lst) > 1 else None"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words bible, and your task is to count consider the number \n     of boredoms boredom. A boredom is a sentence that starts startle with the word \" I \". \n     Sentences are delimited subtend by'.','?' or'!'. \n   \n     For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Count the number of sentences starting with \"I \"\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith('I '))\n\n    return boredom_count"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_and_sum_of_digits(lst):\n    largest_prime = max(num for num in lst if is_prime(num))\n    return sum_of_digits(largest_prime)\n\n# Test cases"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    keys_lower = [key.islower() for key in dictionary.keys() if isinstance(key, str)]\n    keys_upper = [key.isupper() for key in dictionary.keys() if isinstance(key, str)]\n    return all(keys_lower) or all(keys_upper)"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Extract the last digit of each number\n    last_digit_a = abs(a) % 10\n    last_digit_b = abs(b) % 10\n    # Multiply the last digits\n    return last_digit_a * last_digit_b"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return round(num + 0.5)\n    else:\n        return round(num - 0.5)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.split(',') if ',' in s else s.split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x > y:\n        return -1\n    elif x % 2 == 0:\n        return y if y % 2 == 0 else y - 1\n    else:\n        return y - 1 if y % 2 == 0 else y - 2"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n     elements chemical element that hasn't any even digit finger. \n\n     Note: Returned fall list should be sorted in increasing order orderliness. \n    \n     For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        \"\"\"Check if a number has an even digit.\"\"\"\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Define the mapping from numbers to their names\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Filter out numbers not in the range 1-9\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Reverse the array\n    arr = arr[::-1]\n\n    # Replace each number with its corresponding name\n    arr = [num_to_name[num] for num in arr]\n\n    return arr"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i:] + arr[:i] == sorted(arr):\n                return True\n        return False"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Split the string into a list of words\n    words = test.split(' ')\n\n    # Create an empty dictionary to store the frequency of each word\n    freq_dict = {}\n\n    # Iterate over the list of words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in freq_dict:\n            freq_dict[word] += 1\n        # If the word is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[word] = 1\n\n    # Find the maximum frequency\n    max_freq = max(freq_dict.values()) if freq_dict else 0\n\n    # Create a new dictionary to store the words with the maximum frequency\n    result = {word: count for word, count in freq_dict.items() if count == max_freq}\n\n    return result"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all characters in s that are in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the resultant string is a palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find receive the minimum sum kernel of any non - empty sub - array \n     of nums.\n     Example \n     minSubArraySum([2, 3, 4, 1, 2, 4 ]) = = 1 \n     minSubArraySum([-1, -2, -3 ]) = = -6 \n     \" \" \"\n    \"\"\"\n    if not nums:\n        return 0\n\n    current_sum = min_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    # Flatten the grid and sort the list in ascending order\n    wells = sorted(sum(grid, []))\n    # Calculate the total number of wells\n    total_wells = len(wells)\n    # Initialize the number of buckets needed\n    buckets_needed = 0\n    # Iterate over the sorted list of wells\n    for well in wells:\n        # Calculate the number of buckets needed for this well\n        buckets_needed += math.ceil(well / capacity)\n    # Return the total number of buckets needed\n    return buckets_needed"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    return [word.strip() for word in s.split() if count_consonants(word) == n]"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word.strip()\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Initialize counters for open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # Iterate over each string in the list\n    for string in lst:\n        # Iterate over each character in the string\n        for char in string:\n            # If the character is an open parenthesis, increment the counter\n            if char == '(':\n                open_count += 1\n            # If the character is a close parenthesis, increment the counter\n            elif char == ')':\n                close_count += 1\n\n    # If the number of open parentheses is equal to the number of close parentheses, return 'Yes'\n    if open_count == close_count:\n        return 'Yes'\n    # Otherwise, return 'No'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive plus integer k, return a sorted list \n     of length k with the maximum k numbers number in arr.\n\n     Example 1: \n\n         Input stimulation: arr = [ -3, -4, 5 ], k = 3 \n         Output: [ -4, -3, 5 ] \n\n     Example exercise 2: \n\n         Input: arr = [ 4, -4, 4 ], k = 2 \n         Output end product: [ 4, 4 ] \n\n     Example 3: \n\n         Input remark: arr = [ -3, 2, 1, 2, -1, -2, 1 ], k = 1 \n         Output output signal: [ 2 ] \n\n     Note notice: \n         1. The length distance of the array will be in the range of [ 1, 1000 ]. \n         2. The elements in the array will be in the range of [ -1000, 1000 ]. \n         3. 0 < = k < = len(arr) \n     \" \" \"\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements of the first k elements of arr.\n\n    Example: \n\n        Input stimulation: arr = [111,21,3,4000,5,6,7,8,9], k = 4 \n        Output: 24 # sum of 21 + 3 \n\n    Constraints: \n        1. 1 <= len(arr) <= 100 \n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Check if k is within the constraints\n    if not 1 <= k <= len(arr):\n        raise ValueError(\"k must be between 1 and the length of arr\")\n\n    # Return the sum of the first k elements\n    return sum(arr[:k])\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(list(set(odd_numbers)))"}
{"task_id": "HumanEval/124", "solution": "import re\ndef valid_date(date):\n    \"\"\"\n    This function validates a given date string and returns True if the date is valid, otherwise False.\n    \"\"\"\n    # Check if the date string is not empty\n    if not date.strip():\n        return False\n\n    # Check if the date string is in the correct format\n    if not re.match(r'\\d{2} - \\d{2} - \\d{4}', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split(' - '))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for each month\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n    elif (day < 1 or day > 31):\n        return False\n\n    # Check if the year is valid\n    if year < 1 or year > 9999:\n        return False\n\n    # If all checks pass, the date is valid\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If the intervals don't intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "solution": "import heapq\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[0][0], 0, 0)]\n    visited = set([(0, 0)])\n    res = []\n    while len(res) < k:\n        val, i, j = heapq.heappop(heap)\n        res.append(val)\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                visited.add((x, y))\n                heapq.heappush(heap, (grid[x][y], x, y))\n    return res"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    elif n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n    return 0 if not has_odd_digit else product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers. \n     You need necessitate to return the sum of squared numbers number in the given list,\n     round each element component in the list to the upper int(Ceiling) first. \n     Examples case: \n     For lst = [ 1,2,3 ] the output should be 14 \n     For lst = [ 1,4,9 ] the output end product should be 98 \n     For lst = [ 1,3,5,7 ] the output end product should be 84 \n     For lst = [ 1.4,4.2,0 ] the output should be 29 \n     For lst = [ -2.4,1,1 ] the output should be 6 \n    \n\n     \" \" \"\n    \"\"\"\n    return sum(int(round(num ** 2)) for num in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    last_word = words[-1]\n    if not last_word.isalpha():\n        return False\n    if last_word == \"news\":\n        return False\n    return True"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    This function returns the largest index of an element in the array which is not greater than\n    or equal to the element immediately preceding it. If no such element exists, it returns -1.\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    # Initialize variables to keep track of the largest negative integer and smallest positive integer\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate over the list\n    for num in lst:\n        # If the number is negative and larger than the current largest negative number, update largest_negative\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        # If the number is positive and smaller than the current smallest positive number, update smallest_positive\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    # Return the largest negative and smallest positive numbers as a tuple\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        raise TypeError(\"Both inputs must be of the same type: int, float or str\")"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive incontrovertible even numbers\"\"\"\n    # Initialize a list to store the even numbers\n    even_numbers = []\n    # Iterate over the range from 2 to n\n    for i in range(2, n+1, 2):\n        # If the length of the list is less than 4, append the even number to the list\n        if len(even_numbers) < 4:\n            even_numbers.append(i)\n        # If the length of the list is 4, check if the sum of the numbers in the list is equal to n\n        elif len(even_numbers) == 4 and sum(even_numbers) == n:\n            return True\n        # If the sum of the numbers in the list is greater than n, remove the smallest even number from the list\n        elif sum(even_numbers) > n:\n            even_numbers.remove(min(even_numbers))\n    # If no combination of 4 even numbers sums up to n, return False\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    new_text = ''\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count == 2:\n                new_text += '_'\n            elif count > 2:\n                new_text += '-'\n        else:\n            new_text += char\n            if count > 0:\n                count = 0\n    return new_text"}
{"task_id": "HumanEval/141", "solution": "import re\ndef file_name_check(file_name):\n    \"\"\"\n    This function checks if a file name is valid based on the given conditions.\n    \"\"\"\n    # Check if there are more than 3 digits in the file name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot starts with a letter\n    if not re.match(r'[a-zA-Z]', file_name.split('.')[0]):\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Split the strings into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the new numerator and denominator\n    new_num = x_num * n_num\n    new_den = x_den * n_den\n\n    # Check if the new numerator is a whole number\n    if new_num % new_den == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    # Function to calculate sum of digits\n    def sum_of_digits(n):\n        return sum(int(i) for i in str(abs(n)))\n\n    # Sorting the list based on sum of digits and index\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    return nums"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = min(planets.index(planet1), planets.index(planet2))\n        end = max(planets.index(planet1), planets.index(planet2))\n        return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Remove leading and trailing spaces and empty strings\n    lst = [string.strip() for string in lst if string.strip()]\n    # Remove strings with odd leftover lengths\n    lst = [string for string in lst if len(string) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort()\n    lst.sort(key=len)\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is a prime number, otherwise return y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    else:\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares) * 2"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    if len(game) != len(guess):\n        raise ValueError(\"Arrays must be of the same length\")\n    return [abs(g - h) for g, h in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}. {strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n\n    # If no rotation of b is a substring of a, return False\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the triangle is a right-angled triangle\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word.strip()))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n    return max_word.strip()"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Check if the length of operator list is adequate to the length of operand list minus one\n    if len(operator) != len(operand) - 1:\n        return \"Invalid input\"\n\n    # Construct the algebraic expression\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n\n    # Evaluate the expression\n    return eval(expression)"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    reversed_s = s[::-1]\n    result = ''\n    for char in reversed_s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash hashish equivalent string. \n     If 'text' is an empty string drawstring, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    # Ensure a and b are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0):\n        raise ValueError(\"Both a and b must be positive integers\")\n\n    # Swap a and b if a > b\n    if a > b:\n        a, b = b, a\n\n    # Generate the list of even integers between a and b\n    even_integers = [i for i in range(a, b+1) if i % 2 == 0]\n\n    return even_integers"}
