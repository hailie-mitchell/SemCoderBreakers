{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    groups = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current_group:\n                stack.append(current_group)\n                current_group = \"\"\n            stack.append(char)\n        elif char == \")\":\n            stack.append(char)\n            current_group = \"\".join(stack[-2:])\n            if stack.count(\"(\") == stack.count(\")\"):\n                groups.append(current_group)\n                stack = []\n                current_group = \"\"\n        else:\n            raise ValueError(\"Invalid character in input string\")\n    if stack:\n        raise ValueError(\"Unbalanced parentheses in input string\")\n    return groups"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n    \"\"\"\n    # Using the modulus operator to get the decimal part of the number\n    return number % 1"}
{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            elif char == ')':\n                count -= 1\n        results.append(max_count)\n    return results"}
{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that containing gives substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_num = numbers[0]\n    result = [max_num]\n\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n\n    return result"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shorter palindrome that begin with a supplied string.\n    Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure both strings are of the same length\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''\n    for i in range(max_len):\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shorter to longer of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Gives a string, found out how many distinct characters (regardless of cases) done it consisting of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beat_counts = []\n\n    for note in notes:\n        if note == 'o':\n            beat_counts.append(4)\n        elif note == 'o|':\n            beat_counts.append(2)\n        elif note == '.|':\n            beat_counts.append(1)\n\n    return beat_counts"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smaller to larger\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {\n        'zeros': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result"}
{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter gives list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of gives string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flips lowercase character to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a gives prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return True if a gives number is prime, and False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\ndef find_zero(xs: list):\n    \"\"\"\n    xs was coefficients of a polynomial. \n    find_zero found x such that poly(x) = 0. \n    find_zeros returns only only zero point, even if there was many. \n    Moreover, find_zero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 0 and max(xs) > 0:\n        return -xs[1]/xs[0]\n    else:\n        raise ValueError(\"The list of coefficients must have an even number of elements and the largest coefficient must be positive.\")"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    divisible_by_three = [(i, v) for i, v in enumerate(l) if (i+1) % 3 == 0]\n    divisible_by_three.sort(key=lambda x: x[1])\n    for i, v in enumerate(l):\n        if (i+1) % 3 == 0:\n            l[i] = divisible_by_three[i//3][1]\n    return l"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum elements in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = l[:]\n    result[::2] = even_indices_values\n    return result"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoding with encode_cyclic functions. Returns decoding string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    prime_fib_count = 0\n    while prime_fib_count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            prime_fib_count += 1\n        i += 1\n    return fib(i - 1)"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input. it returning True if there was three distincter elements in the list that summing to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision.\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements increments by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pair_sum_to_zero takes a list of integers as an input. it returning True if there was two distincter elements in the list that summing to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    return str(int(str(x), 10))"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a sides and higher return areas for a triangles.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Check if gives string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (is aware of numerics).\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoding with encode_shift functions. Returns decoding string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l was below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True is list elements was monotonically increases or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two list.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the larger prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i*xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_values = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_values.append(fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3])\n        return fibfib_values[n]"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = 'aeiou'\n    s = s.lower()\n    count = sum(1 for char in s if char in vowels)\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    # Split the string to get the count of apples and oranges\n    apple, oranges = map(int, s.split()[1::2])\n    # Subtract the count of apples and oranges from the total fruit count\n    mangoes = n - apple - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even_node = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [smallest_even_node[1], smallest_even_node[0]]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Iterate over the dictionary in descending order of keys\n    for key in sorted(freq_dict.keys(), reverse=True):\n        # If the frequency of the key is greater than or equal to the key itself, return the key\n        if freq_dict[key] >= key:\n            return key\n\n    # If no such a value exist, return -1\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    # Check if the sides can form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to w\n    if sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements. For examples: smaller_change([1,2,3,5,4,7,9,6]) == 4 smaller_change([1, 2, 3, 4, 3, 2, 2]) == 1 smaller_change([1, 2, 3, 2, 1]) == 0 \"\"\"\n\n    # Initialize the count of changes to 0\n    count = 0\n\n    # Initialize two pointers, one at the start of the array and one at the end\n    start = 0\n    end = len(arr) - 1\n\n    # While the start pointer is less than or equal to the end pointer\n    while start <= end:\n        # If the elements at the start and end pointers are not equal\n        if arr[start] != arr[end]:\n            # Increment the count of changes\n            count += 1\n        # Move the start pointer one step to the right\n        start += 1\n        # Move the end pointer one step to the left\n        end -= 1\n\n    # Return the count of changes\n    return count"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    sum1 = sum(len(word) for word in lst1)\n    sum2 = sum(len(word) for word in lst2)\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(n):\n    \"\"\"\n    This function checks if a number is a product of exactly 3 prime numbers.\n    It assumes that the input number is less than 100.\n    \"\"\"\n    # List of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Initialize factors list\n    factors = []\n\n    # Check each prime number\n    for prime in primes:\n        # If the number is divisible by the prime number, add it to the factors list and divide the number\n        while n % prime == 0:\n            factors.append(prime)\n            n = n // prime\n\n        # If the number becomes 1, break the loop\n        if n == 1:\n            break\n\n    # If the number is not 1, it means it has more than 1 prime factor\n    if n != 1:\n        return False\n\n    # If the number of factors is not 3, return False\n    if len(factors) != 3:\n        return False\n\n    # If all conditions are met, return True\n    return True"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n        if x == int(x):\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(a ** (1. / 3.))\n\n    # Check if the cube of the cube root equals the original number\n    return cube_root ** 3 == abs(a)"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in prime_hex_digits)"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of corresponding letter grades.\n    \"\"\"\n    # Define the grade boundaries\n    grade_boundaries = {\n        'A+': 4.0,\n        'A': 3.7,\n        'A-': 3.3,\n        'B+': 3.0,\n        'B': 2.7,\n        'B-': 2.3,\n        'C+': 2.0,\n        'C': 1.7,\n        'C-': 1.3,\n        'D+': 1.0,\n        'D': 0.7,\n        'D-': 0.3,\n        'E': 0.0\n    }\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Loop through the GPAs and append the corresponding letter grade to the list\n    for grade in grades:\n        for letter, boundary in grade_boundaries.items():\n            if grade >= boundary:\n                letter_grades.append(letter)\n                break\n\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    \"\"\"\n    This function takes a string and returns True if the string\n    length is a prime number or False otherwise.\n    \"\"\"\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Gives a positive integers n, return the count of the numbers of n-digit\n    positive integers that start or ending with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n - 1))"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    # Calculate the sum of the digits in the binary representation\n    total_sum = sum(int(digit) for digit in binary)\n    # Convert the sum to binary and return it as a string\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-emptiest list of integers lst. add the even elements that was at odd indexes. Examples: add([4, 2, 6, 7]) ==> 2 \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2))"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    result = []\n    for word in words:\n        chars = list(word)\n        chars.sort(key=lambda x: (x.isupper(), x.islower(), x))\n        result.append(''.join(chars))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n\n    # Iterate over the rows in the list\n    for i in range(len(lst)):\n        # Iterate over the elements in the row\n        for j in range(len(lst[i])):\n            # If the element is equal to x, append the coordinate to the list\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n\n    # Sort the coordinates first by the row (i) in ascending order, then by the column (j) in descending order\n    coordinates.sort(key=lambda y: (y[0], -y[1]))\n\n    return coordinates"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        sum_of_first_and_last = array[0] + array[-1]\n        if sum_of_first_and_last % 2 == 0:\n            return sorted(array)\n        else:\n            return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'll give a string of word, and your task is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Count the number of sentences starting with \"I\"\n    boredoms = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return boredoms"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper() if char not in vowels else chr((ord(char) - 96) % 26 + 97 + 2)\n            else:\n                encoded_message += char.lower() if char not in vowels else chr((ord(char) - 65) % 26 + 65 + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\ndef skjkasdkd(lst):\n    max_prime = max(num for num in lst if is_prime(num))\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    if not d:\n        return False\n    keys_lower = [k for k in d.keys() if isinstance(k, str) and k.islower()]\n    keys_upper = [k for k in d.keys() if isinstance(k, str) and k.isupper()]\n    return bool(keys_lower or keys_upper)"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Extract the last digit of each number\n    last_digit_a = abs(a) % 10\n    last_digit_b = abs(b) % 10\n\n    # Multiply the last digits and return the result\n    return last_digit_a * last_digit_b"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Gives a string s, count the number of uppercase vowel in even indexes. \n    For examples: count_upper('aBCdEf') returning 1 \n                  count_upper('abcdefg') returning 0 \n                  count_upper('dBBE') returning 0 \n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    piles = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 2\n        piles.append(n)\n    return piles"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(',', '').split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1. For examples: choose_num(12, 15) = 14 choose_num(13, 12) = -1 \"\"\"\n    if x > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sorted in increases order. For examples:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        \"\"\"Check if a number has even digit\"\"\"\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out strange numbers\n    arr = [i for i in arr if 1 <= i <= 9]\n\n    # Sort and reverse the array\n    arr.sort(reverse=True)\n\n    # Map numbers to their corresponding names\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    arr = [num_to_name[i] for i in arr]\n\n    return arr"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i:] + arr[:i] == sorted(arr):\n                return True\n        return False"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    # Check if all elements in lst1 are even\n    if all(i % 2 == 0 for i in lst1):\n        return \"YES\"\n    # Check if there is an odd number in lst1 and an even number in lst2\n    odd_in_lst1 = [i for i in lst1 if i % 2 != 0]\n    even_in_lst2 = [i for i in lst2 if i % 2 == 0]\n    if odd_in_lst1 and even_in_lst2:\n        return \"YES\"\n    # If no such pair found, return \"NO\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Create an empty dictionary to store the letter counts\n    letter_counts = {}\n\n    # Split the string into a list of words\n    words = test.split()\n\n    # Iterate over each word in the list\n    for word in words:\n        # Iterate over each letter in the word\n        for letter in word:\n            # If the letter is already in the dictionary, increment its count\n            if letter in letter_counts:\n                letter_counts[letter] += 1\n            # Otherwise, add the letter to the dictionary with a count of 1\n            else:\n                letter_counts[letter] = 1\n\n    # Find the maximum count\n    max_count = max(letter_counts.values(), default=0)\n\n    # Create a new dictionary to store the letters with the maximum count\n    max_letters = {letter: count for letter, count in letter_counts.items() if count == max_count}\n\n    # Return the new dictionary\n    return max_letters"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all characters in s that are in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the result string is a palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(1 for c in s if int(c) % 2 != 0)\n        replaced_string = \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_digits, odd_digits, odd_digits, odd_digits)\n        result.append(replaced_string)\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n    Examples minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum([-1, -2, -3]) == -6 \"\"\"\n\n    # Initialize current sum and minimum sum as infinity\n    current_sum = min_sum = nums[0]\n\n    # Iterate over the list starting from the second element\n    for num in nums[1:]:\n        # Update current sum\n        current_sum = min(num, current_sum + num)\n        # Update minimum sum\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    # Flatten the grid and count the number of 1s\n    total_wells = sum(sum(row) for row in grid)\n    # Calculate the number of buckets needed\n    buckets_needed = math.ceil(total_wells / capacity)\n    return buckets_needed"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    word = word[1:-1]  # remove first and last characters\n    for i in range(len(word) - 1, -1, -1):  # iterate from right to left\n        if word[i] in vowels:\n            for j in range(i - 1, -1, -1):  # find closest consonant to the right\n                if word[j] not in vowels:\n                    return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Initialize counters for open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # Iterate over each string in the list\n    for string in lst:\n        # Iterate over each character in the string\n        for char in string:\n            # If the character is an open parenthesis, increment the counter\n            if char == '(':\n                open_count += 1\n            # If the character is a close parenthesis, increment the counter\n            elif char == ')':\n                close_count += 1\n\n    # If the number of close parentheses is greater than the number of open parentheses, return 'Yes'\n    if close_count > open_count:\n        return 'Yes'\n    # Otherwise, return 'No'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Gives a non-emptiest array of integers arr and an integers k, return\n the sum of the elements with at more two digits from the first k elements of arr.\n\n Examples: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraint: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)\n \"\"\"\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through the first k elements of arr\n    for i in range(k):\n        # If the number has more than two digits, add it to the sum\n        if len(str(arr[i])) > 2:\n            sum += arr[i]\n\n    return sum\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequences = [collatz(i) for i in range(1, n+1)]\n    odd_numbers = sorted([num for seq in sequences for num in seq if num % 2 != 0])\n    return odd_numbers"}
{"task_id": "HumanEval/124", "solution": "import re\ndef valid_date(date):\n    \"\"\"\n    This function validates a date string and returns True if the date is valid otherwise False.\n    \"\"\"\n    # Check if the date is not empty\n    if date:\n        # Check if the date is in the correct format\n        if re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n            month, day, year = map(int, date.split('-'))\n            # Check if the month is valid\n            if 1 <= month <= 12:\n                # Check if the day is valid for each month\n                if month in [1, 3, 5, 7, 8, 10, 12]:\n                    if 1 <= day <= 31:\n                        return True\n                elif month in [4, 6, 9, 11]:\n                    if 1 <= day <= 30:\n                        return True\n                elif month == 2:\n                    if 1 <= day <= 29:\n                        return True\n    return False"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower()) % 2"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Determine the intersection of the two intervals\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    # If the intervals don't intersect, return \"NO\"\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YESES\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "solution": "import heapq\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    visited = set([(0, 0)])\n\n    while heap:\n        cost, x, y, path = heapq.heappop(heap)\n\n        if len(path) == k:\n            return path\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                new_cost = cost + grid[nx][ny]\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(heap, (new_cost, nx, ny, new_path))\n\n    return []"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    elif n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i])\n        return sequence"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a positive integers n, return the products of the odd digits.\n    Return 0 if all digits was even. For examples: digits(1) == 1 digits(4) == 0 digits(235) == 15 \"\"\"\n    digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if len(digits) == 0:\n        return 0\n    else:\n        return eval('*'.join(map(str, digits)))"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    return sum(int(abs(num) + 0.5) ** 2 for num in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1] == ' ':\n        return False\n    return txt[-1].isalpha() and txt[-2] == ' '"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Check if a and b are of the same type\n    if type(a) == type(b):\n        return None\n\n    # If a is a string, remove any commas and convert to float\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n\n    # If b is a string, remove any commas and convert to float\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Return the larger of the two values\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\"\"\"\n    if n < 10:\n        return False\n    else:\n        return n % 4 == 0"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    # Replace all space in it with underscore\n    text = text.replace(' ', '_')\n\n    # If a string had more than 2 consecutive space, then replace all consecutive space with -\n    while '__' in text:\n        text = text.replace('__', '-')\n\n    # If the string starts with a space, replace it with an underscore\n    if text[0] == '_':\n        text = '_' + text[1:]\n\n    return text"}
{"task_id": "HumanEval/141", "solution": "import re\ndef file_name_check(file_name):\n    \"\"\"\n    This function checks if a file name is valid.\n    A file name is considered valid if:\n    - It contains exactly one dot.\n    - The part before the dot does not start with a number and is not empty.\n    - The part after the dot is one of ['txt', 'exe', 'dll'].\n    - The file name does not contain more than three digits.\n    \"\"\"\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into two parts\n    name, extension = file_name.split('.')\n\n    # Check if the part before the dot starts with a letter and does not contain more than three digits\n    if not name[0].isalpha() or len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n\n    # Check if the part after the dot is one of ['txt', 'exe', 'dll']\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yeses'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    return sum(num**3 if i%3==0 and i%4==0 else num**2 if i%3==0 else num for i, num in enumerate(lst))"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the new numerator and denominator after simplification\n    new_num = x_num * n_num\n    new_den = x_den * n_den\n\n    # Check if the new numerator is a whole number\n    if new_num % new_den == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    # Create a list of tuples where each tuple contains a number and its sum of digits\n    nums_with_points = [(num, sum(map(int, str(abs(num)))) if num >= 0 else -sum(map(int, str(abs(num))))) for num in nums]\n    # Sort the list of tuples first by the sum of digits, then by the original index\n    nums_with_points.sort(key=lambda x: (x[1], nums.index(x[0])))\n    # Return the sorted list of numbers\n    return [num for num, _ in nums_with_points]"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort()\n    lst.sort(key=len)\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is a prime number, otherwise return y\"\"\"\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    odd_numbers = [num for num in lst if num > 0 and num % 2 != 0]\n    return sum(num ** 2 for num in odd_numbers)"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - h) for g, h in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    # Check if b is a substring of a\n    if b in a:\n        return True\n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n\n    # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Create a string from the operator and operand lists\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n\n    # Evaluate the expression\n    result = eval(expression)\n\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])"}
{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]"}
