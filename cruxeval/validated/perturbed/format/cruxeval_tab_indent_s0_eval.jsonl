{"input": "[1, 1, 3, 1, 3, 1]", "output": "[(4, 1), (4, 1), (4, 1), (4, 1), (2, 3), (2, 3)]", "code": "def operation_to_perform(nums):\n\toutput = []\n\tfor n in nums:\n\t\toutput.append((nums.count(n), n))\n\toutput.sort(reverse=True)\n\treturn output", "id": "sample_0"}
{"input": "(1, ), (1, ), (1, 2)", "output": "{1: None, 2: None}", "code": "def operation_to_perform(a, b, c):\n\tresult = {}\n\tfor d in a, b, c:\n\t\tresult.update(dict.fromkeys(d))\n\treturn result", "id": "sample_1"}
{"input": "'hbtofdeiequ'", "output": "'hbtofdeiequ'", "code": "def operation_to_perform(text):\n\tnew_text = list(text)\n\tfor i in '+':\n\t\tif i in new_text:\n\t\t\tnew_text.remove(i)\n\treturn ''.join(new_text)", "id": "sample_2"}
{"input": "'bcksrut', 'q'", "output": "'bcksrutq'", "code": "def operation_to_perform(text, value):\n\ttext_list = list(text)\n\ttext_list.append(value)\n\treturn ''.join(text_list)", "id": "sample_3"}
{"input": "[' ', '  ', '    ', '   ']", "output": "'           '", "code": "def operation_to_perform(array):\n\ts = ' '\n\ts += ''.join(array)\n\treturn s", "id": "sample_4"}
{"input": "'DSUWeqExTQdCMGpqur', 'a', 'x'", "output": "(0, 'xxxxxxxxxxxxxxxxxx')", "code": "def operation_to_perform(text, lower, upper):\n\tcount = 0\n\tnew_text = list()\n\tfor char in text:\n\t\tchar = lower if char.isdecimal() else upper\n\t\tif char in ['p', 'C']:\n\t\t\tcount += 1\n\t\tnew_text.append(char)\n\treturn count, ''.join(new_text)", "id": "sample_5"}
{"input": "{'11': 52, '65': 34, 'a': 12, '4': 52, '74': 31}", "output": "[('74', 31)]", "code": "def operation_to_perform(dic):\n\tfor k,v in sorted(dic.items(), key=lambda x: len(str(x)))[:-1]:\n\t\tdic.pop(k)\n\treturn list(dic.items())", "id": "sample_6"}
{"input": "[]", "output": "[]", "code": "def operation_to_perform(list):\n\toriginal = list[:]\n\twhile len(list) > 1:\n\t\tlist.pop(len(list) - 1)\n\t\tfor i in range(len(list)):\n\t\t\tlist.pop(i)\n\tlist = original[:]\n\tif list:\n\t\tlist.pop(0)\n\treturn list", "id": "sample_7"}
{"input": "'UppEr', 0", "output": "'UppEr'", "code": "def operation_to_perform(string, encryption):\n\tif encryption == 0:\n\t\treturn string\n\telse:\n\t\treturn string.upper().encode('rot13')", "id": "sample_8"}
{"input": "'#284376598'", "output": "False", "code": "def operation_to_perform(t):\n\tfor c in t:\n\t\tif not c.isnumeric():\n\t\t\treturn False\n\treturn True", "id": "sample_9"}
{"input": "''", "output": "''", "code": "def operation_to_perform(text):\n\tnew_text = ''\n\tfor ch in text.lower().strip():\n\t\tif ch.isnumeric() or ch in '\u00c4\u00e4\u00cf\u00ef\u00d6\u00f6\u00dc\u00fc':\n\t\t\tnew_text += ch\n\treturn new_text", "id": "sample_10"}
{"input": "{}, {'foo': 'bar'}", "output": "{'foo': ['bar']}", "code": "def operation_to_perform(a, b):\n\tfor key, value in b.items():\n\t\tif key not in a:\n\t\t\ta[key] = [value]\n\t\telse:\n\t\t\ta[key].append(value)\n\treturn a", "id": "sample_11"}
{"input": "'If you want to live a happy life! Daniel', 'Daniel'", "output": "'If you want to live a happy life! Daniel'", "code": "def operation_to_perform(s, x):\n\tcount = 0\n\twhile s[:len(x)] == x and count < len(s)-len(x):\n\t\ts = s[len(x):]\n\t\tcount += len(x)\n\treturn s", "id": "sample_12"}
{"input": "['sharron', 'Savannah', 'Mike Cherokee']", "output": "2", "code": "def operation_to_perform(names):\n\tcount = len(names)\n\tnumberOfNames = 0\n\tfor i in names:\n\t\tif i.isalpha():\n\t\t\tnumberOfNames += 1\n\treturn numberOfNames", "id": "sample_13"}
{"input": "'   OOP   '", "output": "'POO'", "code": "def operation_to_perform(s):\n\tarr = list(s.strip())\n\tarr.reverse()\n\treturn ''.join(arr)", "id": "sample_14"}
{"input": "\"zn kgd jw lnt\", \"h\", \"u\"", "output": "'ZN KGD JW LNT'", "code": "def operation_to_perform(text, wrong, right):\n\tnew_text = text.replace(wrong, right)\n\treturn new_text.upper()", "id": "sample_15"}
{"input": "'zejrohaj', 'owc'", "output": "'zejrohaj'", "code": "def operation_to_perform(text, suffix):\n\tif text.endswith(suffix):\n\t\treturn text[:-len(suffix)]\n\treturn text", "id": "sample_16"}
{"input": "\"There are, no, commas, in this text\"", "output": "9", "code": "def operation_to_perform(text):\n\treturn text.find(\",\")", "id": "sample_17"}
{"input": "[5, 4, 3, 2, 1, 0], 3", "output": "[3, 5, 4, 3, 2, 1, 0]", "code": "def operation_to_perform(array, elem):\n\tk = 0\n\tl = array.copy()\n\tfor i in l:\n\t\tif i > elem:\n\t\t\tarray.insert(k, elem)\n\t\t\tbreak\n\t\tk += 1\n\treturn array", "id": "sample_18"}
{"input": "\"\", \"sdasdnakjsda80\"", "output": "''", "code": "def operation_to_perform(x, y):\n\ttmp = ''.join(['0' if c == '9' else '9' for c in y[::-1]])\n\tif (x.isnumeric() and tmp.isnumeric()):\n\t\treturn x + tmp\n\telse:\n\t\treturn x", "id": "sample_19"}
{"input": "'was,'", "output": "',saw'", "code": "def operation_to_perform(text):\n\tresult = ''\n\tfor i in range(len(text)-1, -1, -1):\n\t\tresult += text[i]\n\treturn result", "id": "sample_20"}
{"input": "[1, 1, 2, 2]", "output": "[1, 1, 2, 2, 2]", "code": "def operation_to_perform(array):\n\tn = array.pop()\n\tarray.extend([n, n])\n\treturn array", "id": "sample_21"}
{"input": "000", "output": "[0]", "code": "def operation_to_perform(a):\n\tif a == 0:\n\t\treturn [0]\n\tresult = []\n\twhile a > 0:\n\t\tresult.append(a%10)\n\t\ta = a//10\n\tresult.reverse()\n\treturn int(''.join(str(i) for i in result))", "id": "sample_22"}
{"input": "'new-medium-performing-application - XQuery 2.2', '0123456789-'", "output": "'new-medium-performing-application - XQuery 2.'", "code": "def operation_to_perform(text, chars):\n\tif chars:\n\t\ttext = text.rstrip(chars)\n\telse:\n\t\ttext = text.rstrip(' ')\n\tif text == '':\n\t\treturn '-'\n\treturn text", "id": "sample_23"}
{"input": "[35, 45, 3, 61, 39, 27, 47], 0", "output": "[45, 3, 61, 39, 27, 47]", "code": "def operation_to_perform(nums, i):\n\tnums.pop(i)\n\treturn nums", "id": "sample_24"}
{"input": "{\"l\": 1, \"t\": 2, \"x:\": 3}", "output": "{'l': 1, 't': 2}", "code": "def operation_to_perform(d):\n\td = d.copy()\n\td.popitem()\n\treturn d", "id": "sample_25"}
{"input": "\"qy. dg. rnvprt rse.. irtwv tx..\", \"wtwdoacb\"", "output": "'error'", "code": "def operation_to_perform(items, target):\n\tfor i in items.split():\n\t\tif i in target:\n\t\t\treturn items.index(i)+1\n\t\tif i.index('.') == len(i)-1 or i.index('.') == 0:\n\t\t\treturn 'error'\n\treturn '.'", "id": "sample_26"}
{"input": "'flak'", "output": "False", "code": "def operation_to_perform(w):\n\tls = list(w)\n\tomw = ''\n\twhile len(ls) > 0:\n\t\tomw += ls.pop(0)\n\t\tif len(ls) * 2 > len(w):\n\t\t\treturn w[len(ls):] == omw\n\treturn False", "id": "sample_27"}
{"input": "[5, 8]", "output": "True", "code": "def operation_to_perform(mylist):\n\trevl = mylist[:]\n\trevl.reverse()\n\tmylist.sort(reverse=True)\n\treturn mylist == revl", "id": "sample_28"}
{"input": "'-123   \\t+314'", "output": "'123314'", "code": "def operation_to_perform(text):\n\tnums = list(filter(str.isnumeric, text))\n\tassert len(nums) > 0\n\treturn ''.join(nums)", "id": "sample_29"}
{"input": "[\"a\", \"b\", \"c\"]", "output": "['a', 'b', 'c']", "code": "def operation_to_perform(array):\n\tresult = []\n\tfor elem in array:\n\t\tif elem.isascii() or (isinstance(elem, int) and not str(abs(elem)).isascii()):\n\t\t\tresult.append(elem)\n\treturn result", "id": "sample_30"}
{"input": "'PoIOarTvpoead'", "output": "8", "code": "def operation_to_perform(string):\n\tupper = 0\n\tfor c in string:\n\t\tif c.isupper():\n\t\t\tupper += 1\n\treturn upper * (2,1)[upper % 2]", "id": "sample_31"}
{"input": "'volume', 'l'", "output": "'*ume;*vo'", "code": "def operation_to_perform(s, sep):\n\treverse = ['*' + e for e in s.split(sep)]\n\treturn ';'.join(reversed(reverse))", "id": "sample_32"}
{"input": "[5, 2, 7, 2, 3, 5]", "output": "'{5:[5,5],2:[5,2,2],7:[5,2,7]}'", "code": "def operation_to_perform(lists):\n\tdic = {}\n\tfor n in lists:\n\t\tif n in dic:\n\t\t\tdic[n].append(lists.pop(lists.index(n)))\n\t\telse:\n\t\t\tdic[n] = lists[:lists.index(n) + 1]\n\treturn str(dic).replace(' ', '')", "id": "sample_33"}
{"input": "[1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1", "output": "[2, 7, 7, 6, 8, 4, 2, 5, 21]", "code": "def operation_to_perform(nums, odd1, odd2):\n\twhile odd1 in nums:\n\t\tnums.remove(odd1)\n\twhile odd2 in nums:\n\t\tnums.remove(odd2)\n\treturn nums", "id": "sample_34"}
{"input": "\" B \", [\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"]", "output": "[]", "code": "def operation_to_perform(pattern, items):\n\tresult = []\n\tfor text in items:\n\t\tpos = text.rfind(pattern)\n\t\tif pos >= 0:\n\t\t\tresult.append(pos)\n\n\treturn result", "id": "sample_35"}
{"input": "'ha', ''", "output": "'ha'", "code": "def operation_to_perform(text, chars):\n\treturn text.rstrip(chars) if text else text", "id": "sample_36"}
{"input": "'123'", "output": "['123', '23', '3']", "code": "def operation_to_perform(text):\n\ttext_arr = []\n\tfor j in range(len(text)):\n\t\ttext_arr.append(text[j:])\n\treturn text_arr", "id": "sample_37"}
{"input": "'1oE-err bzz-bmm'", "output": "'1Oe-ErrBzz-Bmm'", "code": "def operation_to_perform(string):\n\treturn string.title().replace(' ', '')", "id": "sample_38"}
{"input": "[6, 2, 7, 1], 6", "output": "0", "code": "def operation_to_perform(array, elem):\n\tif elem in array:\n\t\treturn array.index(elem)\n\treturn -1", "id": "sample_39"}
{"input": "\"the cow goes moo\"", "output": "'the cow goes moo#'", "code": "def operation_to_perform(text):\n\treturn text.ljust(len(text) + 1, \"#\")", "id": "sample_40"}
{"input": "[58], [21, 92]", "output": "[58, 92, 21]", "code": "def operation_to_perform(array, values):\n\tarray.reverse()\n\tfor value in values:\n\t\tarray.insert(len(array) // 2, value)\n\tarray.reverse()\n\treturn array", "id": "sample_41"}
{"input": "[4, 3, 2, 1, 2, -1, 4, 2]", "output": "[]", "code": "def operation_to_perform(nums):\n\tnums.clear()\n\tfor num in nums:\n\t\tnums.append(num*2)\n\treturn nums", "id": "sample_42"}
{"input": "\"6 ** 2\"", "output": "-1", "code": "def operation_to_perform(n):\n\tfor i in str(n):\n\t\tif not i.isdigit():\n\t\t\tn = -1\n\t\t\tbreak\n\treturn n", "id": "sample_43"}
{"input": "'nzoh'", "output": "'*+++n+z+o+h'", "code": "def operation_to_perform(text):\n\tls = list(text)\n\tfor i in range(0, len(ls)):\n\t\tif ls[i]!='+':\n\t\t\tls.insert(i, '+')\n\t\t\tls.insert(i, '*')\n\t\t\tbreak\n\treturn '+'.join(ls)", "id": "sample_44"}
{"input": "'za1fd1as8f7afasdfam97adfa', '7'", "output": "2", "code": "def operation_to_perform(text, letter):\n\tcounts = {}\n\tfor char in text:\n\t\tif char not in counts:\n\t\t\tcounts[char] = 1\n\t\telse:\n\t\t\tcounts[char] += 1\n\treturn counts.get(letter, 0)", "id": "sample_45"}
{"input": "['many', 'letters', 'asvsz', 'hello', 'man'], ''", "output": "'manylettersasvszhelloman'", "code": "def operation_to_perform(l, c):\n\treturn c.join(l)", "id": "sample_46"}
{"input": "'bbbbr'", "output": "False", "code": "def operation_to_perform(text):\n\tlength = len(text)\n\thalf = length // 2\n\tencode = text[:half].encode('ascii')\n\tif text[half:] == encode.decode():\n\t\treturn True\n\telse:\n\t\treturn False", "id": "sample_47"}
{"input": "[]", "output": "''", "code": "def operation_to_perform(names):\n\tif names == []:\n\t\treturn \"\"\n\tsmallest = names[0]\n\tfor name in names[1:]:\n\t\tif name < smallest:\n\t\t\tsmallest = name\n\tnames.remove(smallest)\n\treturn names.join(smallest)", "id": "sample_48"}
{"input": "'816'", "output": "'816'", "code": "def operation_to_perform(text):\n\tif text.isidentifier():\n\t\treturn ''.join(c for c in text if c.isdigit())\n\telse:\n\t\treturn ''.join(text)", "id": "sample_49"}
{"input": "['a', 'c', 'v']", "output": "[1]", "code": "def operation_to_perform(lst):\n\tlst.clear()\n\tlst += [1] * (len(lst) + 1)\n\treturn lst", "id": "sample_50"}
{"input": "21", "output": "20", "code": "s = '<' * 10\ndef operation_to_perform(num):\n\tif num % 2 == 0:\n\t\treturn s\n\telse:\n\t\treturn num - 1", "id": "sample_51"}
{"input": "\"seiq7229 d27\"", "output": "'seiq d'", "code": "def operation_to_perform(text):\n\ta = []\n\tfor i in range(len(text)):\n\t\tif not text[i].isdecimal():\n\t\t\ta.append(text[i])\n\treturn ''.join(a)", "id": "sample_52"}
{"input": "\"URW rNB\"", "output": "[1, 1, 1, 1, 1, 1, 1]", "code": "def operation_to_perform(text):\n\tocc = {}\n\tfor ch in text:\n\t\tname = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}\n\t\tname = name.get(ch, ch)\n\t\tocc[name] = occ.get(name, 0) + 1\n\treturn [x for _, x in occ.items()]", "id": "sample_53"}
{"input": "'happy', 0, 3", "output": "1", "code": "def operation_to_perform(text, s, e):\n\tsublist = text[s:e]\n\tif not sublist:\n\t\treturn -1\n\treturn sublist.index(min(sublist))", "id": "sample_54"}
{"input": "[4, 8, 17, 89, 43, 14]", "output": "[89, 43, 17, 14, 8, 4]", "code": "def operation_to_perform(array):\n\tarray_2 = []\n\tfor i in array:\n\t\tif i>0:\n\t\t\tarray_2 += [i]\n\tarray_2.sort(reverse=True)\n\treturn array_2", "id": "sample_55"}
{"input": "'1z1z1'", "output": "True", "code": "def operation_to_perform(sentence):\n\tfor c in sentence:\n\t\tif c.isascii() is False:\n\t\t\treturn False\n\t\telse:\n\t\t\tcontinue\n\treturn True", "id": "sample_56"}
{"input": "'ax'", "output": "1", "code": "def operation_to_perform(text):\n\ttext = text.upper()\n\tcount_upper = 0\n\tfor char in text:\n\t\tif char.isupper():\n\t\t\tcount_upper += 1\n\t\telse:\n\t\t\treturn 'no'\n\treturn count_upper // 2", "id": "sample_57"}
{"input": "[-1, 0, 0, 1, 1]", "output": "[-1, 0, 0, 1, 1, -1, 0, -1, 0, -1]", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\tfor i in [i % 2 for i in range(count)]:\n\t\tnums.append(nums[i])\n\treturn nums", "id": "sample_58"}
{"input": "'hi '", "output": "'hi'", "code": "def operation_to_perform(s):\n\ta = [char for char in s if char != ' ']\n\tb = a\n\tfor c in reversed(a):\n\t\tif c == ' ':\n\t\t\tb.pop()\n\t\telse:\n\t\t\tbreak\n\treturn ''.join(b)", "id": "sample_59"}
{"input": "'raruwa'", "output": "'R'", "code": "def operation_to_perform(doc):\n\tfor x in doc:\n\t\tif x.isalpha():\n\t\t\treturn x.capitalize()\n\treturn '-'", "id": "sample_60"}
{"input": "\"\"", "output": "'nada'", "code": "def operation_to_perform(text):\n\ttexts = text.split()\n\tif texts:\n\t\txtexts = [t for t in texts if t.isascii() and t not in ('nada', '0')]\n\t\treturn max(xtexts, key=len) if xtexts else 'nada'\n\treturn 'nada'", "id": "sample_61"}
{"input": "{\"eating\" : \"ja\", \"books\" : \"nee\", \"piano\" : \"coke\", \"excitement\" : \"zoo\"}", "output": "('ja', 'nee', 'coke', 'zoo')", "code": "def operation_to_perform(user):\n\tif len(list(user.keys())) > len(list(user.values())):\n\t\treturn tuple(user.keys())\n\treturn tuple(user.values())", "id": "sample_62"}
{"input": "'ndbtdabdahesyehu', 'n'", "output": "'dbtdabdahesyehu'", "code": "def operation_to_perform(text, prefix):\n\twhile text.startswith(prefix):\n\t\ttext = text[len(prefix):] or text\n\treturn text", "id": "sample_63"}
{"input": "\"7\", 10", "output": "'     7     '", "code": "def operation_to_perform(text, size):\n\tcounter = len(text)\n\tfor i in range(size-int(size%2)):\n\t\ttext = ' '+text+' '\n\t\tcounter += 2\n\t\tif counter >= size:\n\t\t\treturn text", "id": "sample_64"}
{"input": "[3, 2, 0, 3, 7], 3", "output": "9", "code": "def operation_to_perform(nums, index):\n\treturn nums[index] % 42 + nums.pop(index) * 2", "id": "sample_65"}
{"input": "'happy', 'ha'", "output": "''", "code": "def operation_to_perform(text, prefix):\n\tprefix_length = len(prefix)\n\tif text.startswith(prefix):\n\t\treturn text[(prefix_length - 1) // 2:\n\t\t\t\t\t(prefix_length + 1) // 2 * -1:-1]\n\telse:\n\t\treturn text", "id": "sample_66"}
{"input": "6,8,8", "output": "'6,8,8'", "code": "def operation_to_perform(num1, num2, num3):\n\tnums = [num1, num2, num3]\n\tnums.sort()    \n\treturn f'{nums[0]},{nums[1]},{nums[2]}'", "id": "sample_67"}
{"input": "'omeunhwpvr.dq', 'omeunh'", "output": "'dq'", "code": "def operation_to_perform(text, pref):\n\tif text.startswith(pref):\n\t\tn = len(pref)\n\t\ttext = '.'.join(text[n:].split('.')[1:] + text[:n].split('.')[:-1])\n\treturn text", "id": "sample_68"}
{"input": "{'882afmfp': 56}, '6f53p'", "output": "'Name unknown'", "code": "def operation_to_perform(student_marks, name):\n\tif name in student_marks:\n\t\tvalue = student_marks.pop(name)\n\t\treturn value\n\treturn 'Name unknown'", "id": "sample_69"}
{"input": "'999893767522480'", "output": "30", "code": "def operation_to_perform(x):\n\ta = 0\n\tfor i in x.split(' '):\n\t\ta += len(i.zfill(len(i)*2))\n\treturn a", "id": "sample_70"}
{"input": "{1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 1", "output": "{1: 2, 3: 4, 5: 6, 7: 8, 10: 9}", "code": "def operation_to_perform(d, n):\n\tfor i in range(n):\n\t\titem = d.popitem()\n\t\td[item[1]] = item[0]\n\treturn d", "id": "sample_71"}
{"input": "'99'", "output": "True", "code": "def operation_to_perform(text):\n\tfor c in text:\n\t\tif not c.isnumeric():\n\t\t\treturn False\n\treturn bool(text)", "id": "sample_72"}
{"input": "\"100010010\"", "output": "(3, 6)", "code": "def operation_to_perform(row):\n\treturn (row.count('1'), row.count('0'))", "id": "sample_73"}
{"input": "[44, 34, 23, 82, 24, 11, 63, 99], 4, 15", "output": "[44, 34, 23, 82, 15, 24, 11, 63, 99]", "code": "def operation_to_perform(lst, i, n):\n\tlst.insert(i, n)\n\treturn lst", "id": "sample_74"}
{"input": "[-1, 2, 1, -8, 2], 2", "output": "-22", "code": "def operation_to_perform(array, elem):\n\tind = array.index(elem)\n\treturn ind * 2 + array[-ind - 1] * 3", "id": "sample_75"}
{"input": "[10, 3, 2, 2, 6, 0]", "output": "[6, 2, 0, 0, 0, 0, 0, 2, 3, 10]", "code": "def operation_to_perform(nums):\n\tnums = [y for y in nums if y > 0]\n\tif len(nums) <= 3:\n\t\treturn nums\n\tnums.reverse()\n\thalf = len(nums)//2\n\treturn nums[:half] + [0]*5 + nums[half:]", "id": "sample_76"}
{"input": "'h ,lpvvkohh,u', 'i'", "output": "''", "code": "def operation_to_perform(text, character):\n\tsubject = text[text.rfind(character):]\n\treturn subject*text.count(character)", "id": "sample_77"}
{"input": "'mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n'", "output": "'mty'", "code": "def operation_to_perform(text):\n\tif text and text.isupper():\n\t\tcs = str.maketrans(string.ascii_uppercase, string.ascii_lowercase)\n\t\treturn text.translate(cs)\n\treturn text.lower()[:3]", "id": "sample_78"}
{"input": "[0, 1, 2, 3, 4]", "output": "'1,2,3,4'", "code": "def operation_to_perform(arr):\n\tarr = list(arr)\n\tarr.clear()\n\tarr.append('1')\n\tarr.append('2')\n\tarr.append('3')\n\tarr.append('4')\n\treturn ','.join(arr)", "id": "sample_79"}
{"input": "'ab        '", "output": "'ba'", "code": "def operation_to_perform(s):\n\treturn ''.join(reversed(s.rstrip()))", "id": "sample_80"}
{"input": "{\"Bulls\": 23, \"White Sox\": 45}, \"Bulls\"", "output": "[('Bulls', 'bulls'), ('White Sox', 45)]", "code": "def operation_to_perform(dic, inx):\n\ttry:\n\t\tdic[list(dic)[list(dic).index(inx)]] = list(dic)[list(dic).index(inx)].lower()\n\texcept ValueError:\n\t\tpass\n\treturn list(dic.items())", "id": "sample_81"}
{"input": "'CJU', 'BFS', 'WBYDZPVES', 'Y'", "output": "'BFS'", "code": "def operation_to_perform(a, b, c, d):\n\treturn a and b or c and d", "id": "sample_82"}
{"input": "'qq0tt'", "output": "'2:0'", "code": "def operation_to_perform(text):\n\tl = text.rpartition('0')\n\tif l[2] == '':\n\t\treturn '-1:-1'\n\treturn f'{len(l[0])}:{l[2].find(\"0\") + 1}'", "id": "sample_83"}
{"input": "\"nwv mef ofme bdryl\"", "output": "'nwvday mefday ofmeday bdrylday'", "code": "def operation_to_perform(text):\n\tarr = text.split()\n\tresult = []\n\tfor item in arr:\n\t\tif item.endswith('day'):\n\t\t\titem += 'y'\n\t\telse:\n\t\t\titem += 'day'\n\t\tresult.append(item)\n\treturn ' '.join(result)", "id": "sample_84"}
{"input": "12", "output": "[3, 4.5]", "code": "def operation_to_perform(n):\n\tvalues = {0: 3, 1: 4.5, 2: '-'}\n\tres = {}\n\tfor i, j in values.items():\n\t\tif i % n != 2:\n\t\t\tres[j] = n // 2\n\treturn sorted(res)", "id": "sample_85"}
{"input": "['sdfs', 'drcr', '2e'], ['sdfs', 'dr2c', 'QWERTY'], 0", "output": "['sdfs', 'drcr', '2e']", "code": "def operation_to_perform(instagram, imgur, wins):\n\tphotos = [instagram, imgur]\n\tif instagram == imgur:\n\t\treturn wins\n\tif wins == 1:\n\t\treturn photos.pop()\n\telse:\n\t\tphotos.reverse()\n\t\treturn photos.pop()", "id": "sample_86"}
{"input": "[-1, 9, 3, 1, -2]", "output": "'-2139-1'", "code": "def operation_to_perform(nums):\n\tnums.reverse()\n\treturn ''.join(map(str, nums))", "id": "sample_87"}
{"input": "\"he\", \"hello\"", "output": "'hello'", "code": "def operation_to_perform(s1, s2):\n\tif s2.endswith(s1):\n\t\ts2 = s2[:len(s1) * -1]\n\treturn s2", "id": "sample_88"}
{"input": "'o'", "output": "'O'", "code": "def operation_to_perform(char):\n\tif char not in 'aeiouAEIOU':\n\t\treturn None\n\tif char in 'AEIOU':\n\t\treturn char.lower()\n\treturn char.upper()", "id": "sample_89"}
{"input": "[[1, 2, 3], [], [1, 2, 3]]", "output": "[[1, 2, 3], [], [1, 2, 3]]", "code": "def operation_to_perform(array):\n\treturn_arr = []\n\tfor a in array:\n\t\treturn_arr.append(a.copy())\n\treturn return_arr", "id": "sample_90"}
{"input": "\"12ab23xy\"", "output": "['1', '2', 'a', 'b', '3', 'x', 'y']", "code": "def operation_to_perform(s):\n\td = dict.fromkeys(s, 0)\n\treturn list(d.keys())", "id": "sample_91"}
{"input": "'wW\uc758IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct'", "output": "False", "code": "def operation_to_perform(text):\n\treturn text.isascii()", "id": "sample_92"}
{"input": "'iq'", "output": "'iq!!!!'", "code": "def operation_to_perform(n):\n\tlength = len(n) + 2\n\trevn = list(n)\n\tresult = ''.join(revn)\n\trevn.clear()\n\treturn result + ('!' * length)", "id": "sample_93"}
{"input": "{'w': 5, 'wi': 10}, {'w': 3}", "output": "{'w': 3, 'wi': 10}", "code": "def operation_to_perform(a, b):\n\treturn {**a, **b}", "id": "sample_94"}
{"input": "{'AAA': 'fr'}", "output": "{'fr': 'AAA'}", "code": "def operation_to_perform(zoo):\n\treturn dict((v, k) for k, v in zoo.items())", "id": "sample_95"}
{"input": "'lunabotics'", "output": "True", "code": "def operation_to_perform(text):\n\treturn not any([c.isupper() for c in text])", "id": "sample_96"}
{"input": "[2, 0]", "output": "True", "code": "def operation_to_perform(lst):\n\tlst.clear()\n\tfor i in lst:\n\t\tif i == 3:\n\t\t\treturn False\n\telse:\n\t\treturn True", "id": "sample_97"}
{"input": "'SOME OF THIS Is uknowN!'", "output": "1", "code": "def operation_to_perform(s):\n\treturn sum([s.istitle() for s in s.split()])", "id": "sample_98"}
{"input": "'aa+++bb', '+', 1", "output": "'aa++___bb'", "code": "def operation_to_perform(text, sep, num):\n\treturn '___'.join(text.rsplit(sep, num))", "id": "sample_99"}
{"input": "{'1': 'a', 1: 'a', 1: 'b', '1': 'b'}, [1]", "output": "{'1': 'b'}", "code": "def operation_to_perform(d, rm):\n\tres = d.copy()\n\tfor k in rm:\n\t\tif k in res:\n\t\t\tdel res[k]\n\treturn res", "id": "sample_100"}
{"input": "[ -4,   1,  0], 1, 4", "output": "[-4, 4, 1, 0]", "code": "def operation_to_perform(array, i_num, elem):\n\tarray.insert(i_num, elem)\n\treturn array", "id": "sample_101"}
{"input": "['e', 'f', 'j', 'x', 'r', 'k'], ['a', 'v', '2', 'im', 'nb', 'vj', 'z']", "output": "[]", "code": "def operation_to_perform(names, winners):\n\tls = [names.index(name) for name in names if name in winners]\n\tls.sort(reverse=True)\n\treturn ls", "id": "sample_102"}
{"input": "'abcDEFGhIJ'", "output": "'abcdefghij'", "code": "def operation_to_perform(s):\n\treturn ''.join((c.casefold() for c in s))", "id": "sample_103"}
{"input": "\"a\"", "output": "{'a': 1}", "code": "def operation_to_perform(text):\n\tdic = dict()\n\tfor char in text:\n\t\tdic[char] = dic.get(char, 0) + 1\n\tfor key in dic:\n\t\tif dic[key] > 1:\n\t\t\tdic[key] = 1\n\treturn dic", "id": "sample_104"}
{"input": "\"PermissioN is GRANTed\"", "output": "'Permission Is Granted'", "code": "def operation_to_perform(text):\n\tif not text.istitle():\n\t\treturn text.title()\n\treturn text.lower()", "id": "sample_105"}
{"input": "[2, 8, -2, 9, 3, 3]", "output": "[4, 4, 4, 4, 4, 4, 2, 8, -2, 9, 3, 3]", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\tfor i in range(0, count):\n\t\tnums.insert(i, nums[i]*2)\n\treturn nums", "id": "sample_106"}
{"input": "\"ua6hajq\"", "output": "'UA6HAJQ'", "code": "def operation_to_perform(text):\n\tresult = []\n\tfor i in range(len(text)):\n\t\tif not text[i].isascii():\n\t\t\treturn False\n\t\telif text[i].isalnum():\n\t\t\tresult.append(text[i].upper())\n\t\telse:\n\t\t\tresult.append(text[i])\n\treturn ''.join(result)", "id": "sample_107"}
{"input": "1", "output": "0", "code": "def operation_to_perform(var):\n\tamount = len(var) if type(var) == list else 0\n\tif type(var) == dict:\n\t\tamount = len(var.keys())\n\tnonzero = amount if amount > 0 else 0\n\treturn nonzero", "id": "sample_108"}
{"input": "[1, 0, 1, 1], 0, 9", "output": "[9, 1, 0, 1, 1]", "code": "def operation_to_perform(nums, spot, idx):\n\tnums.insert(spot, idx)\n\treturn nums", "id": "sample_109"}
{"input": "\"       \"", "output": "1", "code": "def operation_to_perform(text):\n\ta = ['']\n\tb = ''\n\tfor i in text:\n\t\tif not i.isspace():\n\t\t\ta.append(b)\n\t\t\tb = ''\n\t\telse:\n\t\t\tb += i\n\treturn len(a)", "id": "sample_110"}
{"input": "{'x': 67, 'v': 89, '': 4, 'alij': 11, 'kgfsd': 72, 'yafby': 83}", "output": "(89, 4)", "code": "def operation_to_perform(marks):\n\thighest = 0\n\tlowest = 100\n\tfor value in marks.values():\n\t\tif value > highest:\n\t\t\thighest = value\n\t\tif value < lowest:\n\t\t\tlowest = value\n\treturn highest, lowest", "id": "sample_111"}
{"input": "'XYZ LittleRedRidingHood LiTTleBIGGeXEiT fault'", "output": "'XYZLtRRdnHodLTTBIGGeXET fult'", "code": "def operation_to_perform(sentence):\n\tls = list(sentence)\n\tfor letter in ls:\n\t\tif not letter.istitle():\n\t\t\tls.remove(letter)\n\treturn ''.join(ls)", "id": "sample_112"}
{"input": "\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"", "output": "'987YhnShAShD 93275yRgsgBgssHfBsFB'", "code": "def operation_to_perform(line):\n\tcount = 0\n\ta = []\n\tfor i in range(len(line)):\n\t\tcount += 1\n\t\tif count%2==0:\n\t\t\ta.append(line[i].swapcase())\n\t\telse:\n\t\t\ta.append(line[i])\n\treturn ''.join(a)", "id": "sample_113"}
{"input": "\"a-.-.b\", \"-.\"", "output": "['a', '', 'b']", "code": "def operation_to_perform(text, sep):\n\treturn text.rsplit(sep, maxsplit=2)", "id": "sample_114"}
{"input": "'os||agx5'", "output": "b'111; 115; 124; 124; 97; 103; 120; 53; '", "code": "def operation_to_perform(text):\n\tres = []\n\tfor ch in text.encode('utf-8'):\n\t\tif ch == 61:\n\t\t\tbreak\n\t\tif ch == 0:\n\t\t\tpass\n\t\tres.append(f'{ch}; '.encode('utf-8'))\n\treturn b''.join(res)", "id": "sample_115"}
{"input": "{}, 200", "output": "{}", "code": "def operation_to_perform(d, count):\n\tfor i in range(count):\n\t\tif d == {}:\n\t\t\tbreak\n\t\td.popitem()\n\treturn d", "id": "sample_116"}
{"input": "\"23157\"", "output": "-1", "code": "def operation_to_perform(numbers):\n\tfor i in range(len(numbers)):\n\t\tif numbers.count('3') > 1:\n\t\t\treturn i\n\treturn -1", "id": "sample_117"}
{"input": "'zbzquiuqnmfkx', 'mk'", "output": "'zbzquiuqnmfkx'", "code": "def operation_to_perform(text, chars):\n\tnum_applies = 2\n\textra_chars = ''\n\tfor i in range(num_applies):\n\t\textra_chars += chars\n\t\ttext = text.replace(extra_chars, '')\n\treturn text", "id": "sample_118"}
{"input": "\"vsnlygltaw\"", "output": "'VsNlYgLtAw'", "code": "def operation_to_perform(text):\n\tresult = \"\"\n\tfor i in range(len(text)):\n\t\tif i % 2 == 0:\n\t\t\tresult += text[i].swapcase()\n\t\telse:\n\t\t\tresult += text[i]\n\treturn result", "id": "sample_119"}
{"input": "{}", "output": "{}", "code": "def operation_to_perform(countries):\n\tlanguage_country = dict()\n\tfor country, language in countries.items():\n\t\tif language not in language_country:\n\t\t\tlanguage_country[language] = []\n\t\tlanguage_country[language].append(country)\n\treturn language_country", "id": "sample_120"}
{"input": "'01,001'", "output": "'1001'", "code": "def operation_to_perform(s):\n\tnums = ''.join(filter(lambda c:c.isdecimal(), s))\n\tif nums == '': return 'none'\n\tm = max([int(num) for num in nums.split(',')])\n\treturn str(m)", "id": "sample_121"}
{"input": "'Nuva?dlfuyjys'", "output": "'Nuva?dlfuyjys'", "code": "def operation_to_perform(string):\n\tif string[:4] != 'Nuva':\n\t\treturn 'no'\n\telse:\n\t\treturn string.rstrip()", "id": "sample_122"}
{"input": "[1, 2, 3, 5, 8], 6", "output": "[1, 2, 3, 5, 6, 8]", "code": "def operation_to_perform(array, elem):\n\tfor idx, e in enumerate(array):\n\t\tif e > elem and array[idx - 1] < elem:\n\t\t\tarray.insert(idx, elem)\n\treturn array", "id": "sample_123"}
{"input": "'i like you', ' ', -1", "output": "'i like you'", "code": "def operation_to_perform(txt, sep, sep_count):\n\to = ''\n\twhile sep_count > 0 and txt.count(sep) > 0:\n\t\to += txt.rsplit(sep, 1)[0] + sep\n\t\ttxt = txt.rsplit(sep, 1)[1]\n\t\tsep_count -= 1\n\treturn o + txt", "id": "sample_124"}
{"input": "'\"Leap and the net will appear', 123", "output": "'3Leap and the net will appear'", "code": "def operation_to_perform(text, res):\n\tfor c in '*\\n\"':\n\t\ttext = text.replace(c, '!' + str(res))\n\tif text.startswith('!'):\n\t\ttext = text[len(str(res)):]\n\treturn text", "id": "sample_125"}
{"input": "'kkxkxxfck'", "output": "'-kkxkxxfck'", "code": "def operation_to_perform(text):\n\ts = text.rpartition('o')\n\tdiv, div2 = (s[0] == '' and '-' or s[0]), (s[2] == '' and '-' or s[2])\n\treturn s[1] + div + s[1] + div2", "id": "sample_126"}
{"input": "\"145\\n\\n12fjkjg\"", "output": "3", "code": "def operation_to_perform(text):\n\ts = text.splitlines()\n\treturn len(s)", "id": "sample_127"}
{"input": "'Mammoth'", "output": "'Mmohamt'", "code": "def operation_to_perform(text):\n\todd = ''\n\teven = ''\n\tfor i, c in enumerate(text):\n\t\tif i % 2 == 0:\n\t\t\teven += c\n\t\telse:\n\t\t\todd += c\n\treturn even + odd.lower()", "id": "sample_128"}
{"input": "'ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ', 'J'", "output": "[28, 19, 12, 6]", "code": "def operation_to_perform(text, search_string):\n\tindexes = []\n\twhile search_string in text:\n\t\tindexes.append(text.rindex(search_string))\n\t\ttext = text[:text.rindex(search_string)]\n\treturn indexes", "id": "sample_129"}
{"input": "{'l':4, 'h':6, 'o':9}", "output": "'h=l'", "code": "def operation_to_perform(m):\n\titems = list(m.items())\n\tfor i in range(len(items)-2, -1, -1):\n\t\ttmp = items[i]\n\t\titems[i] = items[i+1] \n\t\titems[i+1] = tmp\n\treturn ['{}={}', '{1}={0}'][len(items) % 2].format(\n\t\t*m.keys(), **m\n\t)", "id": "sample_130"}
{"input": "\"a\\nkgf\\nasd\\n\"", "output": "1", "code": "def operation_to_perform(text):\n\ta = len(text)\n\tcount = 0\n\twhile text:\n\t\tif text.startswith('a'):\n\t\t\tcount += text.find(' ')\n\t\telse:\n\t\t\tcount += text.find('\\n')\n\t\ttext = text[text.find('\\n')+1:text.find('\\n')+a+1]\n\treturn count", "id": "sample_131"}
{"input": "'abc', 'abcd'", "output": "'abc'", "code": "def operation_to_perform(a_str, prefix):\n\tif a_str.removeprefix(prefix):\n\t\treturn a_str\n\telse:\n\t\treturn prefix + a_str", "id": "sample_132"}
{"input": "[7, 1, 2, 6, 0, 2], [9, 0, 3]", "output": "[7, 1, 2]", "code": "def operation_to_perform(nums, elements):\n\tresult = []\n\tfor i in range(len(elements)):\n\t\tresult.append(nums.pop())\n\treturn nums", "id": "sample_133"}
{"input": "372359", "output": "'372359'", "code": "def operation_to_perform(n):\n\tt = 0\n\tb = ''\n\tdigits = list(map(int, str(n)))\n\tfor d in digits:\n\t\tif d == 0: t += 1\n\t\telse: break\n\tfor _ in range(t):\n\t\tb += str(1) + '0' + str(4)\n\tb += str(n)\n\treturn b", "id": "sample_134"}
{"input": "", "output": "['Russia', 'Kazakhstan']", "code": "def operation_to_perform():\n\td = {\n\t\t'Russia': [('Moscow', 'Russia'), ('Vladivostok', 'Russia')],\n\t\t'Kazakhstan': [('Astana', 'Kazakhstan')],\n\t}\n\treturn list(d.keys())", "id": "sample_135"}
{"input": "\"a\\nbc\\n\\nd\\nef\", 5", "output": "'  a  \\n  bc \\n     \\n  d  \\n  ef '", "code": "def operation_to_perform(text, width):\n\tlines = [line.center(width) for line in text.split('\\n')]\n\treturn '\\n'.join(lines)", "id": "sample_136"}
{"input": "[3, 2, 0, 0, 2, 3]", "output": "[]", "code": "def operation_to_perform(nums):\n\tcount = 0\n\tfor i in range(len(nums)):\n\t\tif len(nums) == 0:\n\t\t\tbreak\n\t\tif count % 2 == 0:\n\t\t\tnums.pop()\n\t\telse:\n\t\t\tnums.pop(0)\n\t\tcount += 1\n\treturn nums", "id": "sample_137"}
{"input": "'tflb omn rtt', 'm'", "output": "'tflb omn rtt'", "code": "def operation_to_perform(text, chars):\n\tlistchars = list(chars)\n\tfirst = listchars.pop()\n\tfor i in listchars:\n\t\ttext = text[0:text.find(i)]+i+text[text.find(i)+1:]\n\treturn text", "id": "sample_138"}
{"input": "[1, 2, 1], [1, 1, 2]", "output": "'no'", "code": "def operation_to_perform(first, second):\n\tif len(first) < 10 or len(second) < 10:\n\t\treturn 'no'\n\tfor i in range(5):\n\t\tif first[i] != second[i]:\n\t\t\treturn 'no'\n\tfirst.extend(second)\n\treturn first", "id": "sample_139"}
{"input": "'Hi there'", "output": "'Hey'", "code": "def operation_to_perform(st):\n\tif st.lower().rindex('h', st.lower().rindex('i')) >= st.lower().rindex('i'):\n\t\treturn 'Hey'\n\telse:\n\t\treturn 'Hi'", "id": "sample_140"}
{"input": "['k', 'x', 'c', 'x', 'x', 'b', 'l', 'f', 'r', 'n', 'g']", "output": "[1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]", "code": "def operation_to_perform(li):\n\treturn [li.count(i) for i in li]", "id": "sample_141"}
{"input": "'ykdfhp'", "output": "'ykdfhp'", "code": "def operation_to_perform(x):\n\tif x.islower():\n\t\treturn x\n\telse:\n\t\treturn x[::-1]", "id": "sample_142"}
{"input": "\"daaX\", \"daaX\"", "output": "True", "code": "def operation_to_perform(s, n):\n\treturn s.casefold() == n.casefold()", "id": "sample_143"}
{"input": "[]", "output": "[]", "code": "def operation_to_perform(vectors):\n\tsorted_vecs = []\n\tfor vec in vectors:\n\t\tvec.sort()\n\t\tsorted_vecs.append(vec)\n\treturn sorted_vecs", "id": "sample_144"}
{"input": "8.50, 'grapes'", "output": "8.5", "code": "def operation_to_perform(price, product):\n\tinventory = ['olives', 'key', 'orange']\n\tif product not in inventory:\n\t\treturn price\n\telse:\n\t\tprice *=.85\n\t\tinventory.remove(product)\n\treturn price", "id": "sample_145"}
{"input": "5", "output": "[1, 2, 3, 4, 6, 7, 8, 9, 10]", "code": "def operation_to_perform(single_digit):\n\tresult = []\n\tfor c in range(1, 11):\n\t\tif c != single_digit:\n\t\t\tresult.append(c)\n\treturn result", "id": "sample_146"}
{"input": "[1, 1, 1]", "output": "[1, 1, 1]", "code": "def operation_to_perform(nums):\n\tmiddle = len(nums)//2\n\treturn nums[middle:] + nums[0:middle]", "id": "sample_147"}
{"input": "'2imo 12 tfiqr.', 'm'", "output": "'2io 12 tfiqr.-'", "code": "def operation_to_perform(forest, animal):\n\tindex = forest.index(animal)\n\tresult = list(forest)\n\twhile index < len(forest)-1:\n\t\tresult[index] = forest[index+1]\n\t\tindex += 1\n\tif index == len(forest)-1:\n\t\tresult[index] = '-'\n\treturn ''.join(result)", "id": "sample_148"}
{"input": "(32332, 23543, 132323, 33300), ','", "output": "'2,4,2,0,'", "code": "def operation_to_perform(tuple_list, joint):\n\tstring = ''\n\tfor num in tuple_list:\n\t\tstring += dict.fromkeys(str(num), joint * len(str(num))).popitem()[0] + joint\n\treturn string", "id": "sample_149"}
{"input": "[-2, 4, -4], 0", "output": "[-2, 4, -4]", "code": "def operation_to_perform(numbers, index):\n\tfor n in numbers[index:]:\n\t\tnumbers.insert(index, n)\n\t\tindex += 1\n\treturn numbers[:index]", "id": "sample_150"}
{"input": "'697 this is the ultimate 7 address to attack'", "output": "'697 this is the ultimate 7 address to attack'", "code": "def operation_to_perform(text):\n\tfor c in text:\n\t\tif c.isdigit():\n\t\t\tif c == '0':\n\t\t\t\tc = '.'\n\t\t\telse:\n\t\t\t\tc = '0' if c != '1' else '.'\n\treturn ''.join(list(text)).replace('.', '0')", "id": "sample_151"}
{"input": "''.join(['A'] * 20)", "output": "20", "code": "def operation_to_perform(text):\n\tn = 0\n\tfor char in text:\n\t\tif char.isupper():\n\t\t\tn += 1\n\treturn n", "id": "sample_152"}
{"input": "'friends and love', 'and', 3", "output": "False", "code": "def operation_to_perform(text, suffix, num):\n\tstr_num = str(num)\n\treturn text.endswith(suffix + str_num)", "id": "sample_153"}
{"input": "'Hello There', '*'", "output": "'*  There  Hello'", "code": "def operation_to_perform(s, c):\n\ts = s.split(' ')\n\treturn ((c + \"  \") + (\"  \".join(s[::-1])))", "id": "sample_154"}
{"input": "\"dskjs hjcdjnxhjicnn\", 4", "output": "'dskj\\ns hj\\ncdjn\\nxhji\\ncnn'", "code": "def operation_to_perform(ip, n):\n\ti = 0\n\tout = ''\n\tfor c in ip:\n\t\tif i == n:\n\t\t\tout += '\\n'\n\t\t\ti = 0\n\t\ti += 1\n\t\tout += c\n\treturn out", "id": "sample_155"}
{"input": "'tqzym', 5, 'c'", "output": "'tqzym'", "code": "def operation_to_perform(text, limit, char):\n\tif limit < len(text):\n\t\treturn text[0:limit]\n\treturn text.ljust(limit, char)", "id": "sample_156"}
{"input": "\"aboba 212 has 0 digits\"", "output": "1", "code": "def operation_to_perform(phrase):\n\tans = 0\n\tfor w in phrase.split():\n\t\tfor ch in w:\n\t\t\tif ch == \"0\":\n\t\t\t\tans += 1\n\treturn ans", "id": "sample_157"}
{"input": "[3, 6, 4, -2, 5]", "output": "[6, 4, -2, 6, 4, -2]", "code": "def operation_to_perform(arr):\n\tn = [item for item in arr if item%2 == 0]\n\tm = n+arr\n\tfor i in m:\n\t\tif m.index(i) >= len(n):\n\t\t\tm.remove(i)\n\treturn m", "id": "sample_158"}
{"input": "'RTiGM'", "output": "'mgItr'", "code": "def operation_to_perform(st):\n\tswapped = ''\n\tfor ch in reversed(st):\n\t\tswapped += ch.swapcase()\n\treturn swapped", "id": "sample_159"}
{"input": "{1: 47698, 1: 32849, 1: 38381, 3: 83607}", "output": "{1: 38381, 3: 83607}", "code": "def operation_to_perform(dictionary):\n\twhile not dictionary.get(1, len(dictionary)):\n\t\tdictionary.clear()\n\t\tbreak\n\treturn dictionary", "id": "sample_160"}
{"input": "'difkj rinpx', 'k'", "output": "'j rinpxdif'", "code": "def operation_to_perform(text, value):\n\tleft, _, right = text.partition(value)\n\treturn right + left", "id": "sample_161"}
{"input": "'\u0441 bishop.Swift'", "output": "'\u0421BISHOPSWIFT'", "code": "def operation_to_perform(text):\n\tresult = ''\n\tfor char in text:\n\t\tif char.isalnum():\n\t\t\tresult += char.upper()\n\treturn result", "id": "sample_162"}
{"input": "'w', '))', 7", "output": "'w))))))))))))'", "code": "def operation_to_perform(text, space_symbol, size):\n\tspaces = ''.join(space_symbol for i in range(size-len(text)))\n\treturn text + spaces", "id": "sample_163"}
{"input": "[5, 8, 1, 3, 0]", "output": "[0, 1, 3]", "code": "def operation_to_perform(lst):\n\tlst.sort()\n\treturn lst[0:3]", "id": "sample_164"}
{"input": "'=xtanp|sugv?z', 3, 6", "output": "True", "code": "def operation_to_perform(text, lower, upper):\n\treturn text[lower:upper].isascii()", "id": "sample_165"}
{"input": "{}", "output": "{}", "code": "def operation_to_perform(graph):\n\tnew_graph = {}\n\tfor key, value in graph.items():\n\t\tnew_graph[key] = {}\n\t\tfor subkey in value:\n\t\t\tnew_graph[key][subkey] = ''\n\treturn new_graph", "id": "sample_166"}
{"input": "'aaXXXXbbXXXXccXXXXde', 'QW'", "output": "'aaQwQwQwbbQwQwQwccQwQwQwde'", "code": "def operation_to_perform(XAAXX, s):\n\tcount = 0\n\tidx = -1\n\twhile XAAXX.find('XXXX', idx+1) != -1:\n\t\tidx = XAAXX.find('XXXX', idx+1) \n\t\tcount += 1 \n\tcompound = count * s.title()\n\treturn XAAXX.replace('XXXX', compound)", "id": "sample_167"}
{"input": "'spain', 'b', 4", "output": "'spaib'", "code": "def operation_to_perform(text, new_value, index):\n\tkey = text.maketrans(text[index], new_value)\n\treturn text.translate(key)", "id": "sample_168"}
{"input": "'taole'", "output": "'++++taole++++'", "code": "def operation_to_perform(text):\n\tls = list(text)\n\ttotal = (len(text) - 1) * 2\n\tfor i in range(1, total+1):\n\t\tif i % 2:\n\t\t\tls.append('+')\n\t\telse:\n\t\t\tls.insert(0, '+')\n\treturn ''.join(ls).rjust(total)", "id": "sample_169"}
{"input": "[12, 0, 13, 4, 12], 12", "output": "2", "code": "def operation_to_perform(nums, number):\n\treturn nums.count(number)", "id": "sample_170"}
{"input": "[3, 4, 1, 2, 3]", "output": "[1, 2, 3]", "code": "def operation_to_perform(nums):\n\tcount = len(nums) // 2\n\tfor _ in range(count):\n\t\tnums.pop(0)\n\treturn nums", "id": "sample_171"}
{"input": "[]", "output": "[]", "code": "def operation_to_perform(array):\n\tfor i in range(len(array)):\n\t\tif array[i] < 0:\n\t\t\tarray.pop(i)\n\treturn array", "id": "sample_172"}
{"input": "[5, 8, 6, 8, 4]", "output": "[4, 8, 6, 8, 5]", "code": "def operation_to_perform(list_x):\n\titem_count = len(list_x)\n\tnew_list = []\n\tfor i in range(item_count):\n\t\tnew_list.append(list_x.pop())\n\treturn new_list", "id": "sample_173"}
{"input": "[1, 2, 3]", "output": "[1, 3, 2]", "code": "def operation_to_perform(lst):\n\tlst[1:4] = lst[1:4][::-1]\n\treturn lst", "id": "sample_174"}
{"input": "'\\n', 2", "output": "' '", "code": "def operation_to_perform(s, amount):\n\tlines = s.splitlines()\n\tw = max(map(lambda l: l.rfind(' '), lines))\n\tls = [[l, (w + 1) * amount - l.rfind(' ')] for l in lines]\n\tfor i, line in enumerate(ls):\n\t\tls[i][0] = line[0] + ' ' * line[1]\n\treturn '\\n'.join(map(lambda l: l[0], ls))", "id": "sample_175"}
{"input": "'some text', 'some'", "output": "'some text'", "code": "def operation_to_perform(text, to_place):\n\tafter_place = text[:text.find(to_place, 0) + 1]\n\tbefore_place = text[text.find(to_place, 0) + 1:]\n\treturn after_place + before_place", "id": "sample_176"}
{"input": "'Hey DUdE THis $nd^ &*&this@#'", "output": "'HEy Dude tHIs $Nd^ &*&tHiS@#'", "code": "def operation_to_perform(text):\n\ttext = list(text)\n\tfor i in range(len(text)):\n\t\tif i % 2 == 1:\n\t\t\ttext[i] = text[i].swapcase()\n\treturn ''.join(text)", "id": "sample_177"}
{"input": "[0, 0, 1, 2, 2, 2, 2], 4", "output": "[2, 2, 2]", "code": "def operation_to_perform(array, n):\n\treturn array[n:]", "id": "sample_178"}
{"input": "[7, 1, 2, 6, 0, 2]", "output": "[2, 0, 6, 2, 1, 7, 1, 2, 6, 0, 2]", "code": "def operation_to_perform(nums):\n\t# Pass in a copy to avoid modifying nums\n\tnums = nums[:]\n\tcount = len(nums)\n\tfor i in range(-count+1, 0):\n\t\tnums.insert(0, nums[i])\n\treturn nums", "id": "sample_179"}
{"input": "[-1, 5, 3, -2, -6, 8, 8]", "output": "[-1, -2, -6, 8, 8]", "code": "def operation_to_perform(nums):\n\ta = -1\n\tb = nums[1:]\n\twhile a <= b[0]:\n\t\tnums.remove(b[0])\n\t\ta = 0\n\t\tb = b[1:]\n\treturn nums", "id": "sample_180"}
{"input": "\"qwfasgahh329kn12a23\"", "output": "['3291223', 7]", "code": "def operation_to_perform(s):\n\tcount = 0\n\tdigits = \"\"\n\tfor c in s:\n\t\tif c.isdigit():\n\t\t\tcount += 1\n\t\t\tdigits += c\n\treturn [digits, count]", "id": "sample_181"}
{"input": "{'b': 1, 'a': 2}", "output": "[('a', 2), ('b', 1)]", "code": "def operation_to_perform(dic):\n\treturn sorted(dic.items(), key=lambda x: x[0])", "id": "sample_182"}
{"input": "\"echo hello!!! nice!\"", "output": "['echo']", "code": "def operation_to_perform(text):\n\tls = text.split()\n\tlines = \" \".join(ls[::3]).splitlines()\n\tres = []\n\tfor i in range(2):\n\t\tln = ls[1::3]\n\t\tif 3 * i + 1 < len(ln):\n\t\t\tres.append(\" \".join(ln[3 * i:3 * (i + 1)]))\n\treturn lines + res", "id": "sample_183"}
{"input": "[1,2]", "output": "[1, 2]", "code": "def operation_to_perform(digits):\n\tdigits.reverse()\n\tif len(digits) < 2:\n\t\treturn digits\n\tfor i in range(0, len(digits), 2):\n\t\tdigits[i], digits[i+1] = digits[i+1], digits[i]\n\treturn digits", "id": "sample_184"}
{"input": "[16, 14, 12, 7, 9, 11]", "output": "[11, 14, 7, 12, 9, 16]", "code": "def operation_to_perform(L):\n\tN = len(L)\n\tfor k in range(1, N//2 + 1):\n\t\ti = k - 1\n\t\tj = N - k\n\t\twhile i < j:\n\t\t\t# swap elements:\n\t\t\tL[i], L[j] = L[j], L[i]\n\t\t\t# update i, j:\n\t\t\ti += 1\n\t\t\tj -= 1\n\treturn L", "id": "sample_185"}
{"input": "'pvtso'", "output": "'pvtso'", "code": "def operation_to_perform(text):\n\treturn ' '.join(map(str.lstrip, text.split()))", "id": "sample_186"}
{"input": "{27:39}, 1", "output": "39", "code": "def operation_to_perform(d, index):\n\tlength = len(d.items())\n\tidx = index % length\n\tv = d.popitem()[1]\n\tfor _ in range(idx):\n\t\td.popitem()\n\treturn v", "id": "sample_187"}
{"input": "[\"a\", \"b\", \"car\", \"d\"]", "output": "['a']", "code": "def operation_to_perform(strings):\n\tnew_strings = []\n\tfor string in strings:\n\t\tfirst_two = string[:2]\n\t\tif first_two.startswith('a') or first_two.startswith('p'):\n\t\t\tnew_strings.append(first_two)\n\n\treturn new_strings", "id": "sample_188"}
{"input": "\"{{{{}}}}\", {}", "output": "'{{{{}}}}'", "code": "def operation_to_perform(out, mapping):\n\tfor key in mapping:\n\t\tout.format_map(mapping)\n\t\tif len(re.findall(r'{\\w}', out)) == 0:\n\t\t\tbreak\n\t\tmapping[key][1] = mapping[key][1][::-1]\n\treturn out", "id": "sample_189"}
{"input": "'980jio80jic kld094398IIl '", "output": "'jiojickldl'", "code": "def operation_to_perform(text):\n\tshort = ''\n\tfor c in text:\n\t\tif(c.islower()):\n\t\t\tshort += c\n\treturn short", "id": "sample_190"}
{"input": "'Ohno'", "output": "False", "code": "def operation_to_perform(string):\n\tif string.isupper():\n\t\treturn True\n\telse:\n\t\treturn False", "id": "sample_191"}
{"input": "'!klcd!ma:ri', '!'", "output": "'!klcd!ma:ri'", "code": "def operation_to_perform(text, suffix):\n\toutput = text\n\twhile text.endswith(suffix):\n\t\toutput = text[:-len(suffix)]\n\t\ttext = output\n\treturn output", "id": "sample_192"}
{"input": "'1::1'", "output": "'1:1'", "code": "def operation_to_perform(string):\n\tcount = string.count(':')\n\treturn string.replace(':', '', count - 1)", "id": "sample_193"}
{"input": "[[5, 6, 2, 3], [1, 9, 5, 6]], 0", "output": "[[], [5, 6, 2, 3], [1, 9, 5, 6]]", "code": "def operation_to_perform(matr, insert_loc):\n\tmatr.insert(insert_loc, [])\n\treturn matr", "id": "sample_194"}
{"input": "'ilfdoirwirmtoibsac'", "output": "'ilfdoirwirmtoibsac  '", "code": "def operation_to_perform(text):\n\tfor p in ['acs', 'asp', 'scn']:\n\t\ttext = text.removeprefix(p) + ' '\n\treturn text.removeprefix(' ')[:-1]", "id": "sample_195"}
{"input": "\"398 Is A Poor Year To Sow\"", "output": "'correct'", "code": "def operation_to_perform(text):\n\ttext = text.replace(' x', ' x.')\n\tif text.istitle(): return 'correct'\n\ttext = text.replace(' x.', ' x')\n\treturn 'mixed'", "id": "sample_196"}
{"input": "1, 1234567890", "output": "'1234567890 0'", "code": "def operation_to_perform(temp, timeLimit):\n\ts = timeLimit // temp\n\te = timeLimit % temp\n\treturn [f'{e} oC', f'{s} {e}'][s > 1]", "id": "sample_197"}
{"input": "'tcmfsmj', 'cfj'", "output": "'tcmfsm'", "code": "def operation_to_perform(text, strip_chars):\n\treturn text[::-1].strip(strip_chars)[::-1]", "id": "sample_198"}
{"input": "'mnmnj krupa...##!@#!@#$$@##', '@'", "output": "'mnmnj krupa...##!@#!@#$$@##'", "code": "def operation_to_perform(str, char):\n\tbase = char * (str.count(char) + 1)\n\treturn str.removesuffix(base)", "id": "sample_199"}
{"input": "'jao mt', 'house'", "output": "'tm oajhouse'", "code": "def operation_to_perform(text, value):\n\tlength = len(text)\n\tindex = 0\n\twhile length > 0:\n\t\tvalue = text[index] + value\n\t\tlength -= 1\n\t\tindex += 1\n\treturn value", "id": "sample_200"}
{"input": "'--4yrw 251-//4 6p'", "output": "'641524'", "code": "def operation_to_perform(text):\n\tchars = []\n\tfor c in text:\n\t\tif c.isdigit():\n\t\t\tchars.append(c)\n\treturn ''.join(chars[::-1])", "id": "sample_201"}
{"input": "[2, 15], [15, 1]", "output": "[15, 15]", "code": "def operation_to_perform(array, list):\n\tarray.extend(list)\n\t[e for e in array if e % 2 == 0]\n\treturn [e for e in array if e >= 10]", "id": "sample_202"}
{"input": "{'a': 3, 'b': -1, 'c': 'Dum'}", "output": "{}", "code": "def operation_to_perform(d):\n\td.clear()\n\treturn d", "id": "sample_203"}
{"input": "\"master. \"", "output": "['m', 'a']", "code": "def operation_to_perform(name):\n\treturn [name[0], name[1][::-1][0]]", "id": "sample_204"}
{"input": "\"##fiu##nk#he###wumun##\"", "output": "'fiu##nk#he###wumun'", "code": "def operation_to_perform(a):\n\tfor _ in range(10):\n\t\tfor j in range(len(a)):\n\t\t\tif a[j] != '#':\n\t\t\t\ta = a[j:]\n\t\t\t\tbreak\n\t\telse:\n\t\t\ta = \"\"\n\t\t\tbreak\n\twhile a[-1] == '#':\n\t\ta = a[:-1]\n\treturn a", "id": "sample_205"}
{"input": "' h e l l o   w o r l d! '", "output": "'h e l l o w o r l d!'", "code": "def operation_to_perform(a):\n\treturn ' '.join(a.split())", "id": "sample_206"}
{"input": "[{\"brown\": 2}, {\"blue\": 5}, {\"bright\": 4}]", "output": "{'brown': 2, 'blue': 5, 'bright': 4}", "code": "def operation_to_perform(commands):\n\td = {}\n\tfor c in commands:\n\t\td.update(c)\n\treturn d", "id": "sample_207"}
{"input": "['123', 'cat', 'd dee']", "output": "['c', 'a', 't', 'd', ' ', 'd', 'e', 'e']", "code": "def operation_to_perform(items):\n\tresult = []\n\tfor item in items:\n\t\tfor d in item:\n\t\t\tif not d.isdigit():\n\t\t\t\tresult.append(d)\n\treturn result", "id": "sample_208"}
{"input": "'hymi', 'hymifulhxhzpnyihyf'", "output": "'hymi'", "code": "def operation_to_perform(prefix, s):\n\treturn str.removeprefix(prefix, s)", "id": "sample_209"}
{"input": "46, 48, 21", "output": "46", "code": "def operation_to_perform(n, m, num):\n\tx_list = list(range(n, m+1))\n\tj = 0\n\twhile True:\n\t\tj = (j + num) % len(x_list)\n\t\tif x_list[j] % 2 == 0:\n\t\t\treturn x_list[j]", "id": "sample_210"}
{"input": "\"abca dea ead\"", "output": "10", "code": "def operation_to_perform(s):\n\tcount = 0\n\tfor c in s:\n\t\tif s.rindex(c) != s.index(c):\n\t\t\tcount+=1\n\treturn count", "id": "sample_211"}
{"input": "[1, -9, 7, 2, 6, -3, 3]", "output": "[1, -9, 7, 2, 6, -3, 3]", "code": "def operation_to_perform(nums):\n\tfor _ in range(len(nums) - 1):\n\t\tnums.reverse()\n\treturn nums", "id": "sample_212"}
{"input": "\"(ac)\"", "output": "'[ac]'", "code": "def operation_to_perform(s):\n\treturn s.replace('(', '[').replace(')', ']')", "id": "sample_213"}
{"input": "'present/here/car%2Fwe'", "output": "7", "code": "def operation_to_perform(sample):\n\ti = -1\n\twhile sample.find('/', i+1) != -1:\n\t\ti = sample.find('/', i+1)\n\treturn sample.rindex('/', 0, i)", "id": "sample_214"}
{"input": "')'", "output": "')'", "code": "def operation_to_perform(text):\n\tnew_text = text\n\twhile len(text) > 1 and text[0] == text[-1]:\n\t\tnew_text = text = text[1:-1]\n\treturn new_text", "id": "sample_215"}
{"input": "\"dp ef1 gh2\"", "output": "2", "code": "def operation_to_perform(letters):\n\tcount = 0\n\tfor l in letters:\n\t\tif l.isdigit():\n\t\t\tcount += 1\n\treturn count", "id": "sample_216"}
{"input": "'Str zahrnuje anglo-ameri\u00e6ske vasi piscina and kuca!'", "output": "'more than ASCII'", "code": "def operation_to_perform(string):\n\tif string.isalnum():\n\t\treturn \"ascii encoded is allowed for this language\"\n\treturn \"more than ASCII\"", "id": "sample_217"}
{"input": "'caabcfcabfc', 'ab'", "output": "'bacfbacfcbaacbacfbacfcbaac'", "code": "def operation_to_perform(string, sep):\n\tcnt = string.count(sep)\n\treturn((string+sep) * cnt)[::-1]", "id": "sample_218"}
{"input": "\"Hello\", \")\"", "output": "False", "code": "def operation_to_perform(s1, s2):\n\tfor k in range(0, len(s2)+len(s1)):\n\t\ts1 += s1[0]\n\t\tif s1.find(s2) >= 0:\n\t\t\treturn True\n\treturn False", "id": "sample_219"}
{"input": "\"abcdefgabc\", 1, 2", "output": "'bagfedcacbagfedc'", "code": "def operation_to_perform(text, m, n):\n\ttext = \"{}{}{}\".format(text, text[:m], text[n:])\n\tresult = \"\"\n\tfor i in range(n, len(text)-m):\n\t\tresult = text[i] + result\n\treturn result", "id": "sample_220"}
{"input": "'bpxa24fc5.', '.'", "output": "'.bpxa24fc5'", "code": "def operation_to_perform(text, delim):\n\tfirst, second = text.split(delim)\n\treturn second + delim + first", "id": "sample_221"}
{"input": "'0aabbaa0b', 'a'", "output": "'0aabbaa0b'", "code": "def operation_to_perform(mess, char):\n\twhile mess.find(char, mess.rindex(char) + 1) != -1:\n\t\tmess = mess[:mess.rindex(char) + 1] + mess[mess.rindex(char) + 2:]\n\treturn mess", "id": "sample_222"}
{"input": "[1, 2, -1, 4], 2", "output": "1", "code": "def operation_to_perform(array, target):\n\tcount, i = 0, 1\n\tfor j in range(1, len(array)):\n\t\tif ((array[j] > array[j-1]) and (array[j] <= target)): count += i\n\t\telif array[j] <= array[j-1]: i = 1\n\t\telse: i += 1\n\treturn count", "id": "sample_223"}
{"input": "['23'], 123", "output": "{}", "code": "def operation_to_perform(array, value):\n\tarray.reverse()\n\tarray.pop()\n\todd = []\n\twhile len(array) > 0:\n\t\ttmp = {}\n\t\ttmp[array.pop()] = value\n\t\todd.append(tmp)\n\tresult = {}\n\twhile len(odd) > 0:\n\t\tresult.update(odd.pop())\n\treturn result", "id": "sample_224"}
{"input": "\"54882\"", "output": "False", "code": "def operation_to_perform(text):\n\tif text.islower():\n\t\treturn True\n\treturn False", "id": "sample_225"}
{"input": "[1, 3]", "output": "[1, 3, 3]", "code": "def operation_to_perform(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[i] % 3 == 0:\n\t\t\tnums.append(nums[i])\n\treturn nums", "id": "sample_226"}
{"input": "'Manolo'", "output": "'Manolo'", "code": "def operation_to_perform(text):\n\ttext = text.lower()\n\thead, tail = text[0], text[1:]\n\treturn head.upper() + tail", "id": "sample_227"}
{"input": "'LlTHH sAfLAPkPhtsWP', '#'", "output": "'llthh#saflapkphtswp'", "code": "def operation_to_perform(text, splitter):\n\treturn splitter.join(text.lower().split())", "id": "sample_228"}
{"input": "{'9m':2, 'mA':1, '10K':2, 'Lk':2}, 1", "output": "['9', 'm', 'm', 'A', '1', '0', 'L', 'k']", "code": "def operation_to_perform(dic, value):\n\tresult = []\n\tfor e in dic:\n\t\tresult.append(e[0])\n\t\tif e[1] == value:\n\t\t\tresult.reverse()\n\t\telse:\n\t\t\tresult.append(e[1])\n\treturn result", "id": "sample_229"}
{"input": "'102x0zoq'", "output": "'qozx'", "code": "def operation_to_perform(text):\n\tresult = ''\n\ti = len(text)-1\n\twhile i >= 0:\n\t\tc = text[i]\n\t\tif c.isalpha():\n\t\t\tresult += c\n\t\ti -= 1\n\treturn result", "id": "sample_230"}
{"input": "[1872, 1995, 1945]", "output": "2", "code": "def operation_to_perform(years):\n\ta10 = sum(1 for x in years if x <= 1900)\n\ta90 = sum(1 for x in years if x > 1910)\n\tif a10 > 3:\n\t\treturn 3\n\telif a90 > 3:\n\t\treturn 1\n\telse:\n\t\treturn 2", "id": "sample_231"}
{"input": "'fssnvd', 'yes'", "output": "'yesyes'", "code": "def operation_to_perform(text, changes):\n\tresult = ''\n\tcount = 0\n\tchanges = list(changes)\n\tfor char in text:\n\t\tresult += char if char in 'e' else changes[count % len(changes)]\n\t\tcount += (1 if char not in 'e' else 0)\n\treturn result", "id": "sample_232"}
{"input": "[1, 2, 3]", "output": "[1, 2, 3]", "code": "def operation_to_perform(xs):\n\tfor idx in reversed(range(-len(xs)-1, -1)):\n\t\txs.insert(idx, xs.pop(0))\n\treturn xs", "id": "sample_233"}
{"input": "'wduhzxlfk', 'w'", "output": "0", "code": "def operation_to_perform(text, char):\n\tposition = len(text)\n\tif char in text:\n\t\tposition = text.index(char)\n\t\tif position > 1:\n\t\t\tposition = (position + 1) % len(text)\n\treturn position", "id": "sample_234"}
{"input": "[], []", "output": "[]", "code": "def operation_to_perform(array, arr):\n\tresult = []\n\tfor s in arr:\n\t\tresult += list(filter(lambda l: l != '', s.split(arr[array.index(s)])))\n\treturn result", "id": "sample_235"}
{"input": "['ac8', 'qk6', '9wg']", "output": "'ac8qk6qk6'", "code": "def operation_to_perform(array):\n\tif len(array) == 1:\n\t\treturn ''.join(array)\n\tresult = list(array)\n\ti = 0\n\twhile i < len(array)-1:\n\t\tfor j in range(2):\n\t\t\tresult[i*2] = array[i]\n\t\t\ti += 1\n\treturn ''.join(result)", "id": "sample_236"}
{"input": "'uzlwaqiaj', 'u'", "output": "'uuzlwaqiaj'", "code": "def operation_to_perform(text, char):\n\tif char in text:\n\t\tsuff, char, pref = text.partition(char)\n\t\tpref = suff[:-len(char)] + suff[len(char):] + char + pref\n\t\treturn suff + char + pref\n\treturn text", "id": "sample_237"}
{"input": "[[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1", "output": "[1, 9, 4]", "code": "def operation_to_perform(ls, n):\n\tanswer = 0\n\tfor i in ls:\n\t\tif i[0] == n:\n\t\t\tanswer = i\n\treturn answer", "id": "sample_238"}
{"input": "'0 t 1cos ', 'st ' + '0\\t\\n  '", "output": "'1co'", "code": "def operation_to_perform(text, froms):\n\ttext = text.lstrip(froms)\n\ttext = text.rstrip(froms)\n\treturn text", "id": "sample_239"}
{"input": "3.121", "output": "'3.121'", "code": "def operation_to_perform(float_number):\n\tnumber = str(float_number)\n\tdot = number.find('.')\n\tif dot != -1:\n\t\treturn number[:dot] + '.' + number[dot+1:].ljust(2, '0')\n\treturn number + '.00'", "id": "sample_240"}
{"input": "'ED20 CW'", "output": "'CW'", "code": "def operation_to_perform(postcode):\n\treturn postcode[postcode.index('C'):]", "id": "sample_241"}
{"input": "\"udhv zcvi nhtnfyd :erwuyawa pun\"", "output": "'udhv zcvi nhtnfyd :erwuyawa pun'", "code": "def operation_to_perform(book):\n\ta = book.rsplit(':', 1)\n\tif a[0].split(' ')[-1] == a[1].split(' ')[0]:\n\t\treturn operation_to_perform(' '.join(a[0].split(' ')[:-1]) + ' ' + a[1])\n\treturn book", "id": "sample_242"}
{"input": "'abc', 'e'", "output": "True", "code": "def operation_to_perform(text, char):\n\treturn char.islower() and text.islower()", "id": "sample_243"}
{"input": "'', 'BC1ty'", "output": "'        '", "code": "def operation_to_perform(text, symbols):\n\tcount = 0\n\tif symbols:\n\t\tfor i in symbols:\n\t\t\tcount += 1\n\t\ttext = text * count\n\treturn text.rjust(len(text) + count*2)[:-2]", "id": "sample_244"}
{"input": "'abcdefghijklmnopqrstuvwxyz', \"uppercased # % ^ @ ! vz.\"", "output": "[]", "code": "def operation_to_perform(alphabet, s):\n\ta = [x for x in alphabet if x.upper() in s]\n\tif s.upper() == s:\n\t\ta.append('all_uppercased')\n\treturn a", "id": "sample_245"}
{"input": "\"345gerghjehg\", \"345\"", "output": "-1", "code": "def operation_to_perform(haystack, needle):\n\tfor i in range(haystack.find(needle), -1, -1):\n\t\tif haystack[i:] == needle:\n\t\t\treturn i\n\treturn -1", "id": "sample_246"}
{"input": "'Boolean'", "output": "'yes'", "code": "def operation_to_perform(s):\n\tif s.isalpha():\n\t\treturn \"yes\"\n\tif s == \"\":\n\t\treturn \"str is empty\"\n\treturn \"no\"", "id": "sample_247"}
{"input": "[666], []", "output": "[666]", "code": "def operation_to_perform(a, b):\n\ta.sort()\n\tb.sort(reverse=True)\n\treturn a + b", "id": "sample_248"}
{"input": "\"FSA\"", "output": "{'f': 1, 's': 1, 'a': 1}", "code": "def operation_to_perform(s):\n\tcount = {}\n\tfor i in s:\n\t\tif i.islower():\n\t\t\tcount[i.lower()] = s.count(i.lower()) + count.get(i.lower(), 0)\n\t\telse:\n\t\t\tcount[i.lower()] = s.count(i.upper()) + count.get(i.lower(), 0)\n\treturn count", "id": "sample_249"}
{"input": "'wlace A'", "output": "'wlace Alc l  '", "code": "def operation_to_perform(text):\n\tcount = len(text)\n\tfor i in range(-count+1, 0):\n\t\ttext = text + text[i]\n\treturn text", "id": "sample_250"}
{"input": "[['Marie','Nelson','Oscar']]", "output": "'Marie;Nelson;Oscar;+;3;5;3'", "code": "def operation_to_perform(messages):\n\tphone_code = \"+353\"\n\tresult = []\n\tfor message in messages:\n\t\tmessage.extend(phone_code)\n\t\tresult.append(\";\".join(message))\n\treturn \". \".join(result)", "id": "sample_251"}
{"input": "'\\\\foo', '\\\\'", "output": "'\\\\foo'", "code": "def operation_to_perform(text, char):\n\tif char in text:\n\t\tif not text.startswith(char):\n\t\t\ttext = text.replace(char,'')\n\treturn text", "id": "sample_252"}
{"input": "'kumwwfv', 'k'", "output": "'umwwfv'", "code": "def operation_to_perform(text, pref):\n\tlength = len(pref)\n\tif pref == text[:length]:\n\t\treturn text[length:]\n\treturn text", "id": "sample_253"}
{"input": "'upper case', 'lower case'", "output": "'lwwer case'", "code": "def operation_to_perform(text, repl):\n\ttrans = str.maketrans(text.lower(), repl.lower())\n\treturn text.translate(trans)", "id": "sample_254"}
{"input": "'no asw', 'j', 1", "output": "'w'", "code": "def operation_to_perform(text, fill, size):\n\tif size < 0:\n\t\tsize = -size\n\tif len(text) > size:\n\t\treturn text[len(text) - size:]\n\treturn text.rjust(size, fill)", "id": "sample_255"}
{"input": "'dorfunctions', '2'", "output": "0", "code": "def operation_to_perform(text, sub):\n\ta = 0\n\tb = len(text) - 1\n\n\twhile a <= b:\n\t\tc = (a + b) // 2\n\t\tif text.rfind(sub) >= c:\n\t\t\ta = c + 1\n\t\telse:\n\t\t\tb = c - 1\n\n\treturn a", "id": "sample_256"}
{"input": "['Hello World\\n\"I am String\"']", "output": "[['Hello World', '\"I am String\"']]", "code": "def operation_to_perform(text):\n\tls = []\n\tfor x in text:\n\t\tls.append(x.splitlines())\n\treturn ls", "id": "sample_257"}
{"input": "thigh_o_two[:], 3, 3, 2", "output": "[1, 2, 7, 3, 9]", "code": "thigh_o_one = [1, 2, 7, 8, 9]\nthigh_o_two = [1, 2, 7, 9]\ndef operation_to_perform(L, m, start, step):\n\tL.insert(start, m)\n\tfor x in range(start-1, 0, -step):\n\t\tstart -= 1\n\t\tL.insert(start, L.pop(L.index(m)-1))\n\treturn L", "id": "sample_258"}
{"input": "'String matching is a big part of RexEx library.'", "output": "'RES'", "code": "def operation_to_perform(text):\n\tnew_text = []\n\tfor character in text:\n\t\tif character.isupper():\n\t\t\tnew_text.insert(len(new_text) // 2, character)\n\tif len(new_text) == 0:\n\t\tnew_text = ['-']\n\treturn ''.join(new_text)", "id": "sample_259"}
{"input": "[1, 2, 3, 4, 5, 6], 4, 2", "output": "[1, 2, 3, 4, 6, 5]", "code": "def operation_to_perform(nums, start, k):\n\tnums[start:start+k] = nums[start:start + k][::-1]\n\treturn nums", "id": "sample_260"}
{"input": "[12, 516, 5, 2, 3, 214, 51], 5", "output": "([], [12, 516, 5, 214, 51])", "code": "def operation_to_perform(nums, target):\n\tlows, higgs = [], []\n\tfor i in nums:\n\t\tif i < target:\n\t\t\tlows.append(i)\n\t\telse:\n\t\t\thiggs.append(i)\n\tlows.clear()\n\treturn lows, higgs", "id": "sample_261"}
{"input": "[4, 5]", "output": "'BA'", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\tscore = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"}\n\tresult = []\n\tfor i in range(count):\n\t\tresult.append(score.get(nums[i]))\n\treturn ''.join(result)", "id": "sample_262"}
{"input": "[\"gloss\", \"banana\", \"barn\", \"lawn\"], []", "output": "['gloss', 'banana', 'barn', 'lawn']", "code": "def operation_to_perform(base, delta):\n\tfor j in range(len(delta)):\n\t\tfor i in range(len(base)):\n\t\t\tif base[i] == delta[j][0]:\n\t\t\t\tassert delta[j][1] != base[i]\n\t\t\t\tbase[i] = delta[j][1]\n\treturn base", "id": "sample_263"}
{"input": "\"papera\"", "output": "'pApArA'", "code": "def operation_to_perform(test_str):\n\ts = test_str.replace('a', 'A')\n\treturn s.replace('e', 'A')", "id": "sample_264"}
{"input": "{1: 2, 2: 4, 3: 3}, 3", "output": "{1: 2, 2: 4}", "code": "def operation_to_perform(d, k):\n\tnew_d = {}\n\tfor key, val in d.items():\n\t\tif key < k:\n\t\t\tnew_d[key] = val\n\treturn new_d", "id": "sample_265"}
{"input": "[2, 3, 4, 6, -2]", "output": "[2, 3, 3, 4, 6, -2]", "code": "def operation_to_perform(nums):\n\tfor i in range(len(nums)-1, -1, -1):\n\t\tif nums[i] % 2 == 1:\n\t\t\tnums.insert(i+1, nums[i])\n\treturn nums", "id": "sample_266"}
{"input": "'sowpf', -7", "output": "'sowpf'", "code": "def operation_to_perform(text, space):\n\tif space < 0:\n\t\treturn text\n\treturn text.ljust(len(text) // 2 + space)", "id": "sample_267"}
{"input": "'h grateful k', ' '", "output": "'h / g r a t e f u l   k'", "code": "def operation_to_perform(s, separator):\n\tfor i in range(len(s)):\n\t\tif s[i] == separator:\n\t\t\tnew_s = list(s)\n\t\t\tnew_s[i] = '/'\n\t\t\treturn ' '.join(new_s)", "id": "sample_268"}
{"input": "[9, 2]", "output": "['0', 2]", "code": "def operation_to_perform(array):\n\tzero_len = (len(array) - 1) % 3\n\tfor i in range(zero_len):\n\t\tarray[i] = '0'\n\tfor i in range(zero_len + 1, len(array), 3):\n\t\tarray[i - 1:i + 2] = ['0', '0', '0']\n\treturn array", "id": "sample_269"}
{"input": "{}", "output": "{}", "code": "def operation_to_perform(dic):\n\td = {}\n\tfor key in dic:\n\t\td[key] = dic.popitem(last = False)[1]\n\treturn d", "id": "sample_270"}
{"input": "'uufhl', 'l'", "output": "'uufh'", "code": "def operation_to_perform(text, c):\n\tls = list(text)\n\tif c not in text:\n\t\traise ValueError('Text has no {c}')\n\tls.pop(text.rindex(c))\n\treturn ''.join(ls)", "id": "sample_271"}
{"input": "[9, 7, 5, 3, 1], [2, 4, 6, 8, 0]", "output": "[9, 7, 5, 3, 1, 2, 4, 6, 8, 0, 2, 6, 0, 6, 6]", "code": "def operation_to_perform(base_list, nums):\n\tbase_list.extend(nums)\n\tres = base_list.copy()\n\tfor i in range(-len(nums), 0):\n\t\tres.append(res[i])\n\treturn res", "id": "sample_272"}
{"input": "'.NET'", "output": "'NET'", "code": "def operation_to_perform(name):\n\tnew_name =''\n\tname = name[::-1]\n\tfor i in range(len(name)):\n\t\tn = name[i]\n\t\tif n !='.' and  new_name.count('.')<2:\n\t\t\tnew_name=n+new_name\n\t\telse:\n\t\t\tbreak\n\treturn new_name", "id": "sample_273"}
{"input": "[1, 2, 3], 4", "output": "3", "code": "def operation_to_perform(nums, target):\n\tcount = 0\n\tfor n1 in nums:\n\t\tfor n2 in nums:\n\t\t\tcount += (n1+n2==target)\n\treturn count", "id": "sample_274"}
{"input": "{-1: \"a\", 0: \"b\", 1: \"c\"}", "output": "{'a': -1, 'b': 0, 'c': 1}", "code": "def operation_to_perform(dic):\n\tdic2 = dict(zip(dic.values(), dic.keys()))\n\treturn dic2", "id": "sample_275"}
{"input": "[]", "output": "[0]", "code": "def operation_to_perform(a):\n\tif len(a) >= 2 and a[0] > 0 and a[1] > 0:\n\t\ta.reverse()\n\t\treturn a\n\ta.append(0)\n\treturn a", "id": "sample_276"}
{"input": "[1, 2, 3, 4], 1", "output": "[4, 3, 2, 1]", "code": "def operation_to_perform(lst, mode):\n\tresult = [el for el in lst]\n\tif mode:\n\t\tresult.reverse()\n\treturn result", "id": "sample_277"}
{"input": "[0, 132], [5, 991, 32, 997]", "output": "{0: [], 132: [5, 32]}", "code": "def operation_to_perform(array1, array2):\n\tresult = dict.fromkeys(array1)\n\tfor key in result:\n\t\tresult[key] = [el for el in array2 if key * 2 > el]\n\treturn result", "id": "sample_278"}
{"input": "\"\"", "output": "''", "code": "def operation_to_perform(text):\n\tans = ''\n\twhile text != '':\n\t\tx, sep, text = text.partition('(')\n\t\tans = x + sep.replace('(', '|') + ans\n\t\tans = ans + text[0] + ans\n\t\ttext = text[1:]\n\treturn ans", "id": "sample_279"}
{"input": "'00000000 00000000 01101100 01100101 01101110'", "output": "'00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0'", "code": "field = 0\n\ndef operation_to_perform(text):\n\tglobal g, field\n\tfield = text.replace(' ', '')\n\tg = text.replace('0', ' ')\n\ttext = text.replace('1', 'i')\n\n\treturn text", "id": "sample_280"}
{"input": "{1: 2, 3: 4, 5: 6, 'message': 'qrTHo'}, 8, 2", "output": "{1: 2, 3: 4, 5: 6, 8: 2}", "code": "def operation_to_perform(c, index, value):\n\tc[index] = value\n\tif value >= 3:\n\t\tc.update({'message' : 'xcrWt'})\n\telse: \n\t\tdel c['message']\n\treturn c", "id": "sample_281"}
{"input": "'xinyyexyxx', 'xx'", "output": "2", "code": "def operation_to_perform(s1, s2):\n\tposition = 1\n\tcount = 0\n\twhile position > 0:\n\t\tposition = s1.find(s2, position)\n\t\tcount += 1\n\t\tposition += 1\n\treturn count", "id": "sample_282"}
{"input": "{'Iron Man': 4, 'Captain America': 3, 'Black Panther': 0,'Thor': 1, 'Ant-Man': 6}, 'Iron Man'", "output": "'Iron Man'", "code": "def operation_to_perform(dictionary, key):\n\tdel dictionary[key]\n\tif min(dictionary) == key:\n\t\tkey = list(dictionary)[0]\n\treturn key", "id": "sample_283"}
{"input": "'bestest', 'bestest'", "output": "''", "code": "def operation_to_perform(text, prefix):\n\tidx = 0\n\tfor letter in prefix:\n\t\tif text[idx] != letter:\n\t\t\treturn None\n\t\tidx += 1\n\treturn text[idx:]", "id": "sample_284"}
{"input": "\"This be Pirate's Speak for 'help'!\", ' '", "output": "5", "code": "def operation_to_perform(text, ch):\n\t\"\"\"Counting vowels in Pirates' Curse\"\"\"\n\treturn text.count(ch)", "id": "sample_285"}
{"input": "[1,2,3,4,5,6,7,8,9,10], 11, 4", "output": "[1, 2, 3, 4, 11, 6, 7, 8, 9, 10]", "code": "def operation_to_perform(array, x, i):\n\tif i < -len(array) or i > len(array) - 1:\n\t\treturn 'no'\n\ttemp = array[i]\n\tarray[i] = x\n\treturn array", "id": "sample_286"}
{"input": "'Pinneaple'", "output": "'pinneaple'", "code": "def operation_to_perform(name):\n\tif name.islower():\n\t\tname = name.upper()\n\telse:\n\t\tname = name.lower()\n\treturn name", "id": "sample_287"}
{"input": "{55: 4, 4: 555, 1: 3, 99: 21, 499: 4, 71: 7, 12: 6}", "output": "[(1, 3), (4, 555)]", "code": "def operation_to_perform(d):\n\tsorted_pairs = sorted(list(d.items()), key=lambda x: len(str(str(x[0])+str(x[1]))))\n\treturn [(k, v) for k, v in sorted_pairs if k < v]\n\treturn ret", "id": "sample_288"}
{"input": "'148'", "output": "\"148: b'148'\"", "code": "def operation_to_perform(code):\n\treturn \"{}: {}\".format(code, code.encode())", "id": "sample_289"}
{"input": "'abixaaaily', 'al'", "output": "'ABIXAAAILY'", "code": "def operation_to_perform(text, prefix):\n\tif text.startswith(prefix):\n\t\treturn text.removeprefix(prefix)\n\tif prefix in text:\n\t\treturn text.replace(prefix, '').strip()\n\treturn text.upper()", "id": "sample_290"}
{"input": "{}, ['a', 2]", "output": "{'a': [2]}", "code": "def operation_to_perform(dictionary, arr):\n\tdictionary.update({arr[0]: [arr[1]]})\n\tif len(dictionary[arr[0]]) == arr[1]:\n\t\tdictionary[arr[0]] = arr[0]\n\treturn dictionary", "id": "sample_291"}
{"input": "'5f83u23saa'", "output": "'5*83*23***'", "code": "def operation_to_perform(text):\n\tnew_text = [c if c.isdigit() else '*' for c in text]\n\treturn ''.join(new_text)", "id": "sample_292"}
{"input": "'dEXE'", "output": "'no'", "code": "def operation_to_perform(text):\n\ts = text.lower()\n\tfor i in range(len(s)):\n\t\tif s[i] == 'x':\n\t\t\treturn 'no'\n\treturn text.isupper()", "id": "sample_293"}
{"input": "\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"", "output": "'2$z&5H3*1a@#a*1hris'", "code": "def operation_to_perform(n, m, text):\n\tif text.strip() == '':\n\t\treturn text\n\thead, mid, tail = text[0], text[1:-1], text[-1]\n\tjoined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\n\treturn joined", "id": "sample_294"}
{"input": "['apple', 'apple', 'pear', 'banana', 'pear', 'orange', 'orange']", "output": "['pear', 'banana', 'pear']", "code": "def operation_to_perform(fruits):\n\tif fruits[-1] == fruits[0]:\n\t\treturn 'no'\n\telse:\n\t\tfruits.pop(0)\n\t\tfruits.pop()\n\t\tfruits.pop(0)\n\t\tfruits.pop()\n\t\treturn fruits", "id": "sample_295"}
{"input": "\"https://www.www.ekapusta.com/image/url\"", "output": "'https://www.www.ekapusta.com/image/url'", "code": "def operation_to_perform(url):\n\treturn url.removeprefix('http://www.')", "id": "sample_296"}
{"input": "6173", "output": "'Not found'", "code": "def operation_to_perform(num):\n\tif 0 < num < 1000 and num != 6174:\n\t\treturn 'Half Life'\n\treturn 'Not found'", "id": "sample_297"}
{"input": "'dst vavf n dmv dfvm gamcu dgcvb.'", "output": "'DST VAVF N DMV DFVM GAMCU DGCVB.'", "code": "def operation_to_perform(text):\n\tnew_text = list(text)\n\tfor i in range(len(new_text)):\n\t\tcharacter = new_text[i]\n\t\tnew_character = character.swapcase()\n\t\tnew_text[i] = new_character\n\treturn ''.join(new_text)", "id": "sample_298"}
{"input": "'staovk', 'k'", "output": "'staovk'", "code": "def operation_to_perform(text, char):\n\tif not text.endswith(char):\n\t\treturn operation_to_perform(char + text, char)\n\treturn text", "id": "sample_299"}
{"input": "[1, 2, 3]", "output": "[1, 2, 3]", "code": "def operation_to_perform(nums):\n\tcount = 1\n\tfor i in range(count, len(nums) - 1, 2):\n\t\tnums[i] = max(nums[i], nums[count-1])\n\t\tcount += 1\n\treturn nums", "id": "sample_300"}
{"input": "[0, 6, 2, -1, -2]", "output": "[0, 6, 2, -1, -2, 6, 6, -2, -2, -2, -2, -2, -2]", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\tfor i in range(-count+1, 0):\n\t\tnums.extend([nums[i], nums[i]])\n\treturn nums", "id": "sample_301"}
{"input": "'wdeejjjzsjsjjsxjjneddaddddddefsfd'", "output": "'wdeejjjzsjsjjsxjjneddaddddddefsfd'", "code": "def operation_to_perform(string):\n\treturn string.replace('needles', 'haystacks')", "id": "sample_302"}
{"input": "'mJkLbn'", "output": "'mJklbn'", "code": "def operation_to_perform(text):\n\ti = (len(text) + 1) // 2\n\tresult = list(text)\n\twhile i < len(text):\n\t\tt = result[i].lower()\n\t\tif t == result[i]:\n\t\t\ti += 1\n\t\telse:\n\t\t\tresult[i] = t\n\t\ti += 2\n\treturn ''.join(result)", "id": "sample_303"}
{"input": "{2: 3, 17: 3, 16: 6, 18: 6, 87: 7}", "output": "{87: 7, 18: 6}", "code": "def operation_to_perform(d):\n\tkey1 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\n\tval1 = d.pop(key1)\n\tkey2 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\n\tval2 = d.pop(key2)\n\treturn dict({key1: val1, key2: val2})", "id": "sample_304"}
{"input": "'o horseto', 'r'", "output": "'o hoseto'", "code": "def operation_to_perform(text, char):\n\tlength = len(text)\n\tindex = -1\n\tfor i in range(length):\n\t\tif text[i] == char:\n\t\t\tindex = i\n\tif index == -1:\n\t\tindex = length // 2\n\tnew_text = list(text)\n\tnew_text.pop(index)\n\treturn ''.join(new_text)", "id": "sample_305"}
{"input": "[0, 6, '1', '2', 0]", "output": "[0, 6, 1, 2, 0]", "code": "def operation_to_perform(nums):\n\tdigits = []\n\tfor num in nums:\n\t\tif (isinstance(num, str) and num.isnumeric()) or isinstance(num, int):\n\t\t\tdigits.append(num)\n\tdigits = list(map(int, digits))\n\treturn digits", "id": "sample_306"}
{"input": "'pxcznyf'", "output": "'px|||||cznyf'", "code": "def operation_to_perform(text):\n\trtext = list(text)\n\tfor i in range(1, len(rtext) - 1):\n\t\trtext.insert(i + 1, '|')\n\treturn ''.join(rtext)", "id": "sample_307"}
{"input": "[\"La\", \"Q\", \"9\", \"La\", \"La\"]", "output": "{'La': 3, 'Q': 1, '9': 1}", "code": "def operation_to_perform(strings):\n\toccurances = {}\n\tfor string in strings:\n\t\tif string not in occurances:\n\t\t\toccurances[string] = strings.count(string)\n\treturn occurances", "id": "sample_308"}
{"input": "'faqo osax f', 'f'", "output": "'faqo osax '", "code": "def operation_to_perform(text, suffix):\n\ttext += suffix\n\twhile text[-len(suffix):] == suffix:\n\t\ttext = text[:-1]\n\treturn text", "id": "sample_309"}
{"input": "['__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6']", "output": "'__1.00r__j_a6__6'", "code": "def operation_to_perform(strands):\n\tsubs = strands\n\tfor i, j in enumerate(subs):\n\t\tfor _ in range(len(j) // 2):\n\t\t\tsubs[i] = subs[i][-1:] + subs[i][1:-1] + subs[i][0]\n\treturn ''.join(subs)", "id": "sample_310"}
{"input": "'A'", "output": "'no'", "code": "def operation_to_perform(text):\n\ttext = text.replace('#', '1').replace('$', '5')\n\treturn 'yes' if text.isnumeric() else 'no'", "id": "sample_311"}
{"input": "'777'", "output": "'True'", "code": "def operation_to_perform(str):\n\tif str.isalnum():\n\t\treturn \"True\"\n\treturn \"False\"", "id": "sample_312"}
{"input": "'urecord', 8", "output": "'urecord'", "code": "def operation_to_perform(s, l):\n\treturn s.ljust(l, '=').rpartition('=')[0]", "id": "sample_313"}
{"input": "'244, 105, -90'", "output": "' 105, -90 244'", "code": "def operation_to_perform(text):\n\tif ',' in text:\n\t\tbefore, _, after = text.partition(',')\n\t\treturn after + ' ' + before\n\treturn ',' + text.partition(' ')[-1] + ' 0'", "id": "sample_314"}
{"input": "'czywZ'", "output": "'czywz'", "code": "def operation_to_perform(challenge):\n\treturn challenge.casefold().replace('l', ',')", "id": "sample_315"}
{"input": "'i am your father'", "output": "'| i am your father |'", "code": "def operation_to_perform(name):\n\treturn '| ' + ' '.join(name.split(' ')) + ' |'", "id": "sample_316"}
{"input": "' vup a zwwo oihee amuwuuw! ', 'a', 'u'", "output": "' vap a zwwo oihee amawaaw! '", "code": "def operation_to_perform(text, a, b):\n\ttext = text.replace(a, b)\n\treturn text.replace(b, a)", "id": "sample_317"}
{"input": "'234rtccde', 'e'", "output": "1", "code": "def operation_to_perform(value, char):\n\ttotal = 0\n\tfor c in value:\n\t\tif c == char or c == char.lower():\n\t\t\ttotal += 1\n\treturn total", "id": "sample_318"}
{"input": "'a', 'xxxaaxaaxx'", "output": "4", "code": "def operation_to_perform(needle, haystack):\n\tcount = 0\n\twhile needle in haystack:\n\t\thaystack = haystack.replace(needle, '', 1)\n\t\tcount += 1\n\treturn count", "id": "sample_319"}
{"input": "'USaR'", "output": "'usAr'", "code": "def operation_to_perform(text):\n\tindex = 1\n\twhile index < len(text):\n\t\tif text[index] != text[index - 1]:\n\t\t\tindex += 1\n\t\telse:\n\t\t\ttext1 = text[:index]\n\t\t\ttext2 = text[index:].swapcase()\n\t\t\treturn text1 + text2\n\treturn text.swapcase()", "id": "sample_320"}
{"input": "{}, {'desciduous': 2}", "output": "{'desciduous': 2}", "code": "def operation_to_perform(update, starting):\n\td = starting.copy()\n\tfor k in update:\n\t\tif k in d:\n\t\t\td[k] += update[k]\n\t\telse:\n\t\t\td[k] = update[k]\n\treturn d", "id": "sample_321"}
{"input": "['lsi', 's', 't', 't', 'd'], 0", "output": "['lsi', 's', 't', 't', 'd']", "code": "def operation_to_perform(chemicals, num):\n\tfish = chemicals[1:]\n\tchemicals.reverse()\n\tfor i in range(num):\n\t\tfish.append(chemicals.pop(1))\n\tchemicals.reverse()\n\treturn chemicals", "id": "sample_322"}
{"input": "'ncdsdfdaaa0a1cdscsk*XFd'", "output": "1", "code": "def operation_to_perform(text):\n\treturn len(text.splitlines())", "id": "sample_323"}
{"input": "[]", "output": "[]", "code": "def operation_to_perform(nums):\n\tasc, desc = nums.copy(), []\n\tasc.reverse()\n\tdesc = asc[:len(asc)//2]\n\treturn desc + asc + desc", "id": "sample_324"}
{"input": "\"\"", "output": "True", "code": "def operation_to_perform(s):\n\tl = list(s)\n\tfor i in range(len(l)):\n\t\tl[i] = l[i].lower()\n\t\tif not l[i].isdigit():\n\t\t\treturn False\n\treturn True", "id": "sample_325"}
{"input": "'Thisisastring'", "output": "0", "code": "def operation_to_perform(text):\n\tnumber = 0\n\tfor t in text:\n\t\tif t.isnumeric():\n\t\t\tnumber += 1\n\treturn number", "id": "sample_326"}
{"input": "[1, 7, -1, -3]", "output": "[-3, 1, 7, -1]", "code": "def operation_to_perform(lst):\n\tnew = list()\n\ti = len(lst)-1\n\tfor _ in range(len(lst)):\n\t\tif i%2 == 0:\n\t\t\tnew.append(-lst[i])\n\t\telse:\n\t\t\tnew.append(lst[i])\n\t\ti -= 1\n\treturn new", "id": "sample_327"}
{"input": "[1, 2, 3], 4", "output": "[1, 2, 3, 1, 2, 3]", "code": "def operation_to_perform(array, L):\n\tif L <= 0:\n\t\treturn array\n\tif len(array) < L:\n\t\tarray.extend(operation_to_perform(array, L - len(array)))\n\treturn array", "id": "sample_328"}
{"input": "'jh54kkk6'", "output": "True", "code": "def operation_to_perform(text):\n\tfor i in range(len(text)):\n\t\tif text[i] == text[i].upper() and text[i-1].islower():\n\t\t\treturn True\n\treturn False", "id": "sample_329"}
{"input": "'m4n2o'", "output": "' 4 2 '", "code": "def operation_to_perform(text):\n\tans = []\n\tfor char in text:\n\t\tif char.isdigit():\n\t\t\tans.append(char)\n\t\telse:\n\t\t\tans.append(' ')\n\treturn ''.join(ans)", "id": "sample_330"}
{"input": "'', 'abc'", "output": "-1", "code": "def operation_to_perform(strand, zmnc):\n\tpoz = strand.find(zmnc)\n\twhile poz != -1:\n\t\tstrand = strand[poz + 1:]\n\t\tpoz = strand.find(zmnc)\n\treturn strand.rfind(zmnc)", "id": "sample_331"}
{"input": "[-6, -2, 1, -3, 0, 1]", "output": "[]", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\tif count == 0:\n\t\tnums = [0] * int(nums.pop())\n\telif count % 2 == 0:\n\t\tnums.clear()\n\telse:\n\t\tdel nums[:count//2:]\n\treturn nums", "id": "sample_332"}
{"input": "[375, 564, 857, 90, 728, 92], [728]", "output": "1", "code": "def operation_to_perform(places, lazy):\n\tplaces.sort()\n\tfor lazy in lazy:\n\t\tplaces.remove(lazy)\n\tif len(places) == 1:\n\t\treturn 1\n\tfor i, place in enumerate(places):\n\t\tif places.count(place+1) == 0:\n\t\t\treturn i+1\n\treturn i+1", "id": "sample_333"}
{"input": "'00', ['nU', ' 9 rCSAz', 'w', ' lpA5BO', 'sizL', 'i7rlVr']", "output": "'nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr'", "code": "def operation_to_perform(a, b):\n\treturn a.join(b)", "id": "sample_334"}
{"input": "'sjbrlfqmw', 'l'", "output": "'sjbrfqmw'", "code": "def operation_to_perform(text, to_remove):\n\tnew_text = list(text)\n\tif to_remove in new_text:\n\t\tindex = new_text.index(to_remove)\n\t\tnew_text.remove(to_remove)\n\t\tnew_text.insert(index, '?')\n\t\tnew_text.remove('?')\n\treturn ''.join(new_text)", "id": "sample_335"}
{"input": "'234dsfssdfs333324314', 's'", "output": "'234dsfssdfs333324314'", "code": "def operation_to_perform(s, sep):\n\ts += sep\n\treturn s.rpartition(sep)[0]", "id": "sample_336"}
{"input": "\"5ll6\"", "output": "'LL'", "code": "def operation_to_perform(txt):\n\td = []\n\tfor c in txt:\n\t\tif c.isdigit():\n\t\t\tcontinue\n\t\tif c.islower():\n\t\t\td.append(c.upper())\n\t\telif c.isupper():\n\t\t\td.append(c.lower())\n\treturn ''.join(d)", "id": "sample_337"}
{"input": "{'a': 1, 'b': 2, 'c': 3, 'd': 2}", "output": "{1: 'a', 2: 'd', 3: 'c'}", "code": "def operation_to_perform(my_dict):\n\tresult = {v: k for k, v in my_dict.items()}\n\treturn result", "id": "sample_338"}
{"input": "[-1, 2, 1, -8, -8, 2], 2", "output": "2", "code": "def operation_to_perform(array, elem):\n\telem = str(elem)\n\td = 0\n\tfor i in array:\n\t\tif str(i) == elem:\n\t\t\td += 1\n\treturn d", "id": "sample_339"}
{"input": "'E jIkx HtDpV G'", "output": "'   DEGHIVjkptx'", "code": "def operation_to_perform(text):\n\tuppercase_index = text.find('A')\n\tif uppercase_index >= 0:\n\t\treturn text[:uppercase_index] + text[text.find('a') + 1 :]\n\telse:\n\t\treturn ''.join(sorted(text))", "id": "sample_340"}
{"input": "{}", "output": "{}", "code": "def operation_to_perform(cart):\n\twhile len(cart) > 5:\n\t\tcart.popitem()\n\treturn cart", "id": "sample_341"}
{"input": "\"---123-4\"", "output": "False", "code": "def operation_to_perform(text):\n\treturn text.count('-') == len(text)", "id": "sample_342"}
{"input": "[[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]", "output": "[[1, 2, 3], [1, 2], 1, [1, 2, 3], 3, [2, 1]]", "code": "def operation_to_perform(array, elem):\n\tarray.extend(elem)\n\treturn array", "id": "sample_343"}
{"input": "[6, 4, 2, 8, 15], (lambda x: x.reverse())", "output": "[6, 4, 2, 8, 15]", "code": "def operation_to_perform(list, operation):\n\tnew_list = list[:]\n\tnew_list.sort()\n\toperation(new_list)\n\treturn list", "id": "sample_344"}
{"input": "'ml', 'mv'", "output": "('mv', 'ml')", "code": "def operation_to_perform(a, b):\n\tif a < b:\n\t\treturn (b, a)\n\treturn (a, b)", "id": "sample_345"}
{"input": "'docs.doc'", "output": "False", "code": "def operation_to_perform(filename):\n\tsuffix = filename.split('.')[-1]\n\tf2 = filename + suffix[::-1]\n\treturn f2.endswith(suffix)", "id": "sample_346"}
{"input": "'hzcw'", "output": "'hhhhhzcw'", "code": "def operation_to_perform(text):\n\tls = list(text)\n\tlength = len(ls)\n\tfor i in range(length):\n\t\tls.insert(i, ls[i])\n\treturn ''.join(ls).ljust(length * 2)", "id": "sample_347"}
{"input": "{563: 555, 133: None}", "output": "{563: 555, 133: None}", "code": "def operation_to_perform(dictionary):\n\treturn dictionary.copy()", "id": "sample_348"}
{"input": "{'noeohqhk': 623}", "output": "{'noeohqhk': 623, 1049: 55}", "code": "def operation_to_perform(dictionary):\n\tdictionary[1049] = 55\n\tkey, value = dictionary.popitem()\n\tdictionary[key] = value\n\treturn dictionary", "id": "sample_349"}
{"input": "{'a': 1, 'b': 2, 'c': 3}", "output": "[1, 2, 3]", "code": "def operation_to_perform(d):\n\tsize = len(d)\n\tv = [0] * size\n\tif size == 0:\n\t\treturn v\n\tfor i, e in enumerate(d.values()):\n\t\tv[i] = e\n\treturn v", "id": "sample_350"}
{"input": "'a_A_b_B3 '", "output": "'a_A_b_B3 '", "code": "def operation_to_perform(text):    \n\ttry:\n\t\twhile 'nnet lloP' in text:\n\t\t\ttext = text.replace('nnet lloP', 'nnet loLp')\n\tfinally:\n\t\treturn text", "id": "sample_351"}
{"input": "[-1, -3, -5, -7, 0]", "output": "-5", "code": "def operation_to_perform(nums):\n\treturn nums[len(nums)//2]", "id": "sample_352"}
{"input": "[1, 0, 2, 2, 0, 0, 0, 1]", "output": "4", "code": "def operation_to_perform(x):\n\tif x == []:\n\t\treturn -1\n\telse:\n\t\tcache = {}\n\t\tfor item in x:\n\t\t\tif item in cache:\n\t\t\t\tcache[item] += 1\n\t\t\telse:\n\t\t\t\tcache[item] = 1\n\t\treturn max(cache.values())", "id": "sample_353"}
{"input": "'{0}, {0}!!!', ['R', None]", "output": "'R, R!!!'", "code": "def operation_to_perform(description, values):\n\tif values[1] is None:\n\t\tvalues = values[0:1]\n\telse:\n\t\tvalues = values[1:]\n\treturn description.format(*values)", "id": "sample_354"}
{"input": "'123x John z', 'z'", "output": "'23x John z'", "code": "def operation_to_perform(text, prefix):\n\treturn text[len(prefix):]", "id": "sample_355"}
{"input": "[1, 2], 1", "output": "[2, 1]", "code": "def operation_to_perform(array, num):\n\treverse = False\n\tif num < 0:\n\t\treverse = True\n\t\tnum *= -1\n\tarray = array[::-1] * num\n\tl = len(array)\n    \n\tif reverse:\n\t\tarray = array[::-1]\n\treturn array", "id": "sample_356"}
{"input": "'crew'", "output": "'werc'", "code": "def operation_to_perform(s):\n\tr = []\n\tfor i in range(len(s) - 1, 0 - 1, -1):\n\t\tr += s[i]\n\treturn ''.join(r)", "id": "sample_357"}
{"input": "'btrburger', 'b'", "output": "'tr'", "code": "def operation_to_perform(text, value):\n\tindexes = []\n\tfor i in range(len(text)):\n\t\tif text[i] == value and (i == 0 or text[i-1] != value):\n\t\t\tindexes.append(i) \n\tif len(indexes) % 2 == 1:\n\t\treturn text\n\treturn text[indexes[0]+1:indexes[-1]]", "id": "sample_358"}
{"input": "['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']", "output": "['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']", "code": "def operation_to_perform(lines):\n\tfor i in range(len(lines)):\n\t\tlines[i] = lines[i].center(len(lines[-1]))\n\treturn lines", "id": "sample_359"}
{"input": "'g', 15", "output": "'g'", "code": "def operation_to_perform(text, n):\n\tif len(text) <= 2:\n\t\treturn text\n\tleading_chars = text[0] * (n - len(text) + 1)\n\treturn leading_chars + text[1:-1] + text[-1]", "id": "sample_360"}
{"input": "\"#! : #!\"", "output": "1", "code": "def operation_to_perform(text):\n\treturn text.split(':')[0].count('#')", "id": "sample_361"}
{"input": "'wrazugizoernmgzu'", "output": "'razugizoernmgzu'", "code": "def operation_to_perform(text):\n\tfor i in range(len(text)-1):\n\t\tif text[i:].islower():\n\t\t\treturn text[i + 1:]\n\treturn ''", "id": "sample_362"}
{"input": "[1]", "output": "[1]", "code": "def operation_to_perform(nums):\n\tnums.sort()\n\tn = len(nums)\n\tnew_nums = [nums[n//2]]\n    \n\tif n % 2 == 0:\n\t\tnew_nums = [nums[n//2 - 1], nums[n//2]]\n    \n\tfor i in range(0, n//2):\n\t\tnew_nums.insert(0, nums[n-i-1])\n\t\tnew_nums.append(nums[i])\n\treturn new_nums", "id": "sample_363"}
{"input": "[0, 3, 0, 1], lambda x: x < 2", "output": "[[3, False], [1, True]]", "code": "def operation_to_perform(nums, verdict):\n\tres = [x for x in nums if x != 0]\n\tresult = [[x, verdict(x)] for x in res]\n\tif result:\n\t\treturn result\n\treturn 'error - no numbers or all zeros!'", "id": "sample_364"}
{"input": "'xqc', 'mRcwVqXsRDRb'", "output": "'mRcwVqXsRDRb'", "code": "def operation_to_perform(n, s):\n\tif s.startswith(n):\n\t\tpre, _ = s.split(n, 1)\n\t\treturn pre + n + s[len(n):]\n\treturn s", "id": "sample_365"}
{"input": "'[ Hello ]+ Hello, World!!_ Hi'", "output": "''", "code": "def operation_to_perform(string):\n\ttmp = string.lower()\n\tfor char in string.lower():\n\t\tif char in tmp:\n\t\t\ttmp = tmp.replace(char, '', 1)\n\treturn tmp", "id": "sample_366"}
{"input": "[6, 2, 1, 1, 4, 1], 5", "output": "[6, 2, 1, 1, 4, 1]", "code": "def operation_to_perform(nums, rmvalue):\n\tres = nums[:]\n\twhile rmvalue in res:\n\t\tpopped = res.pop(res.index(rmvalue))\n\t\tif popped != rmvalue:\n\t\t\tres.append(popped)\n\treturn res", "id": "sample_367"}
{"input": "'4327', [2, 8, 9, 2, 7, 1]", "output": "'4327 00004327 000004327 4327 0004327 4327'", "code": "def operation_to_perform(string, numbers):\n\tarr = []\n\tfor num in numbers:\n\t\tarr.append(string.zfill(num))\n\treturn ' '.join(arr)", "id": "sample_368"}
{"input": "\" 99 777\"", "output": "'tuple'", "code": "def operation_to_perform(var):\n\tif var.isdigit():\n\t\treturn \"int\"\n\telif var.replace('.', '', 1).isdigit():\n\t\treturn \"float\"\n\telif var.count(' ') == len(var) - 1:\n\t\treturn \"str\"\n\telif len(var) == 1:\n\t\treturn \"char\"\n\telse:\n\t\treturn \"tuple\"", "id": "sample_369"}
{"input": "'     i'", "output": "False", "code": "def operation_to_perform(text):\n\tfor char in text:\n\t\tif not char.isspace():\n\t\t\treturn False\n\treturn True", "id": "sample_370"}
{"input": "[11, 21, 0, 11]", "output": "0", "code": "def operation_to_perform(nums):\n\tfor odd in nums[:]:\n\t\tif odd % 2 != 0:\n\t\t\tnums.remove(odd)\n\tsum_ = 0\n\tfor num in nums:\n\t\tsum_ += num\n\treturn sum_", "id": "sample_371"}
{"input": "['v'], 1", "output": "['']", "code": "def operation_to_perform(list_, num):\n\ttemp = []\n\tfor i in list_:\n\t\ti = num // 2 * ('%s,' % i)\n\t\ttemp.append(i)\n\treturn temp", "id": "sample_372"}
{"input": "[1, 2, 3]", "output": "[1, 2, 3]", "code": "def operation_to_perform(orig):\n\tcopy = orig\n\tcopy.append(100)\n\torig.pop()\n\treturn copy", "id": "sample_373"}
{"input": "[ 'oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA' ], 'zz'", "output": "['zzzz']", "code": "def operation_to_perform(seq, v):\n\ta = []\n\tfor i in seq:\n\t\tif i.endswith(v):\n\t\t\ta.append(i*2)\n\treturn a", "id": "sample_374"}
{"input": "'sierizam', 'iz'", "output": "'sieriizzizam'", "code": "def operation_to_perform(a, b):\n\tif b in a:\n\t\treturn b.join(a.partition(a[a.index(b) + 1]))\n\telse:\n\t\treturn a", "id": "sample_375"}
{"input": "\"2two programmers\"", "output": "'no'", "code": "def operation_to_perform(text):\n\tfor i in range(len(text)):\n\t\tif text[0:i].startswith(\"two\"):\n\t\t\treturn text[i:]\n\treturn 'no'", "id": "sample_376"}
{"input": "\"BYE\\nNO\\nWAY\"", "output": "'BYE, NO, WAY'", "code": "def operation_to_perform(text):\n\treturn ', '.join(text.splitlines())", "id": "sample_377"}
{"input": "dict(did=0), 'u'", "output": "'No such key!'", "code": "def operation_to_perform(dic, key):\n\tdic = dict(dic)\n\tv = dic.pop(key, 0)\n\tif v == 0:\n\t\treturn 'No such key!'\n\twhile len(dic) > 0:\n\t\tdic[dic.popitem()[1]] = dic.popitem()[0]\n\treturn int(dic.popitem()[0])", "id": "sample_378"}
{"input": "[0, 0, 1, 2, 1]", "output": "False", "code": "def operation_to_perform(nums):\n\tfor i in range(len(nums) - 1, -1, -3):\n\t\tif nums[i] == 0:\n\t\t\tnums.clear()\n\t\t\treturn False\n\treturn nums", "id": "sample_379"}
{"input": "'xxjarczx', 'x'", "output": "'xxjarcz'", "code": "def operation_to_perform(text, delimiter):\n\ttext = text.rpartition(delimiter)\n\treturn text[0] + text[-1]", "id": "sample_380"}
{"input": "'19', 5", "output": "'00019'", "code": "def operation_to_perform(text, num_digits):\n\twidth = max(1, num_digits)\n\treturn text.zfill(width)", "id": "sample_381"}
{"input": "{15: \"Qltuf\", 12: \"Rwrepny\"}", "output": "\"(12, 'Rwrepny') (15, 'Qltuf')\"", "code": "def operation_to_perform(a):\n\ts = dict(list(a.items())\n\t[::-1])\n\treturn \" \".join([str(i) for i in s.items()])", "id": "sample_382"}
{"input": "'ellod!p.nkyp.exa.bi.y.hain', '.n.in.ha.y'", "output": "'ellod!p.nkyp.exa.bi.y.hain'", "code": "def operation_to_perform(text, chars):\n\tresult = list(text)\n\twhile chars in result[-3::-2]:\n\t\tresult.remove(result[-3])\n\t\tresult.remove(result[-3])\n\treturn ''.join(result).strip('.')", "id": "sample_383"}
{"input": "'asfdellos', 'Ta'", "output": "'sfdellos'", "code": "def operation_to_perform(text, chars):\n\tchars = list(chars)\n\ttext = list(text)\n\tnew_text = text\n\twhile len(new_text) > 0 and text:\n\t\tif new_text[0] in chars:\n\t\t\tnew_text = new_text[1:]\n\t\telse:\n\t\t\tbreak \n\treturn ''.join(new_text)", "id": "sample_384"}
{"input": "[0, 2, 1, 2, 6, 2, 6, 3, 0]", "output": "[0, 2, 2]", "code": "def operation_to_perform(lst):\n\ti = 0\n\tnew_list = []\n\twhile i < len(lst):\n\t\tif lst[i] in lst[i+1:]:\n\t\t\tnew_list.append(lst[i])\n\t\t\tif len(new_list) == 3:\n\t\t\t\treturn new_list\n\t\ti += 1\n\treturn new_list", "id": "sample_385"}
{"input": "'mid', {'0':'q','1':'f','2':'w','3':'i'}", "output": "'Done!'", "code": "def operation_to_perform(concat, di):\n\tcount = len(di)\n\tfor i in range(count):\n\t\tif di[str(i)] in concat:\n\t\t\tdi.pop(str(i))\n\treturn \"Done!\"", "id": "sample_386"}
{"input": "[3, 1, 2], 2, 0", "output": "[3, 1, 0, 2]", "code": "def operation_to_perform(nums, pos, value):\n\tnums.insert(pos, value)\n\treturn nums", "id": "sample_387"}
{"input": "\"2nm_28in\", \"nm\"", "output": "'2nm_28in'", "code": "def operation_to_perform(text, characters):\n\tcharacter_list = list(characters) + [' ', '_']\n\n\ti = 0\n\twhile i < len(text) and text[i] in character_list:\n\t\ti += 1\n\n\treturn text[i:]", "id": "sample_388"}
{"input": "[1, 2, 3], 'nammo'", "output": "[1, 2, 3, 'n', 'a', 'm', 'm', 'o']", "code": "def operation_to_perform(total, arg):\n\tif type(arg) is list:\n\t\tfor e in arg:\n\t\t\ttotal.extend(e)\n\telse:\n\t\ttotal.extend(arg)\n\treturn total", "id": "sample_389"}
{"input": "\" \\t \"", "output": "0", "code": "def operation_to_perform(text):\n\tif not text.strip():\n\t\treturn len(text.strip())\n\treturn None", "id": "sample_390"}
{"input": "['r', '9']", "output": "['9', '+', '+', '+']", "code": "def operation_to_perform(students):\n\tseatlist = students\n\tseatlist.reverse()\n\tcnt = 0\n\tfor cnt in range(len(seatlist)):\n\t\tcnt += 2\n\t\tseatlist[cnt - 1:cnt] = ['+']\n\tseatlist.append('+')\n\treturn seatlist", "id": "sample_391"}
{"input": "'Hello Is It MyClass'", "output": "'Hello Is It MyClass'", "code": "def operation_to_perform(text):\n\tif text.upper() == text:\n\t\treturn 'ALL UPPERCASE'\n\treturn text", "id": "sample_392"}
{"input": "'scala'", "output": "'a---c---s'", "code": "def operation_to_perform(text):\n\tls = text[::-1]\n\ttext2 = ''\n\tfor i in range(len(ls) - 3, 0, -3):\n\t\ttext2 += '---'.join(ls[i:i + 3]) + '---'\n\treturn text2[:-3]", "id": "sample_393"}
{"input": "\"2 m2 \\n\\nbike\"", "output": "1", "code": "def operation_to_perform(text):\n\tk = text.splitlines()\n\ti = 0\n\tfor j in k:\n\t\tif len(j) == 0:\n\t\t\treturn i\n\t\ti+=1\n\treturn -1", "id": "sample_394"}
{"input": "\"11\"", "output": "0", "code": "def operation_to_perform(s):\n\tfor i in range(len(s)):\n\t\tif s[i].isdecimal():\n\t\t\treturn i + (s[i] == '0')\n\t\telif s[i] == '0':\n\t\t\treturn -1\n\treturn -1", "id": "sample_395"}
{"input": "{}", "output": "{}", "code": "def operation_to_perform(ets):\n\twhile ets:\n\t\tk, v = ets.popitem()\n\t\tets[k] = v**2\n\treturn ets", "id": "sample_396"}
{"input": "['x', 'u', 'w', 'j', 3, 6]", "output": "{'x': 0, 'u': 0, 'w': 0, 'j': 0, 3: 0, 6: 0}", "code": "def operation_to_perform(ls):\n\treturn dict.fromkeys(ls, 0)", "id": "sample_397"}
{"input": "{'2': 2, '0': 1, '1': 2}", "output": "{'2': 2, '0': 1, '1': 2, 2: ['2', '1'], 1: ['0']}", "code": "def operation_to_perform(counts):\n\tdict = {}\n\tfor k, v in counts.items():\n\t\tcount = counts[k]\n\t\tif count not in dict:\n\t\t\tdict[count] = []\n\t\tdict[count].append(k)\n\tcounts.update(dict)\n\treturn counts", "id": "sample_398"}
{"input": "'avacado', 'va', '-'", "output": "'a--cado'", "code": "def operation_to_perform(text, old, new):\n\tif len(old) > 3:\n\t\treturn text\n\tif old in text and ' ' not in text:\n\t\treturn text.replace(old, new*len(old))\n\twhile old in text:\n\t\ttext = text.replace(old, new)\n\treturn text", "id": "sample_399"}
{"input": "'I am hungry! eat food.'", "output": "'I, am, hungry!, eat, food.'", "code": "def operation_to_perform(multi_string):\n\tcond_string = map(str.isascii, multi_string.split())\n\tif True in cond_string:\n\t\treturn ', '.join(x for x in multi_string.split() if x.isascii())\n\treturn ''", "id": "sample_400"}
{"input": "'mathematics', 'example'", "output": "'mathematics'", "code": "def operation_to_perform(text, suffix):\n\tif suffix and text.endswith(suffix):\n\t\treturn text[:- len(suffix)]\n\treturn text", "id": "sample_401"}
{"input": "0, ['aaa', 'bbb']", "output": "{}", "code": "def operation_to_perform(n, l):\n\tarchive = {}\n\tfor _ in range(n):\n\t\tarchive.clear()\n\t\tarchive.update({x + 10: x * 10 for x in l})\n\treturn archive", "id": "sample_402"}
{"input": "'hrsiajiajieihruejfhbrisvlmmy', 'hr'", "output": "2", "code": "def operation_to_perform(full, part):\n\tlength = len(part)\n\tindex = full.find(part)\n\tcount = 0\n\twhile index >= 0:\n\t\tfull = full[index + length:]\n\t\tindex = full.find(part)\n\t\tcount += 1\n\treturn count", "id": "sample_403"}
{"input": "['l', 'f', 'h', 'g', 's', 'b']", "output": "6", "code": "def operation_to_perform(no):\n\td = dict.fromkeys(no, False) \n\treturn sum([1 for i in d.keys()])", "id": "sample_404"}
{"input": "[6, 3, 4, 1, 2, 3, 5]", "output": "[5, 3, 4, 1, 2, 3, 5]", "code": "def operation_to_perform(xs):\n\tnew_x = xs[0] - 1\n\txs.pop(0)\n\twhile(new_x <= xs[0]):\n\t\txs.pop(0)\n\t\tnew_x -= 1\n\txs.insert(0, new_x)\n\treturn xs", "id": "sample_405"}
{"input": "'Josh'", "output": "False", "code": "def operation_to_perform(text):\n\tls = list(text)\n\tls[0], ls[-1] = ls[-1].upper(), ls[0].upper()\n\treturn ''.join(ls).istitle()", "id": "sample_406"}
{"input": "[6, 1, 2, 3]", "output": "0", "code": "def operation_to_perform(s):\n\twhile len(s) > 1:\n\t\ts.clear()\n\t\ts.append(len(s))\n\treturn s.pop()", "id": "sample_407"}
{"input": "[-4, 6, 0, 4, -7, 2, -1]", "output": "[-1, 2, -7, 4, 0, 6, -4]", "code": "def operation_to_perform(m):\n\tm.reverse()\n\treturn m", "id": "sample_408"}
{"input": "'querist', 'u'", "output": "'querisT'", "code": "def operation_to_perform(text, char):\n\tif text:\n\t\ttext = text.removeprefix(char)\n\t\ttext = text.removeprefix(text[-1])\n\t\ttext = text[:-1] + text[-1].capitalize()\n\treturn text", "id": "sample_409"}
{"input": "[1, 3, -1, 1, -2, 6]", "output": "[1, 1, 1, 1, 1, 1, 1, 3, -1, 1, -2, 6]", "code": "def operation_to_perform(nums):\n\ta = 0\n\tfor i in range(len(nums)):\n\t\tnums.insert(i, nums[a])\n\t\ta += 1\n\treturn nums", "id": "sample_410"}
{"input": "'Hello World', 'W'", "output": "False", "code": "def operation_to_perform(text, pref):\n\tif isinstance(pref, list):\n\t\treturn ', '.join(text.startswith(x) for x in pref)\n\telse:\n\t\treturn text.startswith(pref)", "id": "sample_411"}
{"input": "3, 10, 1", "output": "8", "code": "def operation_to_perform(start, end, interval):\n\tsteps = list(range(start, end + 1, interval))\n\tif 1 in steps:\n\t\tsteps[-1] = end + 1\n\treturn len(steps)", "id": "sample_412"}
{"input": "'jbucwc'", "output": "'cwcuc'", "code": "def operation_to_perform(s):\n\treturn '{}{}{}'.format(s[3:], s[2], s[5:8])", "id": "sample_413"}
{"input": "{'X': ['x', 'y']}", "output": "{'X': ['X', 'Y']}", "code": "def operation_to_perform(d):\n\tdCopy = d.copy()\n\tfor key, value in dCopy.items():\n\t\tfor i in range(len(value)):\n\t\t\tvalue[i] = value[i].upper()\n\treturn dCopy", "id": "sample_414"}
{"input": "((8, 5), (8, 2), (5, 3))", "output": "{8: 2, 5: 3}", "code": "def operation_to_perform(array):\n\td = dict(array)\n\tfor key, value in d.items():\n\t\tif value < 0 or value > 9:\n\t\t\treturn None\n\treturn d", "id": "sample_415"}
{"input": "'jysrhfm ojwesf xgwwdyr dlrul ymba bpq', 'j', '1'", "output": "'jysrhfm ojwesf xgwwdyr dlrul ymba bpq'", "code": "def operation_to_perform(text, old, new):\n\tindex = text.rfind(old, 0, text.find(old))\n\tresult = list(text)\n\twhile index > 0:\n\t\tresult[index:index+len(old)] = new\n\t\tindex = text.rfind(old, 0, index)\n\treturn ''.join(result)", "id": "sample_416"}
{"input": "[7, 8, 2, 8]", "output": "[8, 2, 8]", "code": "def operation_to_perform(lst):\n\tlst.reverse()\n\tlst.pop()\n\tlst.reverse()\n\treturn lst", "id": "sample_417"}
{"input": "\"qqqqq\", \"qqq\"", "output": "'qqqqq'", "code": "def operation_to_perform(s, p):\n\tarr = s.partition(p)\n\tpart_one, part_two, part_three = len(arr[0]), len(arr[1]), len(arr[2])\n\tif part_one >= 2 and part_two <= 2 and part_three >= 2:\n\t\treturn (arr[0][::-1] + arr[1] + arr[2][::-1] + '#')\n\treturn (arr[0] + arr[1] + arr[2])", "id": "sample_418"}
{"input": "'mmfbifen', 'i'", "output": "'mmfb'", "code": "def operation_to_perform(text, value):\n\tif not value in text:\n\t\treturn ''\n\treturn text.rpartition(value)[0]", "id": "sample_419"}
{"input": "\"x\"", "output": "True", "code": "def operation_to_perform(text):\n\ttry:\n\t\treturn text.isalpha()\n\texcept:\n\t\treturn False", "id": "sample_420"}
{"input": "\"try.\", 5", "output": "'try.'", "code": "def operation_to_perform(str, n):\n\tif len(str) < n:\n\t\treturn str\n\telse:\n\t\treturn str.removeprefix(str[:n])", "id": "sample_421"}
{"input": "[1, 2, 1]", "output": "[1, 4, 1]", "code": "def operation_to_perform(array):\n\tnew_array = array.copy()\n\tnew_array = reversed(new_array)\n\treturn [x*x for x in new_array]", "id": "sample_422"}
{"input": "[4, 2, 5, 1, 3, 2, 6]", "output": "[4, 2, 5, 1, 3, 2]", "code": "def operation_to_perform(selfie):\n\tlo = len(selfie)\n\tfor i in range(lo-1, -1, -1):\n\t\tif selfie[i] == selfie[0]:\n\t\t\tselfie.remove(selfie[lo-1])\n\treturn selfie", "id": "sample_423"}
{"input": "'\"Makers of a Statement\"'", "output": "'akers of a Statement'", "code": "def operation_to_perform(s):\n\ts = s.replace('\"', '')\n\tlst = list(s)\n\tcol = 0\n\tcount = 1\n\twhile col < len(lst) and lst[col] in \".:,\":\n\t\tif lst[col] == \".\":\n\t\t\tcount = ls[col] + 1\n\t\tcol += 1\n\treturn s[col+count:]", "id": "sample_424"}
{"input": "'/CL44     '", "output": "['', ':', 'CL44     ']", "code": "def operation_to_perform(a):\n\ta = a.replace('/', ':')\n\tz = a.rpartition(':')\n\treturn [z[0], z[1], z[2]]", "id": "sample_425"}
{"input": "[1, 2, 3], 8, 5", "output": "[1, 2, 3, 8]", "code": "def operation_to_perform(numbers, elem, idx):\n\tnumbers.insert(idx, elem)\n\treturn numbers", "id": "sample_426"}
{"input": "'s a a b s d s a a s a a'", "output": "''", "code": "def operation_to_perform(s):\n\tcount = len(s) - 1\n\treverse_s = s[::-1]\n\twhile count > 0 and reverse_s[::2].rfind('sea') == -1:\n\t\tcount -= 1\n\t\treverse_s = reverse_s[:count]\n\treturn reverse_s[count:]", "id": "sample_427"}
{"input": "[]", "output": "[]", "code": "def operation_to_perform(nums):\n\tfor i in range(len(nums)):\n\t\tif not i % 2:\n\t\t\tnums.append(nums[i] * nums[i + 1])\n\treturn nums", "id": "sample_428"}
{"input": "{5: 1, 'abc': 2, 'defghi': 2, 87.29: 3}", "output": "[(87.29, 3), ('defghi', 2), ('abc', 2), (5, 1)]", "code": "def operation_to_perform(d):\n\tresult = []\n\twhile len(d.keys()) > 0:\n\t\tresult.append(d.popitem())\n\treturn result", "id": "sample_429"}
{"input": "[5, 1, 3, 7, 8], ['', 0, -1, []]", "output": "[5, 1, 3, 7, 8, '', 0, -1, []]", "code": "def operation_to_perform(arr1, arr2):\n\tnew_arr = arr1.copy()\n\tnew_arr.extend(arr2)\n\treturn new_arr", "id": "sample_430"}
{"input": "1, 3", "output": "[]", "code": "def operation_to_perform(n, m):\n\tarr = list(range(1, n+1))\n\tfor i in range(m):\n\t\tarr.clear()\n\treturn arr", "id": "sample_431"}
{"input": "-5, 'G5ogb6f,c7e.EMm'", "output": "False", "code": "def operation_to_perform(length, text):\n\tif len(text) == length:\n\t\treturn text[::-1]\n\treturn False", "id": "sample_432"}
{"input": "\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\"", "output": "'T,T,Sspp,G ,.tB,Vxk,Cct'", "code": "def operation_to_perform(text):\n\ttext = text.split(',')\n\ttext.pop(0)\n\ttext.insert(0, text.pop(text.index('T')))\n\treturn 'T' + ',' + ','.join(text)", "id": "sample_433"}
{"input": "'eeuseeeoehasa'", "output": "8", "code": "def operation_to_perform(string):\n\ttry:\n\t   return string.rfind('e')\n\texcept AttributeError:\n\t\treturn \"Nuk\"", "id": "sample_434"}
{"input": "[], 0, 1", "output": "''", "code": "def operation_to_perform(numbers, num, val):\n\twhile len(numbers) < num:\n\t\tnumbers.insert(len(numbers) // 2, val)\n\tfor _ in range(len(numbers) // (num - 1) - 4):\n\t\tnumbers.insert(len(numbers) // 2, val)\n\treturn ' '.join(numbers)", "id": "sample_435"}
{"input": "'s7 6s 1ss', [1, 3, 6, 1, 2]", "output": "['7', '6', '1', '7', ' ']", "code": "def operation_to_perform(s, characters):\n\treturn [s[i:i+1] for i in characters]", "id": "sample_436"}
{"input": "['john', 'doe', 'the', 'john', 'doe']", "output": "{'d': None, 'o': None, 'e': None}", "code": "def operation_to_perform(tap_hierarchy):\n\thierarchy = {}\n\tfor gift in tap_hierarchy:\n\t\thierarchy = hierarchy.fromkeys(gift, None)\n\treturn hierarchy", "id": "sample_437"}
{"input": "'1  \\t\\t\\t3'", "output": "'1                             3'", "code": "def operation_to_perform(string):\n\tbigTab = 100\n\tfor i in range(10, 30):\n\t\tif 0 < string.count('\\t') < 20:\n\t\t\tbigTab = i\n\t\t\tbreak\n\treturn string.expandtabs(bigTab)", "id": "sample_438"}
{"input": "'coscifysu'", "output": "'coscifysu'", "code": "def operation_to_perform(value):\n\tparts = value.partition(' ')[::2]\n\treturn ''.join(parts)", "id": "sample_439"}
{"input": "\"abc\"", "output": "'no'", "code": "def operation_to_perform(text):\n\tif text.isdecimal():\n\t\treturn 'yes'\n\telse:\n\t\treturn 'no'", "id": "sample_440"}
{"input": "{37: 'forty-five'}, '23', 'what?'", "output": "{37: 'forty-five', '23': 'what?'}", "code": "def operation_to_perform(base, k, v):\n\tbase[k] = v\n\treturn base", "id": "sample_441"}
{"input": "[1, 2, 3, 4]", "output": "[1, 2, 3, 4]", "code": "def operation_to_perform(lst):\n\tres = []\n\tfor i in range(len(lst)):\n\t\tif lst[i] % 2 == 0:\n\t\t\tres.append(lst[i])\n\n\treturn lst.copy()", "id": "sample_442"}
{"input": "\"lorem ipsum\"", "output": "'lorem ipsum'", "code": "def operation_to_perform(text):\n\tfor space in text:\n\t\tif space == ' ':\n\t\t\ttext = text.lstrip()\n\t\telse:\n\t\t\ttext = text.replace('cd', space)\n\treturn text", "id": "sample_443"}
{"input": "[-5, 3, -2, -3, -1, 3, 5]", "output": "[5, -2, 2, -5]", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\tfor i in range(count-1, 0, -2):\n\t\tnums.insert(i, nums.pop(0) + nums.pop(0))\n\treturn nums", "id": "sample_444"}
{"input": "\"carrot, banana, and strawberry\"", "output": "'Carrot,  Banana,  and Strawberry'", "code": "def operation_to_perform(names):\n\tparts = names.split(',')\n\tfor i, part in enumerate(parts):\n\t\tparts[i] = part.replace(' and', '+').title().replace('+', ' and')\n\treturn ', '.join(parts)", "id": "sample_445"}
{"input": "[]", "output": "[]", "code": "def operation_to_perform(array):\n\tl = len(array)\n\tif l % 2 == 0:\n\t\tarray.clear()\n\telse:\n\t\tarray.reverse()\n\treturn array", "id": "sample_446"}
{"input": "\"\\ta\", 3", "output": "'||a'", "code": "def operation_to_perform(text, tab_size):\n\tres = ''\n\ttext = text.replace('\\t', ' '*(tab_size-1))\n\tfor i in range(len(text)):\n\t\tif text[i] == ' ':\n\t\t\tres += '|'\n\t\telse:\n\t\t\tres += text[i]\n\treturn res", "id": "sample_447"}
{"input": "'uMeGndkGh', 'kG'", "output": "False", "code": "def operation_to_perform(text, suffix):\n\tif suffix == '':\n\t\tsuffix = None\n\treturn text.endswith(suffix)", "id": "sample_448"}
{"input": "'1'", "output": "True", "code": "def operation_to_perform(x):\n\tn = len(x)\n\ti = 0\n\twhile i < n and x[i].isdigit():\n\t\ti += 1\n\treturn i == n", "id": "sample_449"}
{"input": "'K zBK'", "output": "'K KBz'", "code": "def operation_to_perform(strs):\n\tstrs = strs.split()\n\tfor i in range(1, len(strs), 2):\n\t\tstrs[i] = ''.join(reversed(strs[i]))\n\treturn ' '.join(strs)", "id": "sample_450"}
{"input": "'pn', 'p'", "output": "'n'", "code": "def operation_to_perform(text, char):\n\ttext = list(text)\n\tfor count, item in enumerate(text):\n\t\tif item == char:\n\t\t\ttext.remove(item)\n\t\t\treturn ''.join(text)\n\treturn text", "id": "sample_451"}
{"input": "'l000*',", "output": "1", "code": "def operation_to_perform(text):\n\tcounter = 0\n\tfor char in text:\n\t\tif char.isalpha():\n\t\t\tcounter += 1\n\treturn counter", "id": "sample_452"}
{"input": "'wrsch)xjmb8', 'c'", "output": "False", "code": "def operation_to_perform(string, c):\n\treturn string.endswith(c)", "id": "sample_453"}
{"input": "{'a': 2, 'b': [], 'c': {}}, 0", "output": "{}", "code": "def operation_to_perform(d, count):\n\tnew_dict = {}\n\tfor _ in range(count):\n\t\td = d.copy()\n\t\tnew_dict = {**d, **new_dict}\n\treturn new_dict", "id": "sample_454"}
{"input": "'?XyZ'", "output": "'?XyZ'", "code": "def operation_to_perform(text):\n\tuppers = 0\n\tfor c in text:\n\t\tif c.isupper():\n\t\t\tuppers += 1\n\treturn text.upper() if uppers >= 10 else text", "id": "sample_455"}
{"input": "\"Join us in Hungary\", 4", "output": "'Join us in Hungary'", "code": "def operation_to_perform(s, tab):\n\treturn s.expandtabs(tab)", "id": "sample_456"}
{"input": "[3, 1, 7, 5, 6]", "output": "[]", "code": "def operation_to_perform(nums):\n\tcount = list(range(len(nums)))\n\tfor i in range(len(nums)):\n\t\tnums.pop()\n\t\tif len(count) > 0:\n\t\t\tcount.pop(0)\n\treturn nums", "id": "sample_457"}
{"input": "'mmm34mIm', 'mm3', ',po'", "output": "'pppo4pIp'", "code": "def operation_to_perform(text, search_chars, replace_chars):\n\ttrans_table = str.maketrans(search_chars, replace_chars)\n\treturn text.translate(trans_table)", "id": "sample_458"}
{"input": "['b', 'vzjmc', 'f', 'ae', '0'], dict()", "output": "{'vzjmc': 'b', 'ae': 'f'}", "code": "def operation_to_perform(arr, d):\n\tfor i in range(1, len(arr), 2):\n\t\td.update({arr[i]: arr[i-1]})\n\n\treturn d", "id": "sample_459"}
{"input": "'GENERAL NAGOOR', 5", "output": "'GENERAL NAGOOR'", "code": "def operation_to_perform(text, amount):\n\tlength = len(text)\n\tpre_text = '|'\n\tif amount >= length:\n\t\textra_space = amount - length\n\t\tpre_text += ' ' * (extra_space // 2)\n\t\treturn pre_text + text + pre_text\n\treturn text", "id": "sample_460"}
{"input": "'123', '123eenhas0'", "output": "True", "code": "def operation_to_perform(text, search):\n\treturn search.startswith(text) or False", "id": "sample_461"}
{"input": "'ldebgp o', 'o'", "output": "'oooooooo'", "code": "def operation_to_perform(text, value):\n\tlength = len(text)\n\tletters = list(text)\n\tif value not in letters:\n\t\tvalue = letters[0]\n\treturn value * length", "id": "sample_462"}
{"input": "{-1: -1, 5: 5, 3: 6, -4: -4}", "output": "{3: 6}", "code": "def operation_to_perform(dict):\n\tresult = dict.copy()\n\tremove_keys = []\n\tfor k, v in dict.items():\n\t\tif v in dict:\n\t\t\tdel result[k]\n\treturn result", "id": "sample_463"}
{"input": "'0'", "output": "-50", "code": "def operation_to_perform(ans):\n\tif ans.isdecimal():\n\t\ttotal = int(ans) * 4 - 50\n\t\ttotal -= len([c for c in list(ans) if c not in '02468']) * 100\n\t\treturn total\n\treturn 'NAN'", "id": "sample_464"}
{"input": "['wise king', 'young king'], ''", "output": "{'wise king': 'north', 'young king': 'north'}", "code": "def operation_to_perform(seq, value):\n\troles = dict.fromkeys(seq, 'north')\n\tif value:\n\t\troles.update(key.strip() for key in value.split(', '))\n\treturn roles", "id": "sample_465"}
{"input": "'-----\\t\\n\\tth\\n-----'", "output": "'-----'", "code": "def operation_to_perform(text):\n\tlength = len(text)\n\tindex = 0\n\twhile index < length and text[index].isspace():\n\t\tindex += 1\n\treturn text[index:index+5]", "id": "sample_466"}
{"input": "{}", "output": "{}", "code": "def operation_to_perform(nums):\n\tcopy = nums.copy()\n\tnewDict = dict()\n\tfor k in copy:\n\t\tnewDict[k] = len(copy[k])\n\treturn newDict", "id": "sample_467"}
{"input": "'unrndqafi', 'c', 2", "output": "'unrndqafi'", "code": "def operation_to_perform(a, b, n):\n\tresult = m = b\n\tfor _ in range(n):\n\t\tif m:\n\t\t\ta, m = a.replace(m, '', 1), None\n\t\t\tresult = m = b\n\treturn result.join(a.split(b))", "id": "sample_468"}
{"input": "'sduyai', 1, 'y'", "output": "'syduyi'", "code": "def operation_to_perform(text, position, value):\n\tlength = len(text)\n\tindex = position % (length)\n\tif position < 0:\n\t\t index = length // 2\n\tnew_text = list(text)\n\tnew_text.insert(index, value)\n\tnew_text.pop(length-1)\n\treturn ''.join(new_text)", "id": "sample_469"}
{"input": "2", "output": "['B', 'D']", "code": "def operation_to_perform(number):\n\ttransl = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}\n\tresult = []\n\tfor key, value in transl.items():\n\t\tif value % number == 0:\n\t\t\tresult.append(key)\n\treturn result", "id": "sample_470"}
{"input": "'o', 'fnmart'", "output": "-1", "code": "def operation_to_perform(val, text):\n\tindices = [index for index in range(len(text)) if text[index] == val]\n\tif len(indices) == 0:\n\t\treturn -1\n\telse:\n\t\treturn indices[0]", "id": "sample_471"}
{"input": "\"x--y-z-5-C\"", "output": "[1, 1, 1, 1, 1]", "code": "def operation_to_perform(text):\n\td = {}\n\tfor char in text.replace('-', '').lower():\n\t\td[char] = d[char] + 1 if char in d else 1\n\td = sorted(d.items(), key=lambda x: x[1])\n\treturn [val for i, val in d]", "id": "sample_472"}
{"input": "'scedvtvotkwqfoqn', 'o'", "output": "'scedvtvtkwqfqn'", "code": "def operation_to_perform(text, value):\n\tindexes = list()\n\tfor i in range(len(text)):\n\t\tif text[i] == value:\n\t\t\tindexes.append(i)\n\tnew_text = list(text)\n\tfor i in indexes:\n\t\tnew_text.remove(value)\n\treturn ''.join(new_text)", "id": "sample_473"}
{"input": "'#[)[]>[^e>\\n 8', -5", "output": "'#[)[]>[^e>\\n 8'", "code": "def operation_to_perform(txt, marker):\n\ta = []\n\tlines = txt.split('\\n')\n\tfor line in lines:\n\t\ta.append(line.center(marker))\n\treturn '\\n'.join(a)", "id": "sample_474"}
{"input": "[1], 0", "output": "1", "code": "def operation_to_perform(array, index):\n\tif index < 0:\n\t\tindex = len(array) + index\n\treturn array[index]", "id": "sample_475"}
{"input": "\"booty boot-boot bootclass\", 'k'", "output": "False", "code": "def operation_to_perform(a, split_on):\n\tt = a.split()\n\ta = []\n\tfor i in t:\n\t\tfor j in i:\n\t\t\ta.append(j)\n\tif split_on in a:\n\t\treturn True\n\telse:\n\t\treturn False", "id": "sample_476"}
{"input": "'|xduaisf'", "output": "('', 'xduaisf')", "code": "def operation_to_perform(text):\n\ttopic, sep, problem = text.rpartition('|')\n\tif problem == 'r':\n\t\tproblem = topic.replace('u', 'p')\n\treturn topic, problem", "id": "sample_477"}
{"input": "'meow meow'", "output": "{'m': 2, 'e': 2, 'o': 2, 'w': 2, ' ': 1}", "code": "def operation_to_perform(sb):\n\td = {}\n\tfor s in sb:\n\t\td[s] = d.get(s, 0) + 1\n\treturn d", "id": "sample_478"}
{"input": "[1, 5, 2, 3, 6], 2, 4", "output": "[1, 2, 3]", "code": "def operation_to_perform(nums, pop1, pop2):\n\tnums.pop(pop1 - 1)\n\tnums.pop(pop2 - 1)\n\treturn nums", "id": "sample_479"}
{"input": "'', 'mi', 'siast'", "output": "''", "code": "def operation_to_perform(s, c1, c2):\n\tif s == '':\n\t\treturn s\n\tls = s.split(c1)\n\tfor index, item in enumerate(ls):\n\t\tif c1 in item:\n\t\t\tls[index] = item.replace(c1, c2, 1)\n\treturn c1.join(ls)", "id": "sample_480"}
{"input": "[1, 1], 2, 3", "output": "[1, 1]", "code": "def operation_to_perform(values, item1, item2):\n\tif values[-1] == item2:\n\t\tif values[0] not in values[1:]:\n\t\t\tvalues.append(values[0])\n\telif values[-1] == item1:\n\t\tif values[0] == item2:\n\t\t\tvalues.append(values[0])\n\treturn values", "id": "sample_481"}
{"input": "'Because it intrigues them'", "output": "'Because it intrigues them'", "code": "def operation_to_perform(text):\n\treturn text.replace('\\\\\"', '\"')", "id": "sample_482"}
{"input": "'a', 'a'", "output": "' '", "code": "def operation_to_perform(text, char):\n\treturn ' '.join(text.split(char, len(text)))", "id": "sample_483"}
{"input": "['91', '16', '6r', '5r', 'egr', '', 'f', 'q1f', '-2']", "output": "[182, 32]", "code": "def operation_to_perform(arr):\n\tresult = []\n\tfor item in arr:\n\t\ttry:\n\t\t\tif item.isnumeric():\n\t\t\t\tresult.append(int(item)*2)\n\t\texcept ValueError:\n\t\t\tresult.append(item[::-1])\n\treturn result", "id": "sample_484"}
{"input": "'gsd avdropj'", "output": "'avdropj gsd  '", "code": "def operation_to_perform(tokens):\n\ttokens = tokens.split()\n\tif len(tokens) == 2:\n\t\ttokens = list(reversed(tokens))\n\tresult = ' '.join([tokens[0].ljust(5), tokens[1].ljust(5)])\n\treturn result", "id": "sample_485"}
{"input": "{1:1, 2:2, 3:3}", "output": "{1: 1, 2: 4, 3: 9}", "code": "def operation_to_perform(dic):\n\tdic_op = dic.copy()\n\tfor key, val in dic.items():\n\t\tdic_op[key] = val * val\n\treturn dic_op", "id": "sample_486"}
{"input": "{ 4: 'a' }", "output": "[4]", "code": "def operation_to_perform(dict):\n\teven_keys = []\n\tfor key in dict.keys():\n\t\tif key % 2 == 0:\n\t\t\teven_keys.append(key)\n\treturn even_keys", "id": "sample_487"}
{"input": "'tezmgvn 651h', '6'", "output": "'5ezmgvn 651h'", "code": "def operation_to_perform(text, char):\n\tcount = text.count(char)\n\tchars = list(text)\n\tif count > 0:\n\t\tindex = chars.index(char) + 1\n\t\tchars[:index:index+1] = [c for c in chars[index:index+count:1]]\n\treturn ''.join(chars)", "id": "sample_488"}
{"input": "'coscifysu', 'cos'", "output": "'cifysu'", "code": "def operation_to_perform(text, value):\n\treturn text.removeprefix(value.lower())", "id": "sample_489"}
{"input": " '\\ngiyixjkvu\\n\\r\\r \\frgjuo'", "output": "'\\n\\n\\r\\r \\x0c'", "code": "def operation_to_perform(s):\n\treturn ''.join([c for c in s if c.isspace()])", "id": "sample_490"}
{"input": "[4, 8, 8, 5]", "output": "[4, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5]", "code": "def operation_to_perform(xs):\n\tfor i in range(-1, -len(xs)-1, -1):\n\t\txs.extend([xs[i], xs[i]])\n\treturn xs", "id": "sample_491"}
{"input": "'abbkebaniuwurzvr', 'm'", "output": "'abbkebaniuwurzvr'", "code": "def operation_to_perform(text, value):\n\tls = list(text)\n\tif (ls.count(value)) % 2 == 0:\n\t\twhile value in ls:\n\t\t\tls.remove(value)\n\telse:\n\t\tls.clear()\n\treturn ''.join(ls)", "id": "sample_492"}
{"input": "{'-4':'4','1':'2','-':'-3'}", "output": "['-4 => 4', '1 => 2', '- => -3']", "code": "def operation_to_perform(d):\n\tkeys = []\n\tfor k in d:\n\t\tkeys.append('%s => %s' % (k, d[k]))\n\treturn keys", "id": "sample_493"}
{"input": "\"1\", 3", "output": "'001'", "code": "def operation_to_perform(num, l):\n\tt = \"\"\n\twhile l > len(num):\n\t\tt += '0'\n\t\tl -= 1\n\treturn t + num", "id": "sample_494"}
{"input": "'a1234\u00e5r'", "output": "('a1234', '\u00e5r')", "code": "def operation_to_perform(s):\n\tif str.isascii(s[-5:]):\n\t\treturn s[-5:], s[0:][:3]\n\telif str.isascii(s[:5]):\n\t\treturn s[:5], s[-5:][3:]\n\telse:\n\t\treturn s", "id": "sample_495"}
{"input": "'eftw{\u044c\u0422\u0441k_1', '\\\\'", "output": "0", "code": "def operation_to_perform(text, value):\n\tif isinstance(value, str):\n\t\treturn text.count(value) + text.count(value.lower())\n\treturn text.count(value)", "id": "sample_496"}
{"input": "44", "output": "['4', '4']", "code": "def operation_to_perform(n):\n\tb = list(str(n))\n\tfor i in range(2,len(b)): b[i] += '+'\n\treturn b", "id": "sample_497"}
{"input": "[2, 2, 2, 3, 3], 2, 3", "output": "[2, 2, 3, 2, 3, 3]", "code": "def operation_to_perform(nums, idx, added):\n\tnums[idx:idx] = (added,)\n\treturn nums", "id": "sample_498"}
{"input": "'magazine', 25, '.'", "output": "'.........magazine........'", "code": "def operation_to_perform(text, length, fillchar):\n\tsize = len(text)\n\treturn text.center(length, fillchar)", "id": "sample_499"}
{"input": "'dsj osq wi w', ' '", "output": "'d'", "code": "def operation_to_perform(text, delim):\n\treturn text[:text[::-1].find(delim)][::-1]", "id": "sample_500"}
{"input": "'qpfi jzm', 'j'", "output": "'jqjfj zm'", "code": "def operation_to_perform(text, char):\n\tindex = text.rindex(char)\n\tresult = list(text)\n\twhile index > 0:\n\t\tresult[index] = result[index-1]\n\t\tresult[index-1] = char\n\t\tindex -= 2\n\treturn ''.join(result)", "id": "sample_501"}
{"input": "'Fred Smith'", "output": "'Fred*Smith'", "code": "def operation_to_perform(name):\n\treturn '*'.join(name.split(' '))", "id": "sample_502"}
{"input": "{}", "output": "[]", "code": "def operation_to_perform(d):\n\tresult = [None] * len(d)\n\ta = b = 0\n\twhile d:\n\t\tresult[a] = d.popitem(a == b)\n\t\ta, b = b, (b+1) % len(result)\n\treturn result", "id": "sample_503"}
{"input": "[1, 1, 1, 1]", "output": "[1, 1, 1, 1]", "code": "def operation_to_perform(values):\n\tvalues.sort()\n\treturn values", "id": "sample_504"}
{"input": "'--4/0-209'", "output": "''", "code": "def operation_to_perform(string):\n\twhile string:\n\t\tif string[-1].isalpha():\n\t\t\treturn string\n\t\tstring = string[:-1]\n\treturn string", "id": "sample_505"}
{"input": "1", "output": "'snts'", "code": "def operation_to_perform(n):\n\tp = ''\n\tif n%2 == 1:\n\t\tp+='sn'\n\telse:\n\t\treturn n*n\n\tfor x in range(1, n+1):\n\t\tif x%2 == 0:\n\t\t\tp+='to'\n\t\telse:\n\t\t\tp+='ts'\n\treturn p", "id": "sample_506"}
{"input": "'car hat', 'car'", "output": "0", "code": "def operation_to_perform(text, search):\n\tresult = text.lower()\n\treturn result.find(search.lower())", "id": "sample_507"}
{"input": "'ertubwi', 'p', 5", "output": "'ertubwi'", "code": "def operation_to_perform(text, sep, maxsplit):\n\tsplitted = text.rsplit(sep, maxsplit)\n\tlength = len(splitted)\n\tnew_splitted = splitted[:length // 2]\n\tnew_splitted.reverse()\n\tnew_splitted += splitted[length // 2:]\n\treturn sep.join(new_splitted)", "id": "sample_508"}
{"input": "5, 1", "output": "'5'", "code": "def operation_to_perform(value, width):\n\tif value >= 0:\n\t\treturn str(value).zfill(width)\n\n\tif value < 0:\n\t\treturn '-' + str(-value).zfill(width)\n\treturn ''", "id": "sample_509"}
{"input": "{7: 'ii5p', 1: 'o3Jwus', 3: 'lot9L', 2: '04g', 9: 'Wjf', 8: '5b', 0: 'te6', 5: 'flLO', 6: 'jq', 4: 'vfa0tW'}, 4, 'Wy', 'Wy', 1.0", "output": "'Wy'", "code": "def operation_to_perform(a, b, c, d, e):\n\tkey = d\n\tif key in a:\n\t\tnum = a.pop(key)\n\tif b > 3:\n\t\treturn ''.join(c)\n\telse:\n\t\treturn num", "id": "sample_510"}
{"input": "('ct', 'c', 'ca'), {'ca': 'cx'}", "output": "{'ct': '', 'c': '', 'ca': 'cx'}", "code": "def operation_to_perform(fields, update_dict):\n\tdi = dict((x, '') for x in fields)\n\tdi.update(update_dict)\n\treturn di", "id": "sample_511"}
{"input": "'102'", "output": "False", "code": "def operation_to_perform(s):\n\treturn len(s) == s.count('0') + s.count('1')", "id": "sample_512"}
{"input": "[0, 2]", "output": "[]", "code": "def operation_to_perform(array):\n\twhile -1 in array:\n\t\tarray.pop(-3)\n\twhile 0 in array:\n\t\tarray.pop()\n\twhile 1 in array:\n\t\tarray.pop(0)\n\treturn array", "id": "sample_513"}
{"input": "'-stew---corn-and-beans-in soup-.-'", "output": "'stew---corn-and-beans-in soup-.'", "code": "def operation_to_perform(text):\n\tfor item in text.split():\n\t\ttext = text.replace('-{}'.format(item), ' ').replace('{}-'.format(item), ' ')\n\treturn text.strip('-')", "id": "sample_514"}
{"input": "[1, 2, 3, 4, 5]", "output": "[10, 8, 6, 4, 2]", "code": "def operation_to_perform(array):\n\tresult = array.copy()\n\tresult.reverse()\n\tresult[:] = [item * 2 for item in result]\n\treturn result", "id": "sample_515"}
{"input": "['condor', 'eyes', 'gay', 'isa' ], 'd'", "output": "[]", "code": "def operation_to_perform(strings, substr):\n\tlist = [s for s in strings if s.startswith(substr)]\n\treturn sorted(list, key=len)", "id": "sample_516"}
{"input": "'SzHjifnzog'", "output": "'SzHjifnzo'", "code": "def operation_to_perform(text):\n\tfor i in range(len(text)-1, 0, -1):\n\t\tif not text[i].isupper():\n\t\t\treturn text[0:i]\n\treturn ''", "id": "sample_517"}
{"input": "'the speed is -36 miles per hour'", "output": "True", "code": "def operation_to_perform(text):\n\treturn not text.isdecimal()", "id": "sample_518"}
{"input": "{}", "output": "{1: False, 2: 0}", "code": "def operation_to_perform(d):\n\td['luck'] = 42\n\td.clear()\n\treturn {1: False, 2 :0}", "id": "sample_519"}
{"input": "[6]", "output": "6", "code": "def operation_to_perform(album_sales):\n\twhile len(album_sales) != 1:\n\t\talbum_sales.append(album_sales.pop(0))\n\treturn album_sales[0]", "id": "sample_520"}
{"input": "[43, 0, 4, 77, 5, 2, 0, 9, 77]", "output": "[77, 9, 0, 2, 5, 77, 4, 0, 43]", "code": "def operation_to_perform(nums):\n\tm = max(nums)\n\tfor i in range(m):\n\t\tnums.reverse()\n\treturn nums", "id": "sample_521"}
{"input": "range(100, 120)", "output": "[]", "code": "def operation_to_perform(numbers):\n\tfloats = [n % 1 for n in numbers]\n\treturn floats if 1 in floats else []", "id": "sample_522"}
{"input": "'   '", "output": "'&nbsp;&nbsp;&nbsp;'", "code": "def operation_to_perform(text):\n\ttext = list(text)\n\tfor i in range(len(text)-1, -1, -1):\n\t\tif text[i].isspace():\n\t\t\ttext[i] = '&nbsp;'\n\treturn ''.join(text)", "id": "sample_523"}
{"input": "{2: 5, 4: 1, 3: 5, 1: 3, 5: 1}", "output": "{2: 1, 4: 3, 3: 2, 1: 0, 5: 1}", "code": "def operation_to_perform(dict0):\n\tnew = dict0.copy()\n\tfor i in range(len(new)-1):\n\t\tdict0[sorted(new)[i]] = i\n\treturn dict0", "id": "sample_524"}
{"input": "{'TEXT': 7, 'CODE': 3}, 7, 3", "output": "('TEXT', 'CODE')", "code": "def operation_to_perform(c, st, ed):\n\td = {}\n\ta, b = 0, 0\n\tfor x, y in c.items():\n\t\td[y] = x\n\t\tif y == st:\n\t\t\ta = x\n\t\tif y == ed:\n\t\t\tb = x\n\tw = d[st]\n\treturn (w, b) if a > b else (b, w)", "id": "sample_525"}
{"input": "'ekwies', 's', 'rpg', 1", "output": "'rpg'", "code": "def operation_to_perform(label1, char, label2, index):\n\tm = label1.rindex(char)\n\tif m >= index:\n\t\treturn label2[:m - index + 1]\n\treturn label1 + label2[index - m - 1:]", "id": "sample_526"}
{"input": "\"!?\", \"\"", "output": "'!?'", "code": "def operation_to_perform(text, value):\n\treturn text.ljust(len(value), \"?\")", "id": "sample_527"}
{"input": "'papeluchis'", "output": "2", "code": "def operation_to_perform(s):\n\tb = ''\n\tc = ''\n\tfor i in s:\n\t\tc = c + i\n\t\tif s.rfind(c) > -1:\n\t\t\treturn s.rfind(c)\n\treturn 0", "id": "sample_528"}
{"input": "[1, 2, 3]", "output": "[1, 2, 3]", "code": "def operation_to_perform(array):\n\tprev = array[0]\n\tnewArray = array[:]\n\tfor i in range(1, len(array)):\n\t\tif prev != array[i]:\n\t\t\tnewArray[i] = array[i]\n\t\telse:\n\t\t\tdel newArray[i]\n\t\tprev = array[i]\n\treturn newArray", "id": "sample_529"}
{"input": "\"@@@ff\", '@'", "output": "'ff'", "code": "def operation_to_perform(s, ch):\n\tsl = s\n\tif ch in s:\n\t\tsl = s.lstrip(ch)\n\t\tif len(sl) == 0:\n\t\t\tsl = sl + '!?'\n\telse:\n\t\treturn 'no'\n\treturn sl", "id": "sample_530"}
{"input": "\"Ibaskdjgblw asdl \", \"djgblw\"", "output": "'djgblw asdl '", "code": "def operation_to_perform(text, x):\n\tif text.removeprefix(x) == text:\n\t\treturn operation_to_perform(text[1:], x)\n\telse:\n\t\treturn text", "id": "sample_531"}
{"input": "1, [1, 2, 3]", "output": "[[1, 2, 3], [1, 2, 3, 1, 2, 3]]", "code": "def operation_to_perform(n, array):\n\tfinal = [array.copy()] \n\tfor i in range(n):\n\t\tarr = array.copy()\n\t\tarr.extend(final[-1])\n\t\tfinal.append(arr)\n\treturn final", "id": "sample_532"}
{"input": "'a', {}", "output": "0", "code": "def operation_to_perform(query, base):\n\tnet_sum = 0\n\tfor (key, val) in base.items():\n\t\tif key[0] == query and len(key) == 3:\n\t\t\tnet_sum -= val\n\t\telif key[-1] == query and len(key) == 3:\n\t\t\tnet_sum += val\n\treturn net_sum", "id": "sample_533"}
{"input": "'hosu', 'o'", "output": "'hosu'", "code": "def operation_to_perform(sequence, value):\n\ti = max(sequence.index(value) - len(sequence) // 3, 0)\n\tresult = ''\n\tfor j, v in enumerate(sequence[i:]):\n\t\tif v == '+':\n\t\t\tresult += value\n\t\telse:\n\t\t\tresult += sequence[i + j]\n\treturn result", "id": "sample_534"}
{"input": "1341240312", "output": "False", "code": "def operation_to_perform(n):\n\tfor n in str(n):\n\t\tif n not in \"012\" and n not in list(range(5, 10)):\n\t\t\treturn False\n\treturn True", "id": "sample_535"}
{"input": "'C24Bxxx982ab'", "output": "5", "code": "def operation_to_perform(cat):\n\tdigits = 0\n\tfor char in cat:\n\t\tif char.isdigit():\n\t\t\tdigits += 1\n\treturn digits", "id": "sample_536"}
{"input": "'abv', 'a'", "output": "'[4]'", "code": "def operation_to_perform(text, value):\n\tnew_text = list(text)\n\ttry:\n\t\tnew_text.append(value)\n\t\tlength = len(new_text)\n\texcept IndexError:\n\t\tlength = 0\n\treturn '[' + str(length) + ']'", "id": "sample_537"}
{"input": "'0574', 9", "output": "'zzz0574zz'", "code": "def operation_to_perform(text, width):\n\treturn text[:width].center(width, 'z')", "id": "sample_538"}
{"input": "[]", "output": "['']", "code": "def operation_to_perform(array):\n\tc = array\n\tarray_copy = array\n\n\twhile True:\n\t\tc.append('_')\n\t\tif c == array_copy:\n\t\t\tarray_copy[c.index('_')] = ''\n\t\t\tbreak\n        \n\treturn array_copy", "id": "sample_539"}
{"input": "[5, 5, 5, 6, 4, 9]", "output": "[5, 5, 5, 5, 5, 5, 6, 4, 9, 5]", "code": "def operation_to_perform(a):\n\tb = a.copy()\n\tfor k in range(0, len(a) - 1, 2):\n\t\tb.insert(k + 1, b[k])\n\tb.append(b[0])\n\treturn b", "id": "sample_540"}
{"input": "' \\t  \\u3000'", "output": "True", "code": "def operation_to_perform(text):\n\treturn ''.join(list(text)).isspace()", "id": "sample_541"}
{"input": "'ab cd', 'x', 2", "output": "['ab cd']", "code": "def operation_to_perform(test, sep, maxsplit):\n\ttry:\n\t\treturn test.rsplit(sep, maxsplit)\n\texcept:\n\t\treturn test.rsplit()", "id": "sample_542"}
{"input": "'.,,,,,. \u0645\u0646\u0628\u062a'", "output": "'.,,,,, , \u0645\u0646\u0628\u062a'", "code": "def operation_to_perform(item):\n\tmodified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ')\n\treturn modified[0].upper() + modified[1:]", "id": "sample_543"}
{"input": "\"\\t\\t\\ttab tab tabulates\"", "output": "'            tab tab tabulates'", "code": "def operation_to_perform(text):\n\ta = text.split('\\n')\n\tb = []\n\tfor i in range(len(a)):\n\t\tc = a[i].replace('\\t', '    ')\n\t\tb.append(c)\n\treturn '\\n'.join(b)", "id": "sample_544"}
{"input": "[8, 8, -4, -9, 2, 8, -1, 8]", "output": "[8, -1, 8]", "code": "def operation_to_perform(array):\n\tresult = []\n\tindex = 0\n\twhile index < len(array):\n\t\tresult.append(array.pop())\n\t\tindex += 2\n\treturn result", "id": "sample_545"}
{"input": "'[CHARRUNNERS]Do you know who the other was? [NEGMENDS]', '[CHARRUNNERS]'", "output": "'Do you know who the other was? [NEGMENDS]'", "code": "def operation_to_perform(text, speaker):\n\twhile text.startswith(speaker):\n\t\ttext = text[len(speaker):]\n\treturn text", "id": "sample_546"}
{"input": "\"h,e,l,l,o,wo,r,ld,\"", "output": "'h,e,l,l,o,wo,r,ld'", "code": "def operation_to_perform(letters):\n\tletters_only = letters.strip(\"., !?*\")\n\treturn \"....\".join(letters_only.split(\" \"))", "id": "sample_547"}
{"input": "'spider', 'ed'", "output": "'spider'", "code": "def operation_to_perform(text, suffix):\n\tif suffix and text and text.endswith(suffix):\n\t\treturn text.removesuffix(suffix)\n\telse:\n\t\treturn text", "id": "sample_548"}
{"input": "[[1, 1, 1, 1]]", "output": "[[1, 1, 1, 1]]", "code": "def operation_to_perform(matrix):\n\tmatrix.reverse()\n\tresult = []\n\tfor primary in matrix:\n\t\tmax(primary)\n\t\tprimary.sort(reverse = True)\n\t\tresult.append(primary)\n\treturn result", "id": "sample_549"}
{"input": "[1, 2, 4]", "output": "[1, 1, 1, 1, 2, 4]", "code": "def operation_to_perform(nums):\n\tfor i in range(len(nums)):\n\t\tnums.insert(i, nums[i]**2)\n\treturn nums", "id": "sample_550"}
{"input": "{'inf': ['a', 'b'], 'a': [\"inf\", \"c\"], 'd': [\"inf\"]}", "output": "['a', 'b', 'c', 'inf']", "code": "def operation_to_perform(data):\n\tmembers = []\n\tfor item in data:\n\t\tfor member in data[item]:\n\t\t\tif member not in members:\n\t\t\t\tmembers.append(member)\n\treturn sorted(members)", "id": "sample_551"}
{"input": "{2: 0.76, 5: [3, 6, 9, 12]}", "output": "{2: 0.76, 5: [3, 6, 9, 12]}", "code": "def operation_to_perform(d):\n\tresult = {}\n\tfor k, v in d.items():\n\t\tif isinstance(k, float):\n\t\t\tfor i in v:\n\t\t\t\tresult[i] = k\n\t\telse:\n\t\t\tresult[k] = v\n\treturn result", "id": "sample_552"}
{"input": "'439m2670hlsw', 3", "output": "'wslh0762m934'", "code": "def operation_to_perform(text, count):\n\tfor i in range(count):\n\t\ttext = text[::-1]\n\treturn text", "id": "sample_553"}
{"input": "[2, 0, 1, 9999, 3, -5]", "output": "[-5, 3, 9999, 1, 0, 2]", "code": "def operation_to_perform(arr):\n\treturn list(reversed(arr))", "id": "sample_554"}
{"input": "\"odes\\tcode\\twell\", 2", "output": "'odes  code  well'", "code": "def operation_to_perform(text, tabstop):\n\ttext = text.replace('\\n', '_____')\n\ttext = text.replace('\\t', tabstop * ' ')\n\ttext = text.replace('_____', '\\n')\n\treturn text", "id": "sample_555"}
{"input": "'\\n\\n\\t\\tz\\td\\ng\\n\\t\\t\\te'", "output": "'\\n\\n        z   d\\ng\\n            e'", "code": "def operation_to_perform(text):\n\tfor i in range(len(text)):\n\t\tif text[i] == ' ':\n\t\t\ttext = text.replace(' ', '\\t', 1)\n\treturn text.expandtabs(4)", "id": "sample_556"}
{"input": "'xxxarmmarxx'", "output": "'xxxarmm ar xx'", "code": "def operation_to_perform(str):\n\td = str.rpartition('ar')\n\treturn ' '.join((d[0], d[1], d[2]))", "id": "sample_557"}
{"input": "[3, 1, 2, 1, 4, 1], [1]", "output": "False", "code": "def operation_to_perform(nums, mos):\n\tfor num in mos:\n\t\tnums.pop(nums.index(num))\n\tnums.sort()\n\tfor num in mos:\n\t\tnums += [num]\n\tfor i in range(len(nums)-1):\n\t\tif nums[i] > nums[i+1]:\n\t\t\treturn False\n\treturn True", "id": "sample_558"}
{"input": "\"first-second-third\"", "output": "'f.irst_second_third'", "code": "def operation_to_perform(n):\n\tn = str(n)\n\treturn n[0] + '.'+n[1:].replace('-', '_')", "id": "sample_559"}
{"input": "\"591237865\"", "output": "0", "code": "def operation_to_perform(text):\n\tx = 0\n\tif text.islower():\n\t\tfor c in text:\n\t\t\tif int(c) in list(range(90)):\n\t\t\t\tx+=1\n\treturn x", "id": "sample_560"}
{"input": "'7Ljnw4Lj', '7'", "output": "7", "code": "def operation_to_perform(text, digit):\n\t#different than previous? Just count instances digit\n\tcount = text.count(digit)\n\treturn int(digit) * count", "id": "sample_561"}
{"input": "'VTBAEPJSLGAHINS'", "output": "True", "code": "def operation_to_perform(text):\n\treturn text.upper() == str(text)", "id": "sample_562"}
{"input": "'jivespdcxc', 'sx'", "output": "2", "code": "def operation_to_perform(text1, text2):\n\tnums = []\n\tfor i in range(len(text2)):\n\t\tnums.append(text1.count(text2[i]))\n\treturn sum(nums)", "id": "sample_563"}
{"input": "[[395, 666, 7, 4], [], [4223, 111]]", "output": "[395, 666, 7, 4]", "code": "def operation_to_perform(lists):\n\tlists[1].clear()\n\tlists[2] += lists[1]\n\treturn lists[0]", "id": "sample_564"}
{"input": "\"qsqgijwmmhbchoj\"", "output": "13", "code": "def operation_to_perform(text):\n\treturn max(text.find(ch) for ch in 'aeiou')", "id": "sample_565"}
{"input": "\"towaru\", \"UTF-8\"", "output": "'towaru'", "code": "def operation_to_perform(string, code):\n\tt = ''\n\ttry:\n\t\tt = string.encode(code)\n\t\tif t.endswith(b'\\n'):\n\t\t\tt = t[:-1]\n\t\tt = t.decode('UTF-8')\n\t\treturn t\n\texcept:\n\t\treturn t", "id": "sample_566"}
{"input": "'one two three four five', 3", "output": "['one', 'two', 'three_four_five']", "code": "def operation_to_perform(s, n):\n\tls = s.rsplit()\n\tout = []\n\twhile len(ls) >= n:\n\t\tout += ls[-n:]\n\t\tls = ls[:-n]\n\treturn ls + ['_'.join(out)]", "id": "sample_567"}
{"input": "'bwmm7h'", "output": "'mhbwm'", "code": "def operation_to_perform(num):\n\tletter = 1\n\tfor i in '1234567890':\n\t\tnum = num.replace(i,'')\n\t\tif len(num) == 0: break\n\t\tnum = num[letter:] + num[:letter]\n\t\tletter += 1\n\treturn num", "id": "sample_568"}
{"input": "\"11 1 1\"", "output": "6", "code": "def operation_to_perform(txt):\n\tcoincidences = {}\n\tfor c in txt:\n\t\tif c in coincidences:\n\t\t\tcoincidences[c] += 1\n\t\telse:\n\t\t\tcoincidences[c] = 1\n\treturn sum(coincidences.values())", "id": "sample_569"}
{"input": "[2], 0, 2", "output": "[2, 1, 2]", "code": "def operation_to_perform(array, index, value):\n\tarray.insert(0, index + 1)\n\tif value >= 1:\n\t\tarray.insert(index, value)\n\treturn array", "id": "sample_570"}
{"input": "r'a\\tb', 4", "output": "'a\\\\tb'", "code": "def operation_to_perform(input_string, spaces):\n\treturn input_string.expandtabs(spaces)", "id": "sample_571"}
{"input": "{1: 9, 2: 10, 3: 1}, 1", "output": "[(2, 10), (3, 1), ((3, 1), None), ((2, 10), None)]", "code": "def operation_to_perform(data, num):\n\tnew_dict = {}\n\ttemp = list(data.items())\n\tfor i in range(len(temp) - 1, num - 1, -1):\n\t\tnew_dict[temp[i]] = None\n\treturn temp[num:] + list(new_dict.items())", "id": "sample_572"}
{"input": "\"Vipra\", \"via\"", "output": "'Vipra'", "code": "def operation_to_perform(string, prefix):\n\tif string.startswith(prefix):\n\t\treturn string.removeprefix(prefix)\n\treturn string", "id": "sample_573"}
{"input": "['George', 'Michael', 'George', 'Costanza']", "output": "'Costanza'", "code": "def operation_to_perform(simpons):\n\twhile simpons:\n\t\tpop = simpons.pop()\n\t\tif pop == pop.title():\n\t\t\treturn pop\n\treturn pop", "id": "sample_574"}
{"input": "[10, 4], 3", "output": "42", "code": "def operation_to_perform(nums, val):\n\tnew_list = []\n\t[new_list.extend([i] * val) for i in nums]\n\treturn sum(new_list)", "id": "sample_575"}
{"input": "[1, 2, 3], -1", "output": "['x', -2, -1, -6]", "code": "def operation_to_perform(array, const):\n\toutput = ['x']\n\tfor i in range(1, len(array) + 1):\n\t\tif i % 2 != 0:\n\t\t\toutput.append(array[i - 1] * -2)\n\t\telse:\n\t\t\toutput.append(const)\n\treturn output", "id": "sample_576"}
{"input": "[(1, 'pos')]", "output": "[{}]", "code": "def operation_to_perform(items):\n\tresult = []\n\tfor number in items:\n\t\td = dict(items).copy()\n\t\td.popitem()\n\t\tresult.append(d)\n\t\titems = d\n\treturn result", "id": "sample_577"}
{"input": "{'R': 0, 'T': 3, 'F': -6, 'K': 0}", "output": "{'R': 0, 'T': -3, 'F': -6, 'K': 0}", "code": "def operation_to_perform(obj):\n\tfor k, v in obj.items():\n\t\tif v >= 0:\n\t\t\tobj[k] = -v\n\treturn obj", "id": "sample_578"}
{"input": "''", "output": "''", "code": "def operation_to_perform(text):\n\tif text.istitle():\n\t\tif len(text) > 1 and text.lower() != text:\n\t\t\treturn text[0].lower() + text[1:]\n\telif text.isalpha():\n\t\treturn text.capitalize()\n\treturn text", "id": "sample_579"}
{"input": "'rvr', 'r'", "output": "[0, 1]", "code": "def operation_to_perform(text, char):\n\tnew_text = text\n\ta = []\n\twhile char in new_text:\n\t\ta.append(new_text.index(char))\n\t\tnew_text = new_text.replace(char,\"\",1)\n\treturn a", "id": "sample_580"}
{"input": "'akoon', 'sXo'", "output": "'akoXoosn'", "code": "def operation_to_perform(text, sign):\n\tlength = len(text)\n\tnew_text = list(text)\n\tsign = list(sign)\n\tfor i in range(len(sign)):\n\t\tnew_text.insert((i * length - 1) // 2 + (i + 1) // 2, sign[i])\n\treturn ''.join(new_text)", "id": "sample_581"}
{"input": "7, 5", "output": "[5, 5, 5, 5, 5, 5, 5]", "code": "def operation_to_perform(k, j):\n\tarr = []\n\tfor i in range(k):\n\t\tarr.append(j)\n\treturn arr", "id": "sample_582"}
{"input": "\"t\\nza\\na\", \"t\"", "output": "'t\\nZA\\nA'", "code": "def operation_to_perform(text, ch):\n\tresult = []\n\tfor line in text.splitlines():\n\t\tif len(line) > 0 and line[0] == ch:\n\t\t\tresult.append(line.lower())\n\t\telse:\n\t\t\tresult.append(line.upper())\n\treturn \"\\n\".join(result)", "id": "sample_583"}
{"input": "\"5123807309875480094949830\"", "output": "'5123807309875480094949830'", "code": "def operation_to_perform(txt):\n\treturn txt.format(*('0'*20,))", "id": "sample_584"}
{"input": "';,,,?'", "output": "',,,?'", "code": "def operation_to_perform(text):\n\tcount = text.count(text[0])\n\tls = list(text)\n\tfor _ in range(count):\n\t\tls.remove(ls[0])\n\treturn ''.join(ls)", "id": "sample_585"}
{"input": "\"breakfast\", \"e\"", "output": "2", "code": "def operation_to_perform(text, char):\n\treturn text.rindex(char)", "id": "sample_586"}
{"input": "[0, 1, 1, 2], 'abcca'", "output": "{0: 'abcca', 1: 'abcca', 2: 'abcca'}", "code": "def operation_to_perform(nums, fill):\n\tans = dict.fromkeys(nums, fill)\n\treturn ans", "id": "sample_587"}
{"input": "['''1''', '+', '-', '**', '//', '*', '+'], '**'", "output": "3", "code": "def operation_to_perform(items, target):\n\tif target in items:\n\t\treturn items.index(target)\n\treturn -1", "id": "sample_588"}
{"input": "[-70, 20, 9, 1]", "output": "[-70, 20, 9, 1, 1]", "code": "def operation_to_perform(num):\n\tnum.append(num[-1])\n\treturn num", "id": "sample_589"}
{"input": "\"25000   $\"", "output": "'5000   $'", "code": "def operation_to_perform(text):\n\tfor i in range(10, 0, -1):\n\t\ttext = text.lstrip(str(i))\n\treturn text", "id": "sample_590"}
{"input": "[6, 3, 0, 7, 4, 8]", "output": "([0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 6, 7, 8, 9])", "code": "def operation_to_perform(arr): \n\tcounts = [0] * 9 \n\tans = [] \n\tfor ele in arr: counts[ele - 1] += 1 \n\tfor i in range(len(counts)): \n\t\twhile counts[i] > 0: \n\t\t\tcounts[i] -= 1 \n\t\t\tans.append(i + 1)\n\treturn counts, ans", "id": "sample_591"}
{"input": "[11, 3]", "output": "[3, 11]", "code": "def operation_to_perform(numbers):\n\tnew_numbers = []\n\tfor i, _ in enumerate(numbers):\n\t\tnew_numbers.append(numbers[len(numbers)-1-i])\n\treturn new_numbers", "id": "sample_592"}
{"input": "[], 14", "output": "[]", "code": "def operation_to_perform(nums, n):\n\tpos = len(nums) - 1\n\tfor i in range(-len(nums), 0):\n\t\tnums.insert(pos, nums[i])\n\treturn nums", "id": "sample_593"}
{"input": "\"n wez szize lnson tilebi it 504n.\\n\"", "output": "33", "code": "def operation_to_perform(file):\n\treturn file.index('\\n')", "id": "sample_594"}
{"input": "'qdhstudentamxupuihbuztn', 'jdm'", "output": "'Qdhstudentamxupuihbuztn'", "code": "def operation_to_perform(text, prefix):\n\tif text.startswith(prefix):\n\t\ttext = text.removeprefix(prefix)\n\ttext = text.capitalize()\n\treturn text", "id": "sample_595"}
{"input": "['8', '9', '7', '4', '3', '2'], '9'", "output": "['2', '3', '4', '7', '8', '9']", "code": "def operation_to_perform(txt, alpha):\n\ttxt = sorted(txt)\n\tif txt.index(alpha) % 2 == 0:\n\t\treturn txt[::-1]\n\treturn txt", "id": "sample_596"}
{"input": "\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\"", "output": "'JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1'", "code": "def operation_to_perform(s):\n\treturn s.upper()", "id": "sample_597"}
{"input": "'abc', 1", "output": "''", "code": "def operation_to_perform(text, n):\n\tlength = len(text)\n\treturn text[length*(n%4):length ]", "id": "sample_598"}
{"input": "[\"a\", \"b\", \"c\"], \" \"", "output": "['a', ' b c', 'b c', '', 'c', '']", "code": "def operation_to_perform(a, b):\n\ta = b.join(a)\n\tlst = []\n\tfor i in range(1, len(a)+1, 2):\n\t\tlst.append(a[i-1:][:i])\n\t\tlst.append(a[i-1:][i:])\n\treturn lst", "id": "sample_599"}
{"input": "[]", "output": "[]", "code": "def operation_to_perform(array):\n\tjust_ns = list(map(lambda num: 'n'*num, array))\n\tfinal_output = []\n\tfor wipe in just_ns:\n\t\tfinal_output.append(wipe)\n\treturn final_output", "id": "sample_600"}
{"input": "'csharp'", "output": "'ccccc sssss hhhhh AAAAA rrrrr ppppp'", "code": "def operation_to_perform(text):\n\tt = 5\n\ttab = []\n\tfor i in text:\n\t\tif i.lower() in 'aeiouy':\n\t\t\ttab.append(i.upper() * t)\n\t\telse:\n\t\t\ttab.append(i * t)\n\treturn ' '.join(tab)", "id": "sample_601"}
{"input": "[1, 1], 1", "output": "4", "code": "def operation_to_perform(nums, target):\n\tcnt = nums.count(target)\n\treturn cnt * 2", "id": "sample_602"}
{"input": "'not numbers'", "output": "'not oscillating'", "code": "def operation_to_perform(sentences):\n\tif all([sentence.isdecimal() for sentence in sentences.split('.')]):\n\t\treturn 'oscillating' \n\telse:\n\t\treturn 'not oscillating'", "id": "sample_603"}
{"input": "\"Hello world\", \"Hello\"", "output": "True", "code": "def operation_to_perform(text, start):\n\treturn text.startswith(start)", "id": "sample_604"}
{"input": "[2, 5, 1, 7, 9, 3]", "output": "'quack'", "code": "def operation_to_perform(nums):\n\tnums.clear()\n\treturn \"quack\"", "id": "sample_605"}
{"input": "'ruam'", "output": "'ruamNHIB'", "code": "def operation_to_perform(value):\n\tls = list(value)\n\tls.append('NHIB')\n\treturn ''.join(ls)", "id": "sample_606"}
{"input": "'. C.'", "output": "True", "code": "def operation_to_perform(text):\n\tfor i in ['.', '!', '?']:\n\t\tif text.endswith(i):\n\t\t\treturn True\n\treturn False", "id": "sample_607"}
{"input": "{1:1, 2:2, 3:3}", "output": "{1: 1, 2: 2, 3: 3}", "code": "def operation_to_perform(aDict):\n\t# transpose the keys and values into a new dict\n\treturn dict([v for v in aDict.items()])", "id": "sample_608"}
{"input": "{}, 1", "output": "{}", "code": "def operation_to_perform(array, elem):\n\tresult = array.copy()\n\twhile result:\n\t\tkey, value = result.popitem()\n\t\tif elem == key or elem == value:\n\t\t\tresult.update(array)\n\t\tdel result[key]\n\treturn result", "id": "sample_609"}
{"input": "[1, 2, 1, 1], 3", "output": "{}", "code": "def operation_to_perform(keys, value):\n\td = dict.fromkeys(keys, value)\n\tfor i, k in enumerate(d.copy(), 1):\n\t\tif d[k] == d[i]:\n\t\t\tdel d[i]\n\treturn d", "id": "sample_610"}
{"input": "[-6, -2, 1, -3, 0, 1]", "output": "[1, 0, -3, 1, -2, -6]", "code": "def operation_to_perform(nums):\n\tnums[:] = nums[::-1]\n\treturn nums", "id": "sample_611"}
{"input": "{'a': 42, 'b': 1337, 'c': -1, 'd': 5}", "output": "{'a': 42, 'b': 1337, 'c': -1, 'd': 5}", "code": "def operation_to_perform(d):\n\treturn dict(d.items())", "id": "sample_612"}
{"input": "'eat!'", "output": "'e!t!'", "code": "def operation_to_perform(text):\n\tresult = ''\n\tmid = (len(text) - 1) // 2\n\tfor i in range(mid):\n\t\tresult += text[i]\n\tfor i in range(mid, len(text)-1):\n\t\tresult += text[mid + len(text) - 1 - i]\n\treturn result.ljust(len(text), text[-1])", "id": "sample_613"}
{"input": "'zjegiymjc', 'j', 2", "output": "-1", "code": "def operation_to_perform(text, substr, occ):\n\tn = 0\n\twhile True:\n\t\ti = text.rfind(substr)\n\t\tif i == -1:\n\t\t\tbreak\n\t\telif n == occ:\n\t\t\treturn i\n\t\telse:\n\t\t\tn += 1\n\t\t\ttext = text[:i]\n\treturn -1", "id": "sample_614"}
{"input": "[-1, 12, -6, -2], -1", "output": "1", "code": "def operation_to_perform(in_list, num):\n\tin_list.append(num)\n\treturn in_list.index(max(in_list[:-1]))", "id": "sample_615"}
{"input": "'\\n\\ny\\n'", "output": "'[\\n][\\n][y]\\n'", "code": "def operation_to_perform(body):\n\tls = list(body)\n\tdist = 0\n\tfor i in range(0, len(ls) - 1):\n\t\tif ls[i - 2 if i - 2 >= 0 else 0] == '\\t':\n\t\t\tdist += (1 + ls[i - 1].count('\\t')) * 3\n\t\tls[i] = '[' + ls[i] + ']'\n\treturn ''.join(ls).expandtabs(4 + dist)", "id": "sample_616"}
{"input": "\"<<<<\"", "output": "'ascii'", "code": "def operation_to_perform(text):\n\tif text.isascii():\n\t\treturn 'ascii'\n\telse:\n\t\treturn 'non ascii'", "id": "sample_617"}
{"input": "'9', '8', 2", "output": "'89'", "code": "def operation_to_perform(match, fill, n):\n\treturn fill[:n] + match", "id": "sample_618"}
{"input": "'   Rock   Paper   SCISSORS  '", "output": "'   rock   paper   scissors  '", "code": "def operation_to_perform(title):\n\treturn title.lower()", "id": "sample_619"}
{"input": "\"lert dna ndqmxohi3\"", "output": "'3 i h o x m q d n   a n d   t r e l'", "code": "def operation_to_perform(x):\n\treturn \" \".join(list(x)[::-1])", "id": "sample_620"}
{"input": "'13:45:56', 'shift_jis'", "output": "b'13:45:56'", "code": "def operation_to_perform(text, encoding):\n\ttry:\n\t\treturn text.encode(encoding)\n\texcept LookupError:\n\t\treturn str(LookupError)", "id": "sample_621"}
{"input": "'galgu'", "output": "', g, a, l, g, u, '", "code": "def operation_to_perform(s):\n\tleft, sep, right = s.rpartition('.')\n\tnew = sep.join([right, left])\n\t_, sep, _ = new.rpartition('.')\n\treturn new.replace(sep, ', ')", "id": "sample_622"}
{"input": "'hi~!', ['~', '`', '!', '&']", "output": "'HI~'", "code": "def operation_to_perform(text, rules):\n\tfor rule in rules:\n\t\tif rule == '@':\n\t\t\ttext = text[::-1]\n\t\telif rule == '~':\n\t\t\ttext = text.upper()\n\t\telif text and text[len(text)-1] == rule:\n\t\t\ttext = text[0:len(text)-1]\n\treturn text", "id": "sample_623"}
{"input": "'llomnrpc', 'x'", "output": "'xllomnrpc'", "code": "def operation_to_perform(text, char):\n\tchar_index = text.find(char)\n\tresult = []\n\tif char_index > 0:\n\t\tresult = list(text[:char_index])\n\tresult.extend(list(char)+list(text[char_index+len(char):]))\n\treturn ''.join(result)", "id": "sample_624"}
{"input": "\"bwiajegrwjd??djoda,?\"", "output": "4", "code": "def operation_to_perform(text):\n\tcount = 0\n\tfor i in text:\n\t\tif i in '.?!.,':\n\t\t\tcount += 1\n\treturn count", "id": "sample_625"}
{"input": "'abab', [('a', 'b'), ('b', 'a')]", "output": "'baba'", "code": "def operation_to_perform(line, equalityMap):\n\trs = {\n\t\tk[0]: k[1] for k in equalityMap\n\t}\n\treturn line.translate(str.maketrans(rs))", "id": "sample_626"}
{"input": "[('u', 1), ('s', 7), ('u', -5)]", "output": "[-5, 7]", "code": "def operation_to_perform(parts):\n\treturn list(dict(parts).values())", "id": "sample_627"}
{"input": "[4, 5, 3, 6, 1], 5", "output": "[4, 3, 6, 1]", "code": "def operation_to_perform(nums, delete):\n\tnums.remove(delete)\n\treturn nums", "id": "sample_628"}
{"input": "'catNG', 'NG'", "output": "'cat'", "code": "def operation_to_perform(text, dng):\n\tif dng not in text:\n\t\treturn text\n\tif text[-len(dng):] == dng:\n\t\treturn text[:-len(dng)]\n\treturn text[:-1] + operation_to_perform(text[:-2], dng)", "id": "sample_629"}
{"input": "{1: -9, 0: -7}, {1: 2, 0: 3}", "output": "{1: -9, 0: -7, 2: 1, 3: 0}", "code": "def operation_to_perform(original, string):\n\ttemp = dict(original)\n\tfor a, b in string.items():\n\t\ttemp[b] = a\n\treturn temp", "id": "sample_630"}
{"input": "'a', 19", "output": "'*'", "code": "def operation_to_perform(text, num):\n\treq = num - len(text)\n\ttext = text.center(num, '*')\n\treturn text[:req // 2: -req // 2]", "id": "sample_631"}
{"input": "[63, 0, 1, 5, 9, 87, 0, 7, 25, 4]", "output": "[0, 0, 1, 4, 5, 7, 9, 25, 63, 87]", "code": "def operation_to_perform(list):\n\tfor i in range(len(list) - 1, 0, -1):\n\t\tfor j in range(i):\n\t\t\tif list[j] > list[j + 1]:\n\t\t\t\tlist[j], list[j + 1] = list[j + 1], list[j]\n\t\t\t\tlist.sort()\n\treturn list", "id": "sample_632"}
{"input": "[5, -3, 3, 2], 2", "output": "0", "code": "def operation_to_perform(array, elem):\n\tarray.reverse()\n\ttry:\n\t\tfound = array.index(elem)\n\tfinally:\n\t\tarray.reverse()\n\treturn found", "id": "sample_633"}
{"input": "'biec'", "output": "'biec'", "code": "def operation_to_perform(input_string):\n\ttable = str.maketrans('aioe', 'ioua')\n\twhile 'a' in input_string or 'A' in input_string:\n\t\tinput_string = input_string.translate(table)\n\treturn input_string", "id": "sample_634"}
{"input": "\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\"", "output": "False", "code": "def operation_to_perform(text):\n\tvalid_chars = ['-', '_', '+', '.', '/', ' ']\n\ttext = text.upper()\n\tfor char in text:\n\t\tif char.isalnum() == False and char not in valid_chars:\n\t\t\treturn False\n\treturn True", "id": "sample_635"}
{"input": "{ 3: 'A3', 1: 'A1', 2: 'A2' }", "output": "{3: 'A3', 1: 'A1', 2: 'A2'}", "code": "def operation_to_perform(d):\n\tr = {}\n\twhile len(d) > 0:\n\t\tr = {**r, **d}\n\t\tdel d[max(d.keys())]\n\treturn r", "id": "sample_636"}
{"input": "'03625163633 d'", "output": "'no'", "code": "def operation_to_perform(text):\n\ttext = text.split(' ')\n\tfor t in text:\n\t\tif not t.isnumeric():\n\t\t\treturn 'no'\n\treturn 'yes'", "id": "sample_637"}
{"input": "'ababa', 'ab'", "output": "'ababa'", "code": "def operation_to_perform(s, suffix):\n\tif not suffix:\n\t\treturn s\n\twhile s.endswith(suffix):\n\t\ts = s[:-len(suffix)]\n\treturn s", "id": "sample_638"}
{"input": "\"xabxfiwoexahxaxbxs\", \"xbabcabccb\"", "output": "'yes '", "code": "def operation_to_perform(perc, full):\n\treply = \"\"\n\ti = 0\n\twhile perc[i] == full[i] and i < len(full) and i < len(perc):\n\t\tif perc[i] == full[i]:\n\t\t\treply += \"yes \"\n\t\telse:\n\t\t\treply += \"no \"\n\t\ti += 1\n\treturn reply", "id": "sample_639"}
{"input": "\"3eeeeeeoopppppppw14film3oee3\"", "output": "18", "code": "def operation_to_perform(text):\n\ta = 0\n\tif text[0] in text[1:]:\n\t\ta += 1\n\tfor i in range(0, len(text)-1):\n\t\tif text[i] in text[i+1:]:\n\t\t\ta += 1\n\treturn a", "id": "sample_640"}
{"input": "'dummy33;d'", "output": "False", "code": "def operation_to_perform(number):\n\treturn True if number.isdecimal() else False", "id": "sample_641"}
{"input": "\"     \"", "output": "'space'", "code": "def operation_to_perform(text):\n\ti = 0\n\twhile i < len(text) and text[i].isspace():\n\t\ti+=1\n\tif i == len(text):\n\t\treturn 'space'\n\treturn 'no'", "id": "sample_642"}
{"input": "'damdrodm', 'm'", "output": "'damdrodM'", "code": "def operation_to_perform(text, suffix):\n\tif text.endswith(suffix):\n\t\ttext = text[:-1] + text[-1:].swapcase()\n\treturn text", "id": "sample_643"}
{"input": "[6, 1], 3", "output": "[6, 1]", "code": "def operation_to_perform(nums, pos):\n\ts = slice(None)\n\tif pos % 2:\n\t\ts = slice(None, -1)\n\tnums[s].reverse()\n\treturn nums", "id": "sample_644"}
{"input": "[1, 1, 1, 2], 3", "output": "1", "code": "def operation_to_perform(nums, target):\n\tif nums.count(0):\n\t\treturn 0\n\telif nums.count(target) < 3:\n\t\treturn 1\n\telse:\n\t\treturn nums.index(target)", "id": "sample_645"}
{"input": "'aBc, ,SzY', 2", "output": "'aBc, ,SzY'", "code": "def operation_to_perform(text, count):\n\tfor i in range(count):\n\t\ttext = ''.join(reversed(text))\n\treturn text", "id": "sample_646"}
{"input": "'/alcm@ an)t//eprw)/e!/d\\nujv', 0", "output": "['/alcm@ an)t//eprw)/e!/d', 'ujv']", "code": "def operation_to_perform(text, chunks):\n\treturn text.splitlines(chunks)", "id": "sample_647"}
{"input": "[0, 4, 5, 6], [13, 23, -5, 0]", "output": "6", "code": "def operation_to_perform(list1, list2):\n\tl = list1[:]\n\twhile len(l) > 0:\n\t\tif l[-1] in list2:\n\t\t\tl.pop()\n\t\telse:\n\t\t\treturn l[-1]\n\treturn 'missing'", "id": "sample_648"}
{"input": "\"\\tf9\\n\\tldf9\\n\\tadf9!\\n\\tf9?\", 1", "output": "' f9\\n ldf9\\n adf9!\\n f9?'", "code": "def operation_to_perform(text, tabsize):\n\treturn '\\n'.join([\n\t\tt.expandtabs(tabsize)\n\t\tfor t in text.split('\\n')\n\t])", "id": "sample_649"}
{"input": "'', 'A'", "output": "''", "code": "def operation_to_perform(string, substring):\n\twhile string.startswith(substring):\n\t\tstring = string[len(substring):len(string)]\n\treturn string", "id": "sample_650"}
{"input": "'E wrestled evil until upperfeat', 'e'", "output": "'E wrestled evil until upperfeat'", "code": "def operation_to_perform(text, letter):\n\tif letter.islower(): letter = letter.upper()\n\ttext = ''.join([letter if char == letter.lower() else char for char in text])\n\treturn text.capitalize()", "id": "sample_651"}
{"input": "'3'", "output": "'3'", "code": "def operation_to_perform(string):\n\tif not string or not string[0].isnumeric:\n\t\treturn 'INVALID'\n\tcur = 0\n\tfor i in range(len(string)):\n\t\tcur = cur * 10 + int(string[i])\n\treturn str(cur)", "id": "sample_652"}
{"input": "\"c, c, c ,c, c\", \"c\"", "output": "1", "code": "def operation_to_perform(text, letter):\n\tt = text\n\tfor alph in text:\n\t\tt = t.replace(alph, \"\")\n\treturn len(t.split(letter))", "id": "sample_653"}
{"input": "'aphid', 'i', '?'", "output": "'aph?d'", "code": "def operation_to_perform(s, from_c, to_c):\n\ttable = s.maketrans(from_c, to_c)\n\treturn s.translate(table)", "id": "sample_654"}
{"input": "'rpaar'", "output": "'p'", "code": "def operation_to_perform(s):\n\treturn s.replace('a', '').replace('r', '')", "id": "sample_655"}
{"input": "['b', 'i', 'r', 'o', 's', 'j', 'v', 'p']", "output": "'yes'", "code": "def operation_to_perform(letters):\n\ta = [] \n\tfor i in range(len(letters)):\n\t\tif letters[i] in a:\n\t\t\treturn 'no'\n\t\ta.append(letters[i]) \n\treturn 'yes'", "id": "sample_656"}
{"input": "\"djhasghasgdha\"", "output": "'Djhasghasgdha'", "code": "def operation_to_perform(text):\n\tfor punct in '!.?,:;':\n\t\tif text.count(punct) > 1:\n\t\t\treturn 'no'\n\t\tif text.endswith(punct):\n\t\t\treturn 'no'\n\treturn text.title()", "id": "sample_657"}
{"input": "{3: \"swims like a bull\"}, [3, 2, 'c', True, 5]", "output": "['swims like a bull', None, None, None, None]", "code": "def operation_to_perform(d, get_ary):\n\tresult = []\n\tfor key in get_ary:\n\t\tresult.append(d.get(key))\n\treturn result", "id": "sample_658"}
{"input": "['yR?TAJhIW?n', 'o11BgEFDfoe', 'KnHdn2vdEd', 'wvwruuqfhXbGis']", "output": "4", "code": "def operation_to_perform(bots):\n\tclean = []\n\tfor username in bots:\n\t\tif not username.isupper():\n\t\t\tclean.append(username[:2] + username[-3:])\n\treturn len(clean)", "id": "sample_659"}
{"input": "3", "output": "4", "code": "def operation_to_perform(num):\n\tinitial = [1]\n\ttotal = initial\n\tfor _ in range(num):\n\t\ttotal = [1] + [x+y for x, y in zip(total, total[1:])]\n\t\tinitial.append(total[-1])\n\treturn sum(initial)", "id": "sample_660"}
{"input": "'elrts,SS ee', 6", "output": "'elrts,SSee'", "code": "def operation_to_perform(letters, maxsplit):\n\treturn ''.join(letters.split()[-maxsplit:])", "id": "sample_661"}
{"input": "['Dan', 'Joe', 'Dusty']", "output": "['Angela', 'Dan', 'Dusty', 'Joe', 'Linda', 'Pete']", "code": "def operation_to_perform(values):\n\tnames = ['Pete', 'Linda', 'Angela']\n\tnames.extend(values)\n\tnames.sort()\n\treturn names", "id": "sample_662"}
{"input": "[], 2", "output": "[]", "code": "def operation_to_perform(container, cron):\n\tif not cron in container:\n\t\treturn container\n\tpref = container[:container.index(cron)].copy()\n\tsuff = container[container.index(cron) + 1:].copy()\n\treturn pref + suff", "id": "sample_663"}
{"input": "{\"3\":\"3\",\"4\":\"5\"}", "output": "'3 4 '", "code": "def operation_to_perform(tags):\n\tresp = \"\"\n\tfor key in tags:\n\t\tresp += key + \" \"\n\treturn resp", "id": "sample_664"}
{"input": "\"acbced\"", "output": "'aCbCed'", "code": "def operation_to_perform(chars):\n\ts = \"\"\n\tfor ch in chars:\n\t\tif chars.count(ch) % 2 == 0:\n\t\t\ts += ch.upper()\n\t\telse:\n\t\t\ts += ch\n\treturn s", "id": "sample_665"}
{"input": "{ 0: [], 1: [] }, { 0: [0, 0, 0, 0], 2: [2, 2, 2] }", "output": "4", "code": "def operation_to_perform(d1, d2):\n\tmmax = 0\n\tfor k1 in d1:\n\t\tif p := len(d1[k1])+len(d2.get(k1, [])):\n\t\t\tif p > mmax:\n\t\t\t\tmmax = p\n\treturn mmax", "id": "sample_666"}
{"input": "'C7'", "output": "['< C7 level=0 >']", "code": "def operation_to_perform(text):\n\tnew_text = []\n\tfor i in range(len(text) // 3):\n\t\tnew_text.append(f\"< {text[i * 3: i * 3 + 3]} level={i} >\")\n\tlast_item = text[len(text) // 3 * 3:]\n\tnew_text.append(f\"< {last_item} level={len(text) // 3} >\")\n\treturn new_text", "id": "sample_667"}
{"input": "'hellomyfriendear'", "output": "'rhellomyfriendea'", "code": "def operation_to_perform(text):\n\treturn text[-1] + text[:-1]", "id": "sample_668"}
{"input": "\"fubarbaz\"", "output": "'fubarbaz'", "code": "def operation_to_perform(t):\n\ta, sep, b = t.rpartition('-')\n\tif len(b) == len(a):\n\t\treturn 'imbalanced'\n\treturn a + b.replace(sep, '')", "id": "sample_669"}
{"input": "['12','ab'], [2,2]", "output": "[2, 2]", "code": "def operation_to_perform(a, b):\n\td = dict(zip(a, b))\n\ta.sort(key=d.get, reverse=True)\n\treturn [d.pop(x) for x in a]", "id": "sample_670"}
{"input": "\"ewriyat emf rwto segya\", \"tey\", \"dgo\"", "output": "'gwrioad gmf rwdo sggoa'", "code": "def operation_to_perform(text, char1, char2):\n\tt1a = []\n\tt2a = []\n\tfor i in range(len(char1)):\n\t\tt1a.append(char1[i])\n\t\tt2a.append(char2[i])\n\tt1 = text.maketrans(dict(zip(t1a, t2a)))\n\treturn text.translate(t1)", "id": "sample_671"}
{"input": "\"1zd\", 0, 'm'", "output": "'1zd'", "code": "def operation_to_perform(text, position, value):\n\tlength = len(text)\n\tindex = (position % (length + 2)) - 1\n\tif index >= length or index < 0:\n\t\treturn text\n\ttext[index] = value\n\treturn ''.join(text)", "id": "sample_672"}
{"input": "\"cA\"", "output": "'cA'", "code": "def operation_to_perform(string):\n\tif string.isupper():\n\t\treturn string.lower()\n\telif string.islower():\n\t\treturn string.upper()\n\treturn string", "id": "sample_673"}
{"input": "'qq'", "output": "'qq'", "code": "def operation_to_perform(text):\n\tls = list(text)\n\tfor x in range(len(ls)-1, -1, -1):\n\t\tif len(ls) <= 1: break\n\t\tif ls[x] not in 'zyxwvutsrqponmlkjihgfedcba': ls.pop(ls[x])\n\treturn ''.join(ls)", "id": "sample_674"}
{"input": "[1, 2, 2, 3, 4, 5], 1", "output": "[1]", "code": "def operation_to_perform(nums, sort_count):\n\tnums.sort()\n\treturn nums[:sort_count]", "id": "sample_675"}
{"input": "'a', 100", "output": "'a'", "code": "def operation_to_perform(text, tab_size):\n\treturn text.replace('\\t', ' '*tab_size)", "id": "sample_676"}
{"input": "'I got 1 and 0.', 5", "output": "'I'", "code": "def operation_to_perform(text, length):\n\tlength = -length if length < 0 else length\n\toutput = ''\n\tfor idx in range(length):\n\t\tif text[idx % len(text)] != ' ':\n\t\t\toutput += text[idx % len(text)]\n\t\telse:\n\t\t\tbreak\n\treturn output", "id": "sample_677"}
{"input": "\"HI\"", "output": "{'h': 1, 'i': 1}", "code": "def operation_to_perform(text):\n\tfreq = dict()\n\tfor c in text.lower():\n\t\tif c in freq:\n\t\t\tfreq[c] += 1\n\t\telse:\n\t\t\tfreq[c] = 1\n\treturn freq", "id": "sample_678"}
{"input": "'meet'", "output": "True", "code": "def operation_to_perform(text):\n\tif text == '':\n\t\treturn False\n\tfirst_char = text[0]\n\tif text[0].isdigit():\n\t\treturn False\n\tfor last_char in text:\n\t\tif (last_char != '_') and not last_char.isidentifier():\n\t\t\treturn False\n\treturn True", "id": "sample_679"}
{"input": "\"we@32r71g72ug94=(823658*!@324\"", "output": "'we32r71g72ug94823658324'", "code": "def operation_to_perform(text):\n\tletters = ''\n\tfor i in range(len(text)):\n\t\tif text[i].isalnum():\n\t\t\tletters += text[i]\n\treturn letters", "id": "sample_680"}
{"input": "[1, 5, 8, 2, 0, 3], 2, 7", "output": "[1, 5, 8, 7, 2, 0, 3]", "code": "def operation_to_perform(array, ind, elem):\n\tarray.insert(-5 if ind < 0 else len(array) if ind > len(array) else ind + 1, elem)\n\treturn array", "id": "sample_681"}
{"input": "'hypernimovichyp', 2, 2", "output": "'hy'", "code": "def operation_to_perform(text, length, index):\n\tls = text.rsplit(None, index)\n\treturn '_'.join([l[:length] for l in ls])", "id": "sample_682"}
{"input": "{'disface': 9, 'cam': 7}, {'mforce': 5}", "output": "{'disface': 9, 'cam': 7, 'mforce': 5}", "code": "def operation_to_perform(dict1, dict2):\n\tresult = dict1.copy()\n\tresult.update([(__, dict2[__]) for __ in dict2])\n\treturn result", "id": "sample_683"}
{"input": "\"Transform quotations\\\"\\nnot into numbers.\"", "output": "'Transform quotations9\\nnot into numbers.'", "code": "def operation_to_perform(text):\n\ttrans = str.maketrans('\"\\'><', '9833')\n\treturn text.translate(trans)", "id": "sample_684"}
{"input": "[1, 1, 1], -2", "output": "-2", "code": "def operation_to_perform(array, elem):\n\treturn array.count(elem) + elem", "id": "sample_685"}
{"input": "{\"lorem ipsum\" : 12, \"dolor\" : 23}, [\"lorem ipsum\", \"dolor\"]", "output": "{'lorem ipsum': 12, 'dolor': 23}", "code": "def operation_to_perform(d, l):\n    new_d = {}\n\n    for k in l:\n        if d.get(k) is not None:\n            new_d[k] = d[k]\n\n    return new_d.copy()", "id": "sample_686"}
{"input": "'Rjug nzufE'", "output": "'R:j:u:g: :z:u:f:E:rjug nzufe'", "code": "def operation_to_perform(text):\n\tt = list(text)\n\tt.pop(len(t) // 2)\n\tt.append(text.lower())\n\treturn ':'.join([c for c in t])", "id": "sample_687"}
{"input": "[3, 1, 9, 0, 2, 0, 8]", "output": "[3, 1, 9, 0, 2, 8]", "code": "def operation_to_perform(nums):\n\tl = []\n\tfor i in nums:\n\t\tif i not in l:\n\t\t\tl.append(i)\n\treturn l", "id": "sample_688"}
{"input": "[-3, -6, 2, 7]", "output": "[-15, -6, 10, 7]", "code": "def operation_to_perform(arr):\n\tcount = len(arr)\n\tsub = arr.copy()\n\tfor i in range(0, count, 2):\n\t\tsub[i] *= 5\n\treturn sub", "id": "sample_689"}
{"input": "'800'", "output": "'800'", "code": "def operation_to_perform(n):\n\tif str(n).find('.') != -1:\n\t\treturn str(int(n)+2.5)\n\treturn str(n)", "id": "sample_690"}
{"input": "'rpyttc', 'cyt'", "output": "'rpytt'", "code": "def operation_to_perform(text, suffix):\n\tif suffix and suffix[-1] in text:\n\t\treturn operation_to_perform(text.rstrip(suffix[-1]), suffix[:-1])\n\telse:\n\t\treturn text", "id": "sample_691"}
{"input": "[]", "output": "[]", "code": "def operation_to_perform(array):\n\ta = []\n\tarray.reverse()\n\tfor i in range(len(array)):\n\t\tif array[i] != 0:\n\t\t\ta.append(array[i])\n\ta.reverse()\n\treturn a", "id": "sample_692"}
{"input": "\"sa832d83r xd 8g 26a81xdf\"", "output": "'x0x0'", "code": "def operation_to_perform(text):\n\tn = int(text.find('8'))\n\treturn 'x0'*n", "id": "sample_693"}
{"input": "dict(e=1, d=2, c=3)", "output": "('c', {'e': 1, 'd': 2})", "code": "def operation_to_perform(d):\n\ti = len(d) - 1\n\tkey = list(d.keys())[i]\n\td.pop(key, None)\n\treturn key, d", "id": "sample_694"}
{"input": "{}", "output": "{}", "code": "def operation_to_perform(d):\n\tresult = {}\n\tfor ki, li in d.items():\n\t\tresult.update({ki: []})\n\t\tfor kj, dj in enumerate(li):\n\t\t\tresult[ki].append({})\n\t\t\tfor kk, l in dj.items():\n\t\t\t\tresult[ki][kj][kk] = l.copy()\n\treturn result", "id": "sample_695"}
{"input": "'wdj'", "output": "3", "code": "def operation_to_perform(text):\n\ts = 0\n\tfor i in range(1, len(text)):\n\t\ts += len(text.rpartition(text[i])[0])\n\treturn s", "id": "sample_696"}
{"input": "\"not it\", \"\"", "output": "('', '', 'not it')", "code": "def operation_to_perform(s, sep):\n\tsep_index = s.find(sep)\n\tprefix = s[:sep_index]\n\tmiddle = s[sep_index:sep_index + len(sep)]\n\tright_str = s[sep_index + len(sep):]\n\treturn prefix, middle, right_str", "id": "sample_697"}
{"input": "('(((((((((((d))))))))).))))(((((')", "output": "'(((((((((((d.((((('", "code": "def operation_to_perform(text):\n\treturn ''.join(x for x in text if x != ')')", "id": "sample_698"}
{"input": "\"some\", \"1\"", "output": "['1', 'some']", "code": "def operation_to_perform(text, elem):\n\tif elem != '':\n\t\twhile text.startswith(elem):\n\t\t\ttext = text.replace(elem, '')\n\t\twhile elem.startswith(text):\n\t\t\telem = elem.replace(text, '')\n\treturn [elem, text]", "id": "sample_699"}
{"input": "\"Where is the bot in this world?\"", "output": "30", "code": "def operation_to_perform(text):\n\treturn len(text) - text.count('bot')", "id": "sample_700"}
{"input": "'31849 let it!31849 pass!', ('3','1','8',' ','1','9','2','d')", "output": "'31849 let it!31849 pass!'", "code": "def operation_to_perform(stg, tabs):\n\tfor tab in tabs:\n\t\tstg = stg.rstrip(tab)\n\treturn stg", "id": "sample_701"}
{"input": "[0, -5, -4]", "output": "[-4, -5, 0]", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\tfor i in range(len(nums) - 1, -1, -1):\n\t\tnums.insert(i, nums.pop(0))\n\treturn nums", "id": "sample_702"}
{"input": "'vzzv2sg', 'z'", "output": "'zzv2sg'", "code": "def operation_to_perform(text, char):\n\tcount = text.count(char*2)\n\treturn text[count:]", "id": "sample_703"}
{"input": "'.', 0, '99'", "output": "'.'", "code": "def operation_to_perform(s, n, c):\n\twidth = len(c)*n\n\tfor _ in range(width - len(s)):\n\t\ts = c + s\n\treturn s", "id": "sample_704"}
{"input": "['Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston'], 'Somewhere '", "output": "[]", "code": "def operation_to_perform(cities, name):\n\tif not name:\n\t\treturn cities\n\tif name and name != 'cities':\n\t\treturn []\n\treturn [name + city for city in cities]", "id": "sample_705"}
{"input": "\"ab\", \"xy\"", "output": "['xy', 'ab']", "code": "def operation_to_perform(r, w):\n\ta = []\n\tif r[0] == w[0] and w[-1] == r[-1]:\n\t\ta.append(r)\n\t\ta.append(w)\n\telse:\n\t\ta.append(w)\n\t\ta.append(r)\n\treturn a", "id": "sample_706"}
{"input": "'undbs l', 1", "output": "'udbs l'", "code": "def operation_to_perform(text, position):\n\tlength = len(text)\n\tindex = position % (length + 1)\n\tif position < 0 or index < 0:\n\t\tindex = -1\n\tnew_text = list(text)\n\tnew_text.pop(index)\n\treturn ''.join(new_text)", "id": "sample_707"}
{"input": "'    jcmfxv     '", "output": "'    jcmfxv'", "code": "def operation_to_perform(string):\n\tl = list(string)\n\tfor i in reversed(range(len(l))):\n\t\tif l[i] != ' ':\n\t\t\tbreak\n\t\tl.pop(i)\n\treturn ''.join(l)", "id": "sample_708"}
{"input": "'a loved'", "output": "'loved a'", "code": "def operation_to_perform(text):\n\tmy_list = text.split()\n\tmy_list.sort(reverse=True)\n\treturn ' '.join(my_list)", "id": "sample_709"}
{"input": "{'aki': ['1', '5']}, 'aki', '2'", "output": "{'aki': ['1', '5', '2']}", "code": "def operation_to_perform(playlist, liker_name, song_index):\n\tplaylist[liker_name] = playlist.get(liker_name, [])\n\tplaylist[liker_name].append(song_index)\n\treturn playlist", "id": "sample_710"}
{"input": "'apples\\n\\t\\npears\\n\\t\\nbananas'", "output": "'apples\\t\\t\\tpears\\t\\t\\tbananas'", "code": "def operation_to_perform(text):\n\treturn text.replace('\\n', '\\t')", "id": "sample_711"}
{"input": "'A(hiccup)A'", "output": "[['A']]", "code": "def operation_to_perform(text):\n\tcreated = []\n\tfor line in text.splitlines():\n\t\tif line == '':\n\t\t\tbreak\n\t\tcreated.append(list(list(line.rstrip())[::-1][flush]))\n\treturn created[::-1]\n\nflush = 0", "id": "sample_712"}
{"input": "'only one line', ' '", "output": "True", "code": "def operation_to_perform(text, char):\n\tif char in text:\n\t\ttext = [t.strip() for t in text.split(char) if t]\n\t\tif len(text) > 1:\n\t\t\treturn True\n\treturn False", "id": "sample_713"}
{"input": "[3, -2, 0]", "output": "[]", "code": "def operation_to_perform(array):\n\tarray.reverse()\n\tarray.clear()\n\tarray.extend('x'*len(array))\n\tarray.reverse()\n\treturn array", "id": "sample_714"}
{"input": "'abababac', 'a'", "output": "False", "code": "def operation_to_perform(text, char):\n\treturn text.count(char) % 2 != 0", "id": "sample_715"}
{"input": "[2, 1, 2, 3, 1, 6, 3, 8]", "output": "[]", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\twhile len(nums) > (count//2):\n\t\tnums.clear()\n\treturn nums", "id": "sample_716"}
{"input": "\"timetable, 2mil\"", "output": "'t'", "code": "def operation_to_perform(text):\n\t(k, l) = (0, len(text) - 1)\n\twhile not text[l].isalpha():\n\t\tl -= 1\n\twhile not text[k].isalpha():\n\t\tk += 1\n\tif k != 0 or l != len(text) - 1:\n\t\treturn text[k: l+1]\n\telse:\n\t\treturn text[0]", "id": "sample_717"}
{"input": "'ThisIsSoAtrocious'", "output": "'0ThisIsSoAtrocious'", "code": "def operation_to_perform(text):\n\tt = text\n\tfor i in text:\n\t\ttext = text.replace(i, '')\n\treturn str(len(text)) + t", "id": "sample_718"}
{"input": "\"if (x) {y = 1;} else {z = 1;}\"", "output": "'i f (x) {y = 1;} else {z = 1;}'", "code": "def operation_to_perform(code):\n\tlines = code.split(']')\n\tresult = []\n\tlevel = 0\n\tfor line in lines:\n\t\tresult.append(line[0] + ' ' + '  ' * level + line[1:])\n\t\tlevel += line.count('{') - line.count('}')\n\treturn '\\n'.join(result)", "id": "sample_719"}
{"input": "'bfreratrrbdbzagbretaredtroefcoiqrrneaosf'.split('-'), 'n'", "output": "2", "code": "def operation_to_perform(items, item):\n\twhile items[-1] == item:\n\t\titems.pop()\n\titems.append(item)\n\treturn len(items)", "id": "sample_720"}
{"input": "[-6, -5, -7, -8, 2]", "output": "[-8, -7, -6, -5, 2]", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\tfor num in range(2, count):\n\t\tnums.sort()\n\treturn nums", "id": "sample_721"}
{"input": "',wPzPppdl/'", "output": "',WpZpPPDL/'", "code": "def operation_to_perform(text):\n\tout = \"\"\n\tfor i in range(len(text)):\n\t\tif text[i].isupper():\n\t\t\tout += text[i].lower()\n\t\telse:\n\t\t\tout += text[i].upper()\n\treturn out", "id": "sample_722"}
{"input": "'dga nqdk\\rull qcha kl', 1", "output": "['d g a   n q d k', 'u l l   q c h a   k l']", "code": "def operation_to_perform(text, separator):\n\tsplitted = text.splitlines()\n\tif separator:\n\t\treturn [' '.join(s) for s in splitted]\n\telse:\n\t\treturn splitted", "id": "sample_723"}
{"input": "\"010100\", \"010\"", "output": "[3]", "code": "def operation_to_perform(text, function):\n\tcites = [len(text[text.index(function) + len(function):])]\n\tfor char in text:\n\t\tif char == function:\n\t\t\tcites.append(len(text[text.index(function) + len(function):]))\n\treturn cites", "id": "sample_724"}
{"input": "\"mrq7y\"", "output": "5", "code": "def operation_to_perform(text):\n\tresult_list = ['3', '3', '3', '3']\n\tif result_list:\n\t\tresult_list.clear()\n\treturn len(text)", "id": "sample_725"}
{"input": "\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"", "output": "(2, 34)", "code": "def operation_to_perform(text):\n\tws = 0\n\tfor s in text:\n\t\tif s.isspace():\n\t\t\tws += 1\n\treturn ws, len(text)", "id": "sample_726"}
{"input": "['ix', 'dxh', 'snegi', 'wiubvu'], ''", "output": "['dxh', 'ix', 'snegi', 'wiubvu']", "code": "def operation_to_perform(numbers, prefix):\n\treturn sorted(n[len(prefix):] if (len(n) > len(prefix) and n.startswith(prefix)) else n\n\t\t\t\t  for n in numbers)", "id": "sample_727"}
{"input": "'ru'", "output": "''", "code": "def operation_to_perform(text):\n\tresult = []\n\tfor i, ch in enumerate(text):\n\t\tif ch == ch.lower():\n\t\t\tcontinue\n\t\tif len(text) - 1 - i < text.rindex(ch.lower()):\n\t\t\tresult.append(ch)\n\treturn ''.join(result)", "id": "sample_728"}
{"input": "'abcdefghabc', 'abc'", "output": "[10, 2]", "code": "def operation_to_perform(s1,s2):\n\tres = []\n\ti = s1.rfind(s2)\n\twhile i != -1:\n\t\tres.append(i+len(s2)-1)\n\t\ti = s1.rfind(s2, 0, i)\n\treturn res", "id": "sample_729"}
{"input": "\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"", "output": "2", "code": "def operation_to_perform(text):\n\tm = 0\n\tcnt = 0\n\tfor i in text.split():\n\t\tif len(i) > m:\n\t\t\tcnt += 1\n\t\t\tm = len(i)\n\treturn cnt", "id": "sample_730"}
{"input": "'Chris requires a ride to the airport on Friday.', 'a'", "output": "'Chris requires  ride to the irport on Fridy.'", "code": "def operation_to_perform(text, use):\n\treturn text.replace(use, '')", "id": "sample_731"}
{"input": "{'u': 20, 'v': 5, 'b': 7, 'w': 3, 'x': 3}", "output": "{'u': 10, 'v': 2, 'b': 3, 'w': 1, 'x': 1}", "code": "def operation_to_perform(char_freq):\n\tresult = {}\n\tfor k, v in char_freq.copy().items():\n\t\tresult[k] = v // 2\n\treturn result", "id": "sample_732"}
{"input": "'n'", "output": "'n'", "code": "def operation_to_perform(text):\n\tlength = len(text) // 2\n\tleft_half = text[:length]\n\tright_half = text[length:][::-1]\n\treturn left_half + right_half", "id": "sample_733"}
{"input": "[5, 3, 3, 7]", "output": "[5, 3, 3, 7]", "code": "def operation_to_perform(nums):\n\tfor i in range(len(nums) - 2, -1, -1):\n\t\tif nums[i] % 2 == 0:\n\t\t\tnums.remove(nums[i])\n\treturn nums", "id": "sample_734"}
{"input": "'(A (b B))'", "output": "'Abb'", "code": "def operation_to_perform(sentence):\n\tif sentence == '':\n\t\treturn ''\n\tsentence = sentence.replace('(', '')\n\tsentence = sentence.replace(')', '')\n\treturn sentence.capitalize().replace(' ', '')", "id": "sample_735"}
{"input": "'pi wa', 'chi'", "output": "'pichiwa'", "code": "def operation_to_perform(text, insert):\n\twhitespaces = {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'}\n\tclean = ''\n\tfor char in text:\n\t\tif char in whitespaces:\n\t\t\tclean += insert\n\t\telse:\n\t\t\tclean += char\n\treturn clean", "id": "sample_736"}
{"input": "[0, 6, 2, -1, -2]", "output": "1", "code": "def operation_to_perform(nums):\n\tcounts = 0\n\tfor i in nums:\n\t\tif str(i).isdecimal():\n\t\t\tif counts == 0:\n\t\t\t\tcounts += 1\n\treturn counts", "id": "sample_737"}
{"input": "\"r;r;r;r;r;r;r;r;r\", \"x.r\"", "output": "'r;r;r;r;r;r;r;r;'", "code": "def operation_to_perform(text, characters):\n\tfor i in range(len(characters)):\n\t\ttext = text.rstrip(characters[i::len(characters)])\n\treturn text", "id": "sample_738"}
{"input": "'qwbnjrxs', ['jr', 'b', 'r', 'qw']", "output": "False", "code": "def operation_to_perform(st, pattern):\n\tfor p in pattern:\n\t\tif not st.startswith(p): return False\n\t\tst = st[len(p):]\n\treturn True", "id": "sample_739"}
{"input": "[1, 2, 3, 4], 3", "output": "[1, 2, 4]", "code": "def operation_to_perform(plot, delin):\n\tif delin in plot:\n\t\tsplit = plot.index(delin)\n\t\tfirst = plot[:split]\n\t\tsecond = plot[split + 1:]\n\t\treturn first + second\n\telse:\n\t\treturn plot", "id": "sample_740"}
{"input": "[6, 8, 2, 5, 3, 1, 9, 7], 6", "output": "1", "code": "def operation_to_perform(nums, p):\n\tprev_p = p - 1\n\tif prev_p < 0: prev_p = len(nums) - 1\n\treturn nums[prev_p]", "id": "sample_741"}
{"input": "\"-1-3\"", "output": "False", "code": "def operation_to_perform(text):\n\tb = True\n\tfor x in text:\n\t\tif x.isdigit():\n\t\t\tb = True\n\t\telse:\n\t\t\tb = False\n\t\t\tbreak\n\treturn b", "id": "sample_742"}
{"input": "'dog,cat'", "output": "-6", "code": "def operation_to_perform(text):\n\tstring_a, string_b = text.split(',')\n\treturn -(len(string_a) + (len(string_b)))", "id": "sample_743"}
{"input": "'jro', 'wdlp'", "output": "'jrowdlp'", "code": "def operation_to_perform(text, new_ending):\n\tresult = list(text)\n\tresult.extend(new_ending)\n\treturn ''.join(result)", "id": "sample_744"}
{"input": "'minimc@minimc.io'", "output": "'minimc@minimc.io'", "code": "def operation_to_perform(address):\n\tsuffix_start = address.index('@') + 1\n\tif address[suffix_start:].count('.') > 1:\n\t\taddress = address.removesuffix('.'.join(address.split('@')[1].split('.')[:2]))\n\treturn address", "id": "sample_745"}
{"input": "{}", "output": "{}", "code": "def operation_to_perform(dct):\n\tvalues = dct.values()\n\tresult = {}\n\tfor value in values:\n\t\titem = value.split('.')[0]+'@pinc.uk'\n\t\tresult[value] = item\n\treturn result", "id": "sample_746"}
{"input": "\"123E-10\"", "output": "False", "code": "def operation_to_perform(text):\n\tif text == '42.42':\n\t\treturn True\n\tfor i in range(3, len(text) - 3):\n\t\tif text[i] == '.' and text[i - 3:].isdigit() and text[:i].isdigit():\n\t\t\treturn True\n\treturn False", "id": "sample_747"}
{"input": "{'a': 123, 'b': 456, 'c': 789}", "output": "(('a', 123), ('b', 456))", "code": "def operation_to_perform(d):\n\ti = iter(d.items())\n\treturn next(i), next(i)", "id": "sample_748"}
{"input": "'l\\nl', 2", "output": "'l \\nl '", "code": "def operation_to_perform(text, width):\n\tresult = \"\"\n\tlines = text.split('\\n')\n\tfor l in lines:\n\t\tresult += l.center(width)\n\t\tresult += '\\n'\n\n\t# Remove the very last empty line\n\tresult = result[:-1]\n\treturn result", "id": "sample_749"}
{"input": "{}, 'hbd'", "output": "'hbd'", "code": "def operation_to_perform(char_map, text):\n\tnew_text = ''\n\tfor ch in text:\n\t\tval = char_map.get(ch)\n\t\tif val is None:\n\t\t\tnew_text += ch\n\t\telse:\n\t\t\tnew_text += val\n\treturn new_text", "id": "sample_750"}
{"input": "\"wwwwhhhtttpp\", 'w', 3", "output": "'wwwwhhhtttpp'", "code": "def operation_to_perform(text, char, min_count):\n\tcount = text.count(char)\n\tif count < min_count:\n\t\treturn text.swapcase()\n\treturn text", "id": "sample_751"}
{"input": "'abc', 8", "output": "'zzzzzabc'", "code": "def operation_to_perform(s, amount):\n\treturn (amount - len(s)) * 'z' + s", "id": "sample_752"}
{"input": "{0: 0, 1: 0, 2: 0, 3: 0, 4: 0}", "output": "{0: 5}", "code": "def operation_to_perform(bag):\n\tvalues = list(bag.values())\n\ttbl = {}\n\tfor v in range(100):\n\t\tif v in values:\n\t\t\ttbl[v] = values.count(v)\n\treturn tbl", "id": "sample_753"}
{"input": "['1', '2', '2', '44', '0', '7', '20257']", "output": "['2', '2', '44', '0', '7', '20257']", "code": "def operation_to_perform(nums):\n\tnums = ['{0:{fill}>{width}}'.format(val, **{'fill': '0', 'width': nums[0]}) for val in nums[1:]]\n\treturn [str(val) for val in nums]", "id": "sample_754"}
{"input": "'###', \"ph>t#A#BiEcDefW#ON#iiNCU\", '.'", "output": "'ph>t#A#BiEcDefW#ON#iiNCU'", "code": "def operation_to_perform(replace, text, hide):\n\twhile hide in text:\n\t\treplace += 'ax'\n\t\ttext = text.replace(hide, replace, 1)\n\treturn text", "id": "sample_755"}
{"input": "''", "output": "'string'", "code": "def operation_to_perform(text):\n\tif text.isalnum() and all(i.isdigit() for i in text):\n\t\treturn 'integer'\n\treturn 'string'", "id": "sample_756"}
{"input": "'a1a8', '1', 'n2'", "output": "'an2a8'", "code": "def operation_to_perform(text, char, replace):\n\treturn text.replace(char, replace)", "id": "sample_757"}
{"input": "[0, 3, 6, 2]", "output": "False", "code": "def operation_to_perform(nums):\n\tif nums[::-1] == nums:\n\t\treturn True\n\treturn False", "id": "sample_758"}
{"input": "'egmdartoa', 'good'", "output": "[]", "code": "def operation_to_perform(text, sub):\n\tindex = []\n\tstarting = 0\n\twhile starting != -1:\n\t\tstarting = text.find(sub, starting)\n\t\tif starting != -1:\n\t\t\tindex.append(starting)\n\t\t\tstarting += len(sub)\n\treturn index", "id": "sample_759"}
{"input": "dict(f = 1, h = 2, j = 3, k = 4)", "output": "['k', 'j', 'h', 'f']", "code": "def operation_to_perform(d):\n\tl = []\n\twhile len(d) > 0:\n\t\tkey = d.popitem()[0]\n\t\tl.append(key)\n\treturn l;", "id": "sample_760"}
{"input": "[]", "output": "[]", "code": "def operation_to_perform(array):\n\toutput = array.copy()\n\toutput[0::2] = output[-1::-2]\n\toutput.reverse()\n\treturn output", "id": "sample_761"}
{"input": "'this And cPanel'", "output": "'this and cpanel'", "code": "def operation_to_perform(text):\n\ttext = text.lower()\n\tcapitalize = text.capitalize()\n\treturn text[:1] + capitalize[1:]", "id": "sample_762"}
{"input": "'2Pn', 'yCxpg2C2Pny2', ''", "output": "'yCxpg2C2Pny'", "code": "def operation_to_perform(values, text, markers):\n\treturn text.rstrip(values).rstrip(markers)", "id": "sample_763"}
{"input": "\"some test string\", \"some\", \"any\"", "output": "'any test string'", "code": "def operation_to_perform(text, old, new):\n\ttext2 = text.replace(old, new)\n\told2 = old[::-1]\n\twhile old2 in text2:\n\t\ttext2 = text2.replace(old2, new)\n\treturn text2", "id": "sample_764"}
{"input": "'so456'", "output": "3", "code": "def operation_to_perform(text):\n\treturn sum(1 for c in text if c.isdigit())", "id": "sample_765"}
{"input": "['0','3'], 117", "output": "{'0': 117, '3': 117, '03': 351}", "code": "def operation_to_perform(values, value):\n\tlength = len(values)\n\tnew_dict = dict.fromkeys(values, value)\n\tnew_dict[''.join(sorted(values))] = value * 3\n\treturn new_dict", "id": "sample_766"}
{"input": "\"d khqw whi fwi bbn 41\"", "output": "'-'", "code": "def operation_to_perform(text):\n\ta = text.strip().split(' ')\n\tfor i in range(len(a)):\n\t\tif a[i].isdigit() is False:\n\t\t\treturn '-'\n\treturn \" \".join(a)", "id": "sample_767"}
{"input": "'abba', 'bab'", "output": "'bababba'", "code": "def operation_to_perform(s, o):\n\tif s.startswith(o):\n\t\treturn s\n\treturn o + operation_to_perform(s, o[-2::-1])", "id": "sample_768"}
{"input": "'akA?riu'", "output": "'AKa?RIU'", "code": "def operation_to_perform(text):\n\ttext_list = [char for char in text]\n\tfor i, char in enumerate(text_list):\n\t\ttext_list[i] = char.swapcase()\n\treturn ''.join(text_list)", "id": "sample_769"}
{"input": "'$78'.upper(), '$'", "output": "'$$78$$'", "code": "def operation_to_perform(line, char):\n\tcount = line.count(char)\n\tfor i in range(count+1, 0, -1):\n\t\tline = line.center(len(line)+i // len(char), char)\n\treturn line", "id": "sample_770"}
{"input": "(1, 2, 3, 4, 5, 6, 7, 8)", "output": "[2, 4, 6, 8]", "code": "def operation_to_perform(items):\n\titems = list(items)\n\todd_positioned = []\n\twhile len(items) > 0:\n\t\tposition = items.index(min(items))\n\t\titems.pop(position)\n\t\titem = items.pop(position)\n\t\todd_positioned.append(item)\n\treturn odd_positioned", "id": "sample_771"}
{"input": "'serjgpoDFdbcA.'", "output": "'DFA.'", "code": "def operation_to_perform(phrase):\n\tresult = ''\n\tfor i in phrase:\n\t\tif not i.islower():\n\t\t\tresult += i\n\treturn result", "id": "sample_772"}
{"input": "[-7, 3, 1, -1, -1, 0, 4], 6", "output": "4", "code": "def operation_to_perform(nums, n):\n\treturn nums.pop(n)", "id": "sample_773"}
{"input": "23, 'Cornareti'", "output": "'quiz leader = Cornareti, count = 23'", "code": "def operation_to_perform(num, name):\n\tf_str = 'quiz leader = {}, count = {}'\n\treturn f_str.format(name, num)", "id": "sample_774"}
{"input": "[2, 6, 1, 3, 1]", "output": "[1, 3, 1, 6, 2]", "code": "def operation_to_perform(nums):\n\tcount = len(nums)\n\tfor i in range(0, count // 2):\n\t\tnums[i], nums[count-i-1] = nums[count-i-1], nums[i]\n\treturn nums", "id": "sample_775"}
{"input": "{}", "output": "{}", "code": "def operation_to_perform(dictionary):\n\ta = dictionary.copy()\n\tfor key in a:\n\t\tif key%2 != 0:\n\t\t\tdel a[key]\n\t\t\ta['$'+str(key)] = a[key]\n\treturn a", "id": "sample_776"}
{"input": "[\"avc  a .d e\"], \"\"", "output": "['avc  a .d e']", "code": "def operation_to_perform(names, excluded):\n\texcluded = excluded\n\tfor i in range(len(names)):\n\t\tif excluded in names[i]:\n\t\t\tnames[i] = names[i].replace(excluded, \"\")\n\treturn names", "id": "sample_777"}
{"input": "'mjs', 'mjqwmjsqjwisojqwiso'", "output": "'mjsmjqwmjsqjwisojqwiso'", "code": "def operation_to_perform(prefix, text):\n\tif text.startswith(prefix):\n\t\treturn text\n\telse:\n\t\treturn prefix + text", "id": "sample_778"}
{"input": "'python ruby c javascript'", "output": "'${first}y, ${second}x, ${third}r, ${fourth}p'", "code": "def operation_to_perform(text):\n\tvalues = text.split()\n\treturn '${first}y, ${second}x, ${third}r, ${fourth}p' % dict({\n\t\t'first': values[0],\n\t\t'second': values[1],\n\t\t'third': values[2],\n\t\t'fourth': values[3]\n\t})", "id": "sample_779"}
{"input": "[2, 3, 5, 2, 4, 5, 2, 89]", "output": "'2'", "code": "def operation_to_perform(ints):\n\tcounts = [0] * 301\n\n\tfor i in ints:\n\t\tcounts[i] += 1\n\n\tr = []\n\tfor i in range(len(counts)):\n\t\tif counts[i] >= 3:\n\t\t\tr.append(str(i))\n\tcounts.clear()\n\treturn ' '.join(r)", "id": "sample_780"}
{"input": "'shivajimonto6', '6'", "output": "''", "code": "def operation_to_perform(s, ch):\n\tif ch not in s:\n\t\treturn ''\n\ts = s.partition(ch)[2][::-1]\n\tfor i in range(len(s)):\n\t\ts = s.partition(ch)[2][::-1]\n\treturn s", "id": "sample_781"}
{"input": "\"a j c n x X k\"", "output": "False", "code": "def operation_to_perform(input):\n\tfor char in input:\n\t\tif char.isupper():\n\t\t\treturn False\n\treturn True", "id": "sample_782"}
{"input": "\"managed\", \"\"", "output": "0", "code": "def operation_to_perform(text, comparison):\n\tlength = len(comparison)\n\tif length <= len(text):\n\t\tfor i in range(length):\n\t\t\tif comparison[length - i - 1] != text[len(text) - i - 1]:\n\t\t\t\treturn i\n\treturn length", "id": "sample_783"}
{"input": "'read', 'Is'", "output": "('read', 'Is')", "code": "def operation_to_perform(key, value):\n\tdict_ = {key: value}\n\treturn dict.popitem(dict_)", "id": "sample_784"}
{"input": "1", "output": "'1 '", "code": "def operation_to_perform(n):\n\tstreak = ''\n\tfor c in str(n):\n\t\tstreak += c.ljust(int(c) * 2)\n\treturn streak", "id": "sample_785"}
{"input": "'19kefp7', '9'", "output": "'kefp719'", "code": "def operation_to_perform(text, letter):\n\tif letter in text:\n\t\tstart = text.index(letter)\n\t\treturn text[start + 1:] + text[:start + 1]\n\treturn text", "id": "sample_786"}
{"input": "'xzd'", "output": "'Xzd'", "code": "def operation_to_perform(text):\n\tif len(text) == 0:\n\t\treturn ''\n\ttext = text.lower()\n\treturn text[0].upper() + text[1:]", "id": "sample_787"}
{"input": "'hello.txt', '/'", "output": "'hello.txt'", "code": "def operation_to_perform(text, suffix):\n\tif suffix.startswith(\"/\"):\n\t\treturn text + suffix[1:]\n\treturn text", "id": "sample_788"}
{"input": "'bR', -1", "output": "'bR'", "code": "def operation_to_perform(text, n):\n\tif n < 0 or len(text) <= n:\n\t\treturn text\n\tresult = text[0 : n]\n\ti = len(result) - 1\n\twhile i >= 0:\n\t\tif result[i] != text[i]:\n\t\t\tbreak\n\t\ti -= 1\n\treturn text[0 : i + 1]", "id": "sample_789"}
{"input": "{'i': 1, 'love': 'parakeets'}", "output": "(False, True)", "code": "def operation_to_perform(d):\n\tr = {\n\t\t'c': d.copy(),\n\t\t'd': d.copy()\n\t}\n\treturn (r['c'] is r['d'], r['c'] == r['d'])", "id": "sample_790"}
{"input": "8999,2", "output": "'08999'", "code": "def operation_to_perform(integer, n):\n\ti = 1\n\ttext = str(integer)\n\twhile (i+len(text) < n):\n\t\ti += len(text)\n\treturn text.zfill(i+len(text))", "id": "sample_791"}
{"input": "['a', 'b'], ['car', 'dog']", "output": "{'a': ['car', 'dog'], 'b': ['car', 'dog']}", "code": "def operation_to_perform(l1, l2):\n\tif len(l1) != len(l2):\n\t\treturn {}\n\treturn dict.fromkeys(l1, l2)", "id": "sample_792"}
{"input": "[1, 2, 4, 3, 2, 1], 0, 3", "output": "3", "code": "def operation_to_perform(list, start, end):\n\tcount = 0\n\tfor i in range(start, end):\n\t\tfor j in range(i, end):\n\t\t\tif list[i] != list[j]:\n\t\t\t\tcount += 1\n\treturn count", "id": "sample_793"}
{"input": "\"\\\"\\\\%$ normal chars $%~ qwet42'\"", "output": "'normalcharsqwet42'", "code": "def operation_to_perform(line):\n\ta = []\n\tfor c in line:\n\t\tif c.isalnum():\n\t\t\ta.append(c)\n\treturn ''.join(a)", "id": "sample_794"}
{"input": "'Fu,ux zfujijabji pfu.'", "output": "'Fu,Ux Zfujijabji Pfu.'", "code": "def operation_to_perform(text):\n\treturn text.title().replace('Io', 'io')", "id": "sample_795"}
{"input": "'fnuiyh', 'ni'", "output": "'fnuiyh'", "code": "def operation_to_perform(str,toget):\n\tif str.startswith(toget): return str[len(toget):]\n\telse: return str", "id": "sample_796"}
{"input": "{'a': 1, 'b': 2, 'c': 3}", "output": "[('a', 1), ('b', 2), ('c', 3)]", "code": "def operation_to_perform(dct):\n\tlst = []\n\tfor key in sorted(dct):\n\t\tlst.append((key, dct[key]))\n\treturn lst", "id": "sample_797"}
{"input": "'@hihu@!', '@hihu'", "output": "'@!'", "code": "def operation_to_perform(text, pre):\n\tif not text.startswith(pre):\n\t\treturn text\n\treturn text.removeprefix(pre)", "id": "sample_798"}
{"input": "'eqe-;ew22'", "output": "'neqe-;ew22'", "code": "def operation_to_perform(st):\n\tif st[0] == '~':\n\t\te = st.rjust(10, 's')\n\t\treturn operation_to_perform(e)\n\telse:\n\t\treturn st.rjust(10, 'n')", "id": "sample_799"}
