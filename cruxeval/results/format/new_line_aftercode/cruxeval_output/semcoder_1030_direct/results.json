{"759": ["[]"], "697": ["(\"not it\", \"\", \"\")"], "2": ["\"hbtfdeiequ\""], "105": ["\"Permission Is Granted\""], "672": ["\"mzd\""], "620": ["\"3 ihomxqd an dlert\""], "201": ["\"152\""], "711": ["\"apples\\t\\tpears\\t\\tbananas\""], "696": ["2"], "449": ["True"], "126": ["\"kxkxxfck--\""], "406": ["True"], "680": ["\"we32r71g72ug94823658324\""], "198": ["\"msfmtc\""], "582": ["[5, 5, 5, 5, 5, 5, 5]"], "391": ["[\"+\", \"9\", \"r\", \"+\"]"], "551": ["[\"a\", \"b\", \"c\", \"d\", \"inf\"]"], "482": ["\"Because it intrigues them\""], "740": ["[1, 2, 4]"], "512": ["True"], "13": ["3"], "253": ["\"umwwfv\""], "594": ["25"], "663": ["[]"], "141": ["[1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]"], "454": ["{}"], "477": ["(\"|xduaisf\", \"xduaisf\")"], "642": ["\"space\""], "223": ["2"], "199": ["\"mnmnj krupa...##!@#!@#$$\""], "606": ["\"ruamNHIB\""], "84": ["\"nwv mef ofme bdrylday nwv mef ofme bdrylday nwv mef ofme bdrylday\""], "429": ["[(5, 1), (\"abc\", 2), (\"defghi\", 2), (87.29, 3)]"], "445": ["\"Carrot, Banana, and Strawberry\""], "600": ["[]"], "81": ["[('Bulls', 'bulls'), ('White Sox', 45)]"], "19": ["\"\""], "691": ["\"rpyt\""], "53": ["[0, 0, 0, 0, 0, 0]"], "98": ["2"], "367": ["[6, 2, 1, 1, 4, 1]"], "558": ["True"], "23": ["\"new-medium-performing-application - XQuery 2.2\""], "74": ["[44, 34, 23, 82, 15, 24, 11, 63, 99]"], "8": ["\"UppEr\""], "344": ["[6, 4, 2, 8, 15]"], "49": ["\"816\""], "304": ["{18: 6, 17: 3}"], "36": ["\"ha\""], "245": ["['U', 'P', 'P', 'E', 'R', 'C', 'A', 'S', 'E', 'D', 'all_uppercased']"], "100": ["{\"1\": \"b\"}"], "269": ["[\"0\", 2]"], "770": ["\"$$$$$$$$78\""], "626": ["\"bbab\""], "394": ["2"], "297": ["\"Half Life\""], "26": ["\"error\""], "453": ["False"], "748": ["((\"a\", 123), (\"b\", 456))"], "735": ["\"ABB\""], "264": ["\"pApArA\""], "46": ["\"manylettersasvszhelloman\""], "387": ["[3, 1, 0, 2]"], "648": ["6"], "103": ["\"abcdefghij\""], "572": ["[(2, 10), (3, 1), (1, 9)]"], "704": ["\".\""], "785": ["\"1\""], "765": ["3"], "579": ["\"\""], "353": ["4"], "221": ["\"24fc5.bpxa\""], "278": ["{0: [5], 132: [5, 32]}"], "398": ["{\"2\": [2], \"0\": [1], \"1\": [2]}"], "723": ["[\"dga nqdk\", \"ull qcha kl\"]"], "634": ["\"biua\""], "450": ["\"K zKB\""], "89": ["\"o\""], "94": ["{\"w\": 3, \"wi\": 10}"], "45": ["0"], "792": ["{\"a\": \"dog\", \"b\": \"dog\"}"], "273": ["\".T\""], "165": ["True"], "521": ["[77, 9, 0, 2, 5, 77, 4, 0, 43]"], "790": ["(False, False)"], "407": ["3"], "25": ["{\"t\": 2}"], "746": ["{}"], "69": ["\"Name unknown\""], "550": ["[1, 1, 2, 2, 4, 4]"], "56": ["True"], "162": ["\"\u0421BISHOP\""], "142": ["\"hpfdky\""], "327": ["[-1, 7, -3, 1]"], "227": ["\"Manolo\""], "153": ["False"], "112": ["\"LittleRedRidingHoodLiTTleBIGGeXEiT\""], "731": ["\"Chris requires  ride to the airport on Friday.\""], "644": ["[1, 6]"], "28": ["False"], "793": ["6"], "181": ["[\"3291223\", 6]"], "701": ["\"31849 let it!31849 pass!\""], "251": ["\"Marie;Nelson;Oscar;+353. \""], "284": ["\"\""], "292": ["\"5*******\""], "419": ["\"mmfb\""], "786": ["\"919kefp7\""], "760": ["['f', 'h', 'j', 'k']"], "405": ["[5, 3, 4, 1, 2, 3, 5]"], "446": ["[]"], "796": ["\"fnuiyh\""], "12": ["\"If you want to live a happy life!\"\n[/ANMONOLOGUE]"], "212": ["[1, -9, 7, 2, 6, -3, 3]"], "443": ["\"lorem ipsum\""], "727": ["[\"dxh\", \"ix\", \"snegi\", \"wiubvu\"]"], "216": ["2"], "702": ["[-4, 0, -5]"], "437": ["{'john': None, 'doe': None, 'the': None}"], "195": ["\"ilfdoirwirmtoibs\""], "63": ["\"dbtdabdahesyehu\""], "93": ["\"qi!!\""], "518": ["False"], "208": ["['c', 'a', 't']"], "777": ["[\"avc  a .d e\"]"], "517": ["\"SzHjifn\""], "519": ["{1: False, 2: 0}"], "756": ["\"string\""], "529": ["[1, 2, 3]"], "138": ["\"tflb omn rtt\""], "622": ["\"galgu\""], "144": ["[]"], "117": ["1"], "722": ["\",WpZpPpDl/\""], "296": ["\"https://www.ekapusta.com/image/url\""], "337": ["\"LL\""], "5": ["def operation_to_perform(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n\n        if char in [\"p\", \"C\"]:\n            count += 1\n        new_text.append(char)\n    return count, \"\".join(new_text)\n\n# Understanding the Function\nThe function `operation_to_perform` takes three parameters:\n- `text`: a string that we want to process.\n- `lower`: a character that will replace any decimal digits in `text` with.\n- `upper`: a character that will replace any non-decimal characters in `text` with.\n\nThe function performs the following operations:\n1. It initializes a counter `count` to zero.\n2. It creates an empty list `new_text` to store the processed characters.\n3. It iterates over each character in the input `text`.\n4. If the character is a decimal digit, it replaces it with `lower`; otherwise, it replaces it with `upper`.\n5. It checks if the replaced character is either `'p'` or `'C'` and increments the `count` if true.\n6. Finally, it returns a tuple containing the `count` and the joined string of `new_text`.\n\n# Key Properties and Constraints\n- The function processes the input string `text`, modifying it based on the specified `lower` and `upper` characters.\n- The `count` reflects how many times the characters `'p'` or `'C'` appear in the modified string.\n- The output is a tuple where the first element is the count of occurrences of `'p'` or `'C'`, and the second element is the modified string.\n\n# Execution Simulation\nLet's simulate the execution of `operation_to_perform(\"DSUWeqExTQdCMGpqur\", \"a\", \"x\")` step by step.\n\n1. **Initialization**:\n   - `count = 0`\n   - `new_text = []`\n\n2. **Iteration over `text`**:\n   - For each character in `\"DSUWeqExTQdCMGpqur\"`:\n     - **'D'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x']`\n     - **'S'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x']`\n     - **'U'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x']`\n     - **'W'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x']`\n     - **'e'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x']`\n     - **'q'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x']`\n     - **'E'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x']`\n     - **'x'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']`\n     - **'T'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']`\n     - **'Q'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']`\n     - **'d'**: Is a decimal, replace with 'a' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a']`\n     - **'C'**: Is a decimal, replace with 'a' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a']`\n     - **'M'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x']`\n     - **'G'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x']`\n     - **'p'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x', 'x']`\n     - **'q'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x', 'x', 'x']`\n     - **'u'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x', 'x', 'x', 'x']`\n     - **'r'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x', 'x', 'x', 'x', 'x']`\n\n3. **Counting occurrences**:\n   - After processing, we find that `'p'` and `'C'` appear 2 times in the modified string.\n\n4. **Returning the result**:\n   - The function returns `(2, 'xaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxa"], "749": ["\"l\\nl\""], "650": ["\"\""], "261": ["([], [516, 214, 51])"], "209": ["\"ifulhxhzpnyihyf\""], "329": ["False"], "355": ["\" John \""], "763": ["\"yCxpg2C2Pny\""], "780": ["\"2 5\""], "314": ["\"-90 244\""], "173": ["[4, 8, 6, 8, 5]"], "363": ["[1]"], "439": ["\"coscifysu\""], "647": ["['/alcm@ an)t//eprw)/e!/d\\nujv']"], "589": ["[-70, 20, 9, 1, -70]"], "411": ["False"], "787": ["\"Xzd\""], "623": ["\"HI!\""], "220": ["\"bca\""], "274": ["target)\n    return count\n\n# Understanding the Function\nThe function `operation_to_perform` takes a list of numbers `nums` and an integer `target`. It counts how many pairs of numbers in the list sum up to the `target`. Here's a breakdown of how it works:\n- It initializes a counter `count` to zero.\n- It uses two nested loops to iterate through each pair of numbers in the list.\n- For each pair `(n1, n2)`, it checks if their sum equals the `target`. If they do, it increments the `count`.\n- Finally, it returns the total count of pairs that sum to the target.\n\n### Key Properties and Constraints\n- The function expects `nums` to be a list of integers.\n- The `target` is an integer.\n- The function counts pairs, so if there are `n` numbers in `nums`, the function will check `n^2` pairs.\n- The function returns an integer representing the number of pairs that sum to the `target`.\n\n### Conclusion\nLet's analyze the assertion `assert operation_to_perform([1, 2, 3], 4)"], "539": ["[]"], "68": ["\"wpvr.dq.omeunh\""], "555": ["\"odes_____code_____well\""], "544": ["\"    tab tab tabulates\""], "246": ["0"], "440": ["\"no\""], "290": ["\"bixaaaily\""], "384": ["\"asfdellos\""], "564": ["[395, 666, 7, 4]"], "356": ["[1, 2]"], "161": ["\" rinpxdifkj\""], "58": ["[-1, 0, 0, 1, 1, -1, 0, 0, 1, 1]"], "123": ["[1, 2, 3, 5, 6, 8]"], "645": ["1"], "222": ["\"0bb0b\""], "64": ["\"     7     \""], "767": ["\"d khqw whi fwi bbn 41\""], "168": ["\"spabn\""], "305": ["\"o hoseo\""], "109": ["[9, 1, 0, 1, 1]"], "41": ["[58, 92, 21]"], "609": ["{}"], "426": ["[1, 2, 3, 8]"], "381": ["\"00019\""], "375": ["\"sierizam\""], "497": ["['4', '4', '+', '+']"], "101": ["[-4, 4, 1, 0]"], "615": ["1"], "270": ["{}"], "120": ["{}"], "164": ["[0, 1, 3]"], "318": ["2"], "745": ["\"minimc@minimc.io\""], "472": ["['y', 'z', 'x', 'c', '5']"], "621": ["b'\\x82\\xb1\\x82\\xb3\\x82\\xb1\\x82\\xb9\\x82\\xb1\\x82\\xb5'"], "543": ["\".,,,,,. \u0645\u0646\u0628\u062a\""], "417": ["[8, 2, 8, 7]"], "475": ["1"], "163": ["\"w)))\")"], "789": ["\"bR\""], "147": ["[1, 1, 1]"], "596": ["[\"2\", \"3\", \"4\", \"7\", \"8\", \"9\"]"], "303": ["\"mjklbn\""], "310": ["\"__1.00r0__ja_a6__6\""]}