{
    "sample_759": [
        "[]"
    ],
    "sample_697": [
        "('not it', '', '')"
    ],
    "sample_2": [
        "'hbtfdeiequ'"
    ],
    "sample_105": [
        "'Permission Is Granted'"
    ],
    "sample_672": [
        "'mzd'"
    ],
    "sample_620": [
        "'3 ihomxqd an dlert'"
    ],
    "sample_201": [
        "'152'"
    ],
    "sample_711": [
        "'apples\\t\\tpears\\t\\tbananas'"
    ],
    "sample_696": [
        "2"
    ],
    "sample_449": [
        "True"
    ],
    "sample_126": [
        "'kxkxxfck--'"
    ],
    "sample_406": [
        "True"
    ],
    "sample_680": [
        "'we32r71g72ug94823658324'"
    ],
    "sample_198": [
        "'msfmtc'"
    ],
    "sample_582": [
        "[5, 5, 5, 5, 5, 5, 5]"
    ],
    "sample_391": [
        "['+', '9', 'r', '+']"
    ],
    "sample_551": [
        "['a', 'b', 'c', 'd', 'inf']"
    ],
    "sample_482": [
        "'Because it intrigues them'"
    ],
    "sample_740": [
        "[1, 2, 4]"
    ],
    "sample_512": [
        "True"
    ],
    "sample_13": [
        "3"
    ],
    "sample_253": [
        "'umwwfv'"
    ],
    "sample_594": [
        "25"
    ],
    "sample_663": [
        "[]"
    ],
    "sample_141": [
        "[1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]"
    ],
    "sample_454": [
        "{}"
    ],
    "sample_477": [
        "('|xduaisf', 'xduaisf')"
    ],
    "sample_642": [
        "'space'"
    ],
    "sample_223": [
        "2"
    ],
    "sample_199": [
        "'mnmnj krupa...##!@#!@#$$'"
    ],
    "sample_606": [
        "'ruamNHIB'"
    ],
    "sample_84": [
        "'nwv mef ofme bdrylday nwv mef ofme bdrylday nwv mef ofme bdrylday'"
    ],
    "sample_429": [
        "[(5, 1), ('abc', 2), ('defghi', 2), (87.29, 3)]"
    ],
    "sample_445": [
        "'Carrot, Banana, and Strawberry'"
    ],
    "sample_600": [
        "[]"
    ],
    "sample_81": [
        "[('Bulls', 'bulls'), ('White Sox', 45)]"
    ],
    "sample_19": [
        "''"
    ],
    "sample_691": [
        "'rpyt'"
    ],
    "sample_53": [
        "[0, 0, 0, 0, 0, 0]"
    ],
    "sample_98": [
        "2"
    ],
    "sample_367": [
        "[6, 2, 1, 1, 4, 1]"
    ],
    "sample_558": [
        "True"
    ],
    "sample_23": [
        "'new-medium-performing-application - XQuery 2.2'"
    ],
    "sample_74": [
        "[44, 34, 23, 82, 15, 24, 11, 63, 99]"
    ],
    "sample_8": [
        "'UppEr'"
    ],
    "sample_344": [
        "[6, 4, 2, 8, 15]"
    ],
    "sample_49": [
        "'816'"
    ],
    "sample_304": [
        "{18: 6, 17: 3}"
    ],
    "sample_36": [
        "'ha'"
    ],
    "sample_245": [
        "['U', 'P', 'P', 'E', 'R', 'C', 'A', 'S', 'E', 'D', 'all_uppercased']"
    ],
    "sample_100": [
        "{'1': 'b'}"
    ],
    "sample_269": [
        "['0', 2]"
    ],
    "sample_770": [
        "'$$$$$$$$78'"
    ],
    "sample_626": [
        "'bbab'"
    ],
    "sample_394": [
        "2"
    ],
    "sample_297": [
        "'Half Life'"
    ],
    "sample_26": [
        "'error'"
    ],
    "sample_453": [
        "False"
    ],
    "sample_748": [
        "(('a', 123), ('b', 456))"
    ],
    "sample_735": [
        "'ABB'"
    ],
    "sample_264": [
        "'pApArA'"
    ],
    "sample_46": [
        "'manylettersasvszhelloman'"
    ],
    "sample_387": [
        "[3, 1, 0, 2]"
    ],
    "sample_648": [
        "6"
    ],
    "sample_103": [
        "'abcdefghij'"
    ],
    "sample_572": [
        "[(2, 10), (3, 1), (1, 9)]"
    ],
    "sample_704": [
        "'.'"
    ],
    "sample_785": [
        "'1'"
    ],
    "sample_765": [
        "3"
    ],
    "sample_579": [
        "''"
    ],
    "sample_353": [
        "4"
    ],
    "sample_221": [
        "'24fc5.bpxa'"
    ],
    "sample_278": [
        "{0: [5], 132: [5, 32]}"
    ],
    "sample_398": [
        "{'2': [2], '0': [1], '1': [2]}"
    ],
    "sample_723": [
        "['dga nqdk', 'ull qcha kl']"
    ],
    "sample_634": [
        "'biua'"
    ],
    "sample_450": [
        "'K zKB'"
    ],
    "sample_89": [
        "'o'"
    ],
    "sample_94": [
        "{'w': 3, 'wi': 10}"
    ],
    "sample_45": [
        "0"
    ],
    "sample_792": [
        "{'a': 'dog', 'b': 'dog'}"
    ],
    "sample_273": [
        "'.T'"
    ],
    "sample_165": [
        "True"
    ],
    "sample_521": [
        "[77, 9, 0, 2, 5, 77, 4, 0, 43]"
    ],
    "sample_790": [
        "(False, False)"
    ],
    "sample_407": [
        "3"
    ],
    "sample_25": [
        "{'t': 2}"
    ],
    "sample_746": [
        "{}"
    ],
    "sample_69": [
        "'Name unknown'"
    ],
    "sample_550": [
        "[1, 1, 2, 2, 4, 4]"
    ],
    "sample_56": [
        "True"
    ],
    "sample_162": [
        "'\u0421BISHOP'"
    ],
    "sample_142": [
        "'hpfdky'"
    ],
    "sample_327": [
        "[-1, 7, -3, 1]"
    ],
    "sample_227": [
        "'Manolo'"
    ],
    "sample_153": [
        "False"
    ],
    "sample_112": [
        "'LittleRedRidingHoodLiTTleBIGGeXEiT'"
    ],
    "sample_731": [
        "'Chris requires  ride to the airport on Friday.'"
    ],
    "sample_644": [
        "[1, 6]"
    ],
    "sample_28": [
        "False"
    ],
    "sample_793": [
        "6"
    ],
    "sample_181": [
        "['3291223', 6]"
    ],
    "sample_701": [
        "'31849 let it!31849 pass!'"
    ],
    "sample_251": [
        "'Marie;Nelson;Oscar;+353. '"
    ],
    "sample_284": [
        "''"
    ],
    "sample_292": [
        "'5*******'"
    ],
    "sample_419": [
        "'mmfb'"
    ],
    "sample_786": [
        "'919kefp7'"
    ],
    "sample_760": [
        "['f', 'h', 'j', 'k']"
    ],
    "sample_405": [
        "[5, 3, 4, 1, 2, 3, 5]"
    ],
    "sample_446": [
        "[]"
    ],
    "sample_796": [
        "'fnuiyh'"
    ],
    "sample_12": [
        "'If you want to live a happy life!'\n[/ANMONOLOGUE]"
    ],
    "sample_212": [
        "[1, -9, 7, 2, 6, -3, 3]"
    ],
    "sample_443": [
        "'lorem ipsum'"
    ],
    "sample_727": [
        "['dxh', 'ix', 'snegi', 'wiubvu']"
    ],
    "sample_216": [
        "2"
    ],
    "sample_702": [
        "[-4, 0, -5]"
    ],
    "sample_437": [
        "{'john': None, 'doe': None, 'the': None}"
    ],
    "sample_195": [
        "'ilfdoirwirmtoibs'"
    ],
    "sample_63": [
        "'dbtdabdahesyehu'"
    ],
    "sample_93": [
        "'qi!!'"
    ],
    "sample_518": [
        "False"
    ],
    "sample_208": [
        "['c', 'a', 't']"
    ],
    "sample_777": [
        "['avc  a .d e']"
    ],
    "sample_517": [
        "'SzHjifn'"
    ],
    "sample_519": [
        "{1: False, 2: 0}"
    ],
    "sample_756": [
        "'string'"
    ],
    "sample_529": [
        "[1, 2, 3]"
    ],
    "sample_138": [
        "'tflb omn rtt'"
    ],
    "sample_622": [
        "'galgu'"
    ],
    "sample_144": [
        "[]"
    ],
    "sample_117": [
        "1"
    ],
    "sample_722": [
        "',WpZpPpDl/'"
    ],
    "sample_296": [
        "'https://www.ekapusta.com/image/url'"
    ],
    "sample_337": [
        "'LL'"
    ],
    "sample_5": [
        "\ndef operation_to_perform(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return count, ''.join(new_text)\n\n# Understanding the Function\nThe function `operation_to_perform` takes three parameters:\n- `text`: a string that we want to process.\n- `lower`: a character that will replace any decimal digits in `text` with.\n- `upper`: a character that will replace any non-decimal characters in `text` with.\n\nThe function performs the following operations:\n1. It initializes a counter `count` to zero.\n2. It creates an empty list `new_text` to store the processed characters.\n3. It iterates over each character in the input `text`.\n4. If the character is a decimal digit, it replaces it with `lower`; otherwise, it replaces it with `upper`.\n5. It checks if the replaced character is either `'p'` or `'C'` and increments the `count` if true.\n6. Finally, it returns a tuple containing the `count` and the joined string of `new_text`.\n\n# Key Properties and Constraints\n- The function processes the input string `text`, modifying it based on the specified `lower` and `upper` characters.\n- The `count` reflects how many times the characters `'p'` or `'C'` appear in the modified string.\n- The output is a tuple where the first element is the count of occurrences of `'p'` or `'C'`, and the second element is the modified string.\n\n# Execution Simulation\nLet's simulate the execution of `operation_to_perform('DSUWeqExTQdCMGpqur', 'a', 'x')` step by step.\n\n1. **Initialization**:\n   - `count = 0`\n   - `new_text = []`\n\n2. **Iteration over `text`**:\n   - For each character in `'DSUWeqExTQdCMGpqur'`:\n     - **'D'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x']`\n     - **'S'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x']`\n     - **'U'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x']`\n     - **'W'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x']`\n     - **'e'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x']`\n     - **'q'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x']`\n     - **'E'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x']`\n     - **'x'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']`\n     - **'T'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']`\n     - **'Q'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']`\n     - **'d'**: Is a decimal, replace with 'a' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a']`\n     - **'C'**: Is a decimal, replace with 'a' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a']`\n     - **'M'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x']`\n     - **'G'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x']`\n     - **'p'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x', 'x']`\n     - **'q'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x', 'x', 'x']`\n     - **'u'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x', 'x', 'x', 'x']`\n     - **'r'**: Not a decimal, replace with 'x' \u2192 `new_text = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'a', 'a', 'x', 'x', 'x', 'x', 'x', 'x']`\n\n3. **Counting occurrences**:\n   - After processing, we find that `'p'` and `'C'` appear 2 times in the modified string.\n\n4. **Returning the result**:\n   - The function returns `(2, 'xaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxaaxxa"
    ],
    "sample_749": [
        "'l\\nl'"
    ],
    "sample_650": [
        "''"
    ],
    "sample_261": [
        "([], [516, 214, 51])"
    ],
    "sample_209": [
        "'ifulhxhzpnyihyf'"
    ],
    "sample_329": [
        "False"
    ],
    "sample_355": [
        "' John '"
    ],
    "sample_763": [
        "'yCxpg2C2Pny'"
    ],
    "sample_780": [
        "'2 5'"
    ],
    "sample_314": [
        "'-90 244'"
    ],
    "sample_173": [
        "[4, 8, 6, 8, 5]"
    ],
    "sample_363": [
        "[1]"
    ],
    "sample_439": [
        "'coscifysu'"
    ],
    "sample_647": [
        "['/alcm@ an)t//eprw)/e!/d\\nujv']"
    ],
    "sample_589": [
        "[-70, 20, 9, 1, -70]"
    ],
    "sample_411": [
        "False"
    ],
    "sample_787": [
        "'Xzd'"
    ],
    "sample_623": [
        "'HI!'"
    ],
    "sample_220": [
        "'bca'"
    ],
    "sample_274": [
        "2"
    ],
    "sample_539": [
        "[]"
    ],
    "sample_68": [
        "'wpvr.dq.omeunh'"
    ],
    "sample_555": [
        "'odes_____code_____well'"
    ],
    "sample_544": [
        "'    tab tab tabulates'"
    ],
    "sample_246": [
        "0"
    ],
    "sample_440": [
        "'no'"
    ],
    "sample_290": [
        "'bixaaaily'"
    ],
    "sample_384": [
        "'asfdellos'"
    ],
    "sample_564": [
        "[395, 666, 7, 4]"
    ],
    "sample_356": [
        "[1, 2]"
    ],
    "sample_161": [
        "' rinpxdifkj'"
    ],
    "sample_58": [
        "[-1, 0, 0, 1, 1, -1, 0, 0, 1, 1]"
    ],
    "sample_123": [
        "[1, 2, 3, 5, 6, 8]"
    ],
    "sample_645": [
        "1"
    ],
    "sample_222": [
        "'0bb0b'"
    ],
    "sample_64": [
        "'     7     '"
    ],
    "sample_767": [
        "'d khqw whi fwi bbn 41'"
    ],
    "sample_168": [
        "'spabn'"
    ],
    "sample_305": [
        "'o hoseo'"
    ],
    "sample_109": [
        "[9, 1, 0, 1, 1]"
    ],
    "sample_41": [
        "[58, 92, 21]"
    ],
    "sample_609": [
        "{}"
    ],
    "sample_426": [
        "[1, 2, 3, 8]"
    ],
    "sample_381": [
        "'00019'"
    ],
    "sample_375": [
        "'sierizam'"
    ],
    "sample_497": [
        "['4', '4', '+', '+']"
    ],
    "sample_101": [
        "[-4, 4, 1, 0]"
    ],
    "sample_615": [
        "1"
    ],
    "sample_270": [
        "{}"
    ],
    "sample_120": [
        "{}"
    ],
    "sample_164": [
        "[0, 1, 3]"
    ],
    "sample_318": [
        "2"
    ],
    "sample_745": [
        "'minimc@minimc.io'"
    ],
    "sample_472": [
        "['y', 'z', 'x', 'c', '5']"
    ],
    "sample_621": [
        "b'\\x82\\xb1\\x82\\xb3\\x82\\xb1\\x82\\xb9\\x82\\xb1\\x82\\xb5'"
    ],
    "sample_543": [
        "'.,,,,,. \u0645\u0646\u0628\u062a'"
    ],
    "sample_417": [
        "[8, 2, 8, 7]"
    ],
    "sample_475": [
        "1"
    ],
    "sample_163": [
        "'w)))')"
    ],
    "sample_789": [
        "'bR'"
    ],
    "sample_147": [
        "[1, 1, 1]"
    ],
    "sample_596": [
        "['2', '3', '4', '7', '8', '9']"
    ],
    "sample_303": [
        "'mjklbn'"
    ],
    "sample_310": [
        "'__1.00r0__ja_a6__6'"
    ]
}