{"759": ["[]"], "697": ["(\"\", \"\", \"not it\")"], "2": ["\"hbtofdeiequ\""], "105": ["\"Permission Is Granted\""], "672": ["\"mzd\""], "620": ["\"3 iho qxm dna tler\""], "201": ["\"64//42512ryw4--p\""], "711": ["\"apples\\t\\tpears\\t\\tbananas\""], "696": ["4"], "449": ["True"], "126": ["\"o-kxkxxfck-k\""], "406": ["Let's execute the code step by step:\n\n1. The function operation_to_perform is defined, which takes a single argument text.\n2. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n3. The function converts the text into a list of characters, storing it in VAR_0.\n4. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n5. The list of characters is then joined back into a string.\n6. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n7. The function returns True if the string is a title, and False otherwise.\n8. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n9. The function converts the text into a list of characters, storing it in VAR_0.\n10. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n11. The list of characters is then joined back into a string.\n12. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n13. The function returns True if the string is a title, and False otherwise.\n14. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n15. The function converts the text into a list of characters, storing it in VAR_0.\n16. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n17. The list of characters is then joined back into a string.\n18. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n19. The function returns True if the string is a title, and False otherwise.\n20. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n21. The function converts the text into a list of characters, storing it in VAR_0.\n22. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n23. The list of characters is then joined back into a string.\n24. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n25. The function returns True if the string is a title, and False otherwise.\n26. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n27. The function converts the text into a list of characters, storing it in VAR_0.\n28. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n29. The list of characters is then joined back into a string.\n30. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n31. The function returns True if the string is a title, and False otherwise.\n32. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n33. The function converts the text into a list of characters, storing it in VAR_0.\n34. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n35. The list of characters is then joined back into a string.\n36. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n37. The function returns True if the string is a title, and False otherwise.\n38. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n39. The function converts the text into a list of characters, storing it in VAR_0.\n40. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n41. The list of characters is then joined back into a string.\n42. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n43. The function returns True if the string is a title, and False otherwise.\n44. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n45. The function converts the text into a list of characters, storing it in VAR_0.\n46. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n47. The list of characters is then joined back into a string.\n48. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n49. The function returns True if the string is a title, and False otherwise.\n50. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n51. The function converts the text into a list of characters, storing it in VAR_0.\n52. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n53. The list of characters is then joined back into a string.\n54. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n55. The function returns True if the string is a title, and False otherwise.\n56. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n57. The function converts the text into a list of characters, storing it in VAR_0.\n58. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n59. The list of characters is then joined back into a string.\n60. The istitle() function checks if the string is a title (i.e., it checks if the first character is uppercase and all other characters are lowercase).\n61. The function returns True if the string is a title, and False otherwise.\n62. The function is called with the argument \"Josh\", so within the function, text is initially \"Josh\".\n63. The function converts the text into a list of characters, storing it in VAR_0.\n64. The first and last characters of VAR_0 are swapped, making the first character uppercase and the last character uppercase.\n65. The list of characters is then joined back"], "680": ["\"we32r71g72ug94823658324\""], "198": ["\"fsm\""], "582": ["[5, 5, 5, 5, 5, 5, 5]"], "391": ["['+', 'r', '+', '9', '+']"], "551": ["[\"a\", \"b\", \"c\", \"d\", \"inf\"]"], "482": ["\"Because it intrigues them\""], "740": ["[1, 2, 4]"], "512": ["True"], "13": ["3"], "253": ["\"umwwfv\""], "594": ["17"], "663": ["[]"], "141": ["[1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]"], "454": ["{\"a\": 2, \"b\": [], \"c\": {}}"], "477": ["(\"xduaisf\", \"xdpaf\")"], "642": ["\"space\""], "223": ["2"], "199": ["\"mnmnj krupa...##!---@@@\""], "606": ["\"ruamNHIB\""], "84": ["\"nwv mef ofme bdryl\""], "429": ["[(5, 1), (\"abc\", 2), (\"defghi\", 2), (87.29, 3)] or [(87.29, 3), (\"abc\", 2), (\"defghi\", 2), (5, 1)]"], "445": ["\"Carrot, Banana, Strawberry\""], "600": ["[]"], "81": ["[('Bulls', '23'), ('White Sox', 45)]"], "19": ["Let's execute the code step by step:\n\n1. The function operation_to_perform is defined, which takes two arguments: VAR_0 and y.\n2. The function is called with the arguments \"\", \"sdasdnakjsda80\".\n3. Inside the function, a temporary string tmp is created by reversing y and replacing each character \"9\" with \"0\" and each character \"0\" with \"9\".\n4. If VAR_0 is numeric and tmp is numeric, the function returns the concatenation of VAR_0 and tmp.\n5. If VAR_0 is not numeric or tmp is not numeric, the function returns VAR_0.\n6. The reversed string of y isrue"], "23": ["\"new-medium-performing-application\""], "74": ["[44, 34, 23, 82, 15, 24, 11, 63, 99]"], "8": ["\"UPPER\"\nassert operation_to_perform(\"UppEr\", 1)"], "344": ["[15, 8, 2, 4, 6]"], "49": ["\"816\""], "304": ["{18: 6, 87: 7}"], "36": ["\"ha\""], "245": ["['U', 'P', 'P', 'E', 'R', 'C', 'A', 'S', 'E', 'D', ' ', '#', '%', '^', '@', ' ', 'V', 'Z', '.', 'all_uppercased']"], "100": ["{\"1\": \"a\"}"], "269": ["[9, 2, 0, 0]"], "770": ["\"$$$$$78\""], "626": ["\"babb\""], "394": ["2"], "297": ["\"Half Life\""], "26": ["4"], "453": ["False"], "748": ["((\"a\", 123), (\"b\", 456))"], "735": ["\"Ab\""], "264": ["\"pApApApApApApApA\""], "46": ["\"manylettersasvszhelloman\""], "387": ["[3, 1, 0, 2]"], "648": ["4"], "103": ["\"abcdefghij\""], "572": ["[(3, 1), (2, 10), (1, 9)]"], "704": ["\".\""], "785": ["\"1  \""], "765": ["4"], "579": ["\"\""], "353": ["3"], "221": ["\".bpxa24fc5\""], "278": ["{0: [5, 32], 132: [991, 997]}"], "398": ["{\"2\": [2], \"0\": [1], \"1\": [2]}"], "723": ["\"dga nqdk ull qcha kl\""], "634": ["\"bieii\""], "450": ["\"K zKB\""], "89": ["None"], "94": ["{\"w\": 3, \"wi\": 10}"], "45": ["2"], "792": ["{'a': 'car', 'b': 'dog'}"], "273": ["\"T.E.\""], "165": ["False"], "521": ["[77, 9, 0, 2, 5, 77, 4, 0, 43]"], "790": ["(True, True)"], "407": ["2"], "25": ["{\"l\": 1, \"t\": 2}"], "746": ["{}"], "69": ["\"Name unknown\""], "550": ["[1, 1, 4, 2, 16, 4]"], "56": ["True"], "162": ["\"CBIshopSWIFT\""], "142": ["\"hpfdky\""], "327": ["[-1, 7, 1, -3]"], "227": ["\"Manolo\""], "153": ["True"], "112": ["\"LittleRedRidingHoodLiTTleBIGGeXEiT\""], "731": ["\"Chris requires  ride to the airport on Friday.\""], "644": ["[1, 6]"], "28": ["False"], "793": ["6"], "181": ["['3291223', 6]"], "701": ["\"31849 let it31849 pass31849\""], "251": ["\"Marie;Nelson;Oscar;+353;\""], "284": ["\"\""], "292": ["\"5*83*23*saa\""], "419": ["\"mmfb\""], "786": ["\"kefp719\""], "760": ["['f', 'h', 'j', 'k']"], "405": ["Let's execute the code step by step:\n\n1. The function operation_to_perform is defined, which takes a single argument VAR_0.\n2. The first element of VAR_0 is subtracted by 1 and stored in new_x.\n3. The first element of VAR_0 is removed.\n4. A while loop is started, which continues until new_x is less than or equal to the first element of VAR_0.\n5. Inside the loop, the first element of VAR_0 is removed and new_x is subtracted by 1.\n6. The updated new_x is then inserted at the beginning of VAR_0.\n7. The function returns the updated VAR_0.\n8. The function is called with the argument [6, 3, 4, 1, 2, 3, 5], so VAR_0 is initially [6, 3, 4, 1, 2, 3, 5].\n9. The first element of VAR_0 (6) is subtracted by 1 and stored in new_x, so new_x is now 5.\n10. The first element of VAR_0 (6) is removed.\n11. The while loop is started, which continues until new_x is less than or equal to the first element of VAR_0 (3).\n12. Inside the loop, the first element of VAR_0 (3) is removed and new_x is subtracted by 1, so new_x is now 4.\n13. The updated new_x (4) is then inserted at the beginning of VAR_0.\n14. The function returns the updated VAR_0, which is now [4, 3, 4, 1, 2, 3, 5].\n15. The function is called with the argument [6, 3, 4, 1, 2, 3, 5], so VAR_0 is initially [6, 3, 4, 1, 2, 3, 5].\n16. The first element of VAR_0 (6) is subtracted by 1 and stored in new_x, so new_x is now 5.\n17. The first element of VAR_0 (6) is removed.\n18. The while loop is started, which continues until new_x is less than or equal to the first element of VAR_0 (3).\n19. Inside the loop, the first element of VAR_0 (3) is removed and new_x is subtracted by 1, so new_x is now 2.\n20. The updated new_x (2) is then inserted at the beginning of VAR_0.\n21. The function returns the updated VAR_0, which is now [2, 3, 4, 1, 2, 3, 5].\n22. The function is called with the argument [6, 3, 4, 1, 2, 3, 5], so VAR_0 is initially [6, 3, 4, 1, 2, 3, 5].\n23. The first element of VAR_0 (6) is subtracted by 1 and stored in new_x, so new_x is now 5.\n24. The first element of VAR_0 (6) is removed.\n25. The while loop is started, which continues until new_x is less than or equal to the first element of VAR_0 (3).\n26. Inside the loop, the first element of VAR_0 (3) is removed and new_x is subtracted by 1, so new_x is now 2.\n27. The updated new_x (2) is then inserted at the beginning of VAR_0.\n28. The function returns the updated VAR_0, which is now [2, 3, 4, 1, 2, 3, 5].\n29. The function is called with the argument [6, 3, 4, 1, 2, 3, 5], so VAR_0 is initially [6, 3, 4, 1, 2, 3, 5].\n30. The first element of VAR_0 (6) is subtracted by 1 and stored in new_x, so new_x is now 5.\n31. The first element of VAR_0 (6) is removed.\n32. The while loop is started, which continues until new_x is less than or equal to the first element of VAR_0 (3).\n33. Inside the loop, the first element of VAR_0 (3) is removed and new_x is subtracted by 1, so new_x is now 2.\n34. The updated new_x (2) is then inserted at the beginning of VAR_0.\n35. The function returns the updated VAR_0, which is now [2, 3, 4, 1, 2, 3, 5].\n36. The function is called with the argument [6, 3, 4, 1, 2, 3, 5], so VAR_0 is initially [6, 3, 4, 1, 2, 3, 5].\n37. The first element of VAR_0 (6) is subtracted by 1 and stored in new_x, so new_x is now 5.\n38. The first element of VAR_0 (6) is removed.\n39. The while loop is started, which continues until new_x is less than or equal to the first element of VAR_0 (3).\n39. Inside the loop, the first element of VAR_0 (3) is removed and new_x is subtracted by 1, so new_x is now 2.\n40. The updated new_x (2) is then inserted at the beginning of VAR_0.\n41. The function returns the updated VAR_0, which is now [2, 3, 4, 1, 2, 3, 5].\n42. The function is called with the argument [6, 3, 4, 1, 2, 3, 5], so VAR_0 is initially [6, 3, 4, 1, 2, 3, 5].\n43. The first element of VAR_0 (6) is subtracted by 1 and stored in new_x, so new_x is now 5.\n44. The first element of VAR_0 (6) is removed.\n45. The while loop is started, which continues until new_x is less than or equal to the first element of VAR_0 (3).\n46. Inside the loop, the first element of VAR_0 (3) is removed and new_x is subtracted by 1, so new_x is now 2.\n47. The updated new_x (2) is then inserted at the beginning of VAR_0.\n48. The function returns the updated VAR_0, which is now [2, 3, 4"], "446": ["[]"], "796": ["\"fnuiyh\""], "12": ["\"If you want to live a happy life\""], "212": ["[-3, 6, 2, 7, -9, 1, 3]"], "443": ["\"lore mi\""], "727": ["[\"\", \"x\", \"dxh\", \"snegi\", \"wiubvu\"]"], "216": ["2"], "702": ["[0, -5, -4]"], "437": ["{'john': None, 'doe': None, 'the': None}"], "195": ["\"irwirmtoib\""], "63": ["\"dbtdabdahesyehu\""], "93": ["Let's execute the code step by step:\n\n1. The function operation_to_perform is defined, which takes a single argument VAR_0.\n2. The function is called with the argument \"iq\", so within the function, VAR_0 is initially \"iq\".\n3. The length of VAR_0 is calculated and stored in the variable length, which is 2 more than the length of VAR_0.\n4. The function then converts VAR_0 into a list and stores it in the variable revn.\n5. The list revn is then joined together into a string and stored in the variable result.\n6. The list revn is then cleared.\n7. The function returns a new string that starts with the value of result, followed by a string of \"!\" repeated length times.\n8. The return value of the function is therefore \"iqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiqiq"], "518": ["True"], "208": ["['c', 'a', 't', ' ', 'd', ' ', 'd', 'e', 'e']"], "777": ["[\"avc  a .d e\"]"], "517": ["\"SzHjifn\""], "519": ["{1: False, 2: 0}"], "756": ["\"string\""], "529": ["[1, 3]"], "138": ["\"tflb om nrt\""], "622": ["\"galgu, gu\""], "144": ["[]"], "117": ["-1"], "722": ["\"%WpZpPpDl/\""], "296": ["\"www.ekapusta.com/image/url\""], "337": ["\"LL\""], "5": ["(3, \"axxUeqExTQdCMGpxqur\")"], "749": ["\"l \\nl \""], "650": ["\"\""], "261": ["([], [516, 5, 214, 51])"], "209": ["\"fulhxhzpnyihyf\""], "329": ["False"], "355": ["\"123x John \""], "763": ["\"yCxpg2C2Pny\""], "780": ["\"2 5\""], "314": ["\"105, 244, -90\""], "173": ["[4, 8, 6, 8, 5]"], "363": ["[1]"], "439": ["\"coscysu\""], "647": ["[\"/alcm@ an)t//eprw)/e!/d\\nujv\"]"], "589": ["[-70, 20, 9, 1, 1]"], "411": ["False"], "787": ["\"Xzd\""], "623": ["\"HI~!\""], "220": ["\"cbaefgadc\""], "274": ["1"], "539": ["[]"], "68": ["\"wpvr.dq.omeunh\""], "555": ["\"odes  code  well\""], "544": ["'    tab\\ntabulates'"], "246": ["0"], "440": ["\"no\""], "290": ["\"BIAAAILY\""], "384": ["\"asfdellos\""], "564": ["[395, 666, 7, 4]"], "356": ["[1, 2]"], "161": ["\"j rinpxdif\""], "58": ["[-1, 0, 0, 1, 1, -1, 0, 1]"], "123": ["[1, 2, 3, 5, 6, 8]"], "645": ["0"], "222": ["\"0bb0\""], "64": ["\" 7 \""], "767": ["\"41\""], "168": ["\"spabin\""], "305": ["\"o horseto\""], "109": ["[9, 1, 0, 1, 1]"], "41": ["[21, 58, 92]"], "609": ["{}"], "426": ["[1, 2, 3, 8]"], "381": ["\"00019\""], "375": ["\"sierizam\""], "497": ["['4', '4', '+', '+', '+']"], "101": ["[ -4, 4, 1, 0]"], "615": ["1"], "270": ["{}"], "120": ["{}"], "164": ["[0, 1, 3]"], "318": ["2"], "745": ["\"minimc@minimc\""], "472": ["[1, 1, 1, 1, 2, 2]"], "621": ["'LookupError'"], "543": ["\"?.,,,,,.? \u0645\u0646\u0628\u062a\""], "417": ["[8, 8, 2]"], "475": ["1"], "163": ["\"w)))\"."], "789": ["\"bR\""], "147": ["[1]"], "596": ["[\"2\", \"3\", \"4\", \"7\", \"8\", \"9\"]"], "303": ["\"mjklbN\""], "310": ["\"__1.0r0__a_j6__6\""]}